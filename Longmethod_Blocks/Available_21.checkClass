boolean#checkClass#(#String#classname#)#{#try#{##if#(#ignoreSystemclasses#)#{#loader#=#getProject#(#)#.#createClassLoader#(#classpath#)#;#loader#.#setParentFirst#(#false#)#;#loader#.#addJavaLibraries#(#)#;##if#(#loader#!=#null#)#{#try#{#loader#.#findClass#(#classname#)#;#}##catch#(#SecurityException#se#)#{##// class found but restricted name; this is##// actually the case we're looking for in JDK 1.3+,##// so catch the exception and return##return#true#;#}#}#else#{##return#false#;#}#}#else##if#(#loader#!=#null#)#{#loader#.#loadClass#(#classname#)#;#}#else#{#ClassLoader#l#=#this#.#getClass#(#)#.#getClassLoader#(#)#;##// Can return null to represent the bootstrap class loader.##// see API docs of Class.getClassLoader.##if#(#l#!=#null#)#{#Class#.#forName#(#classname#,#true#,#l#)#;#}#else#{#Class#.#forName#(#classname#)#;#}#}##return#true#;#}##catch#(#ClassNotFoundException#e#)#{#log#(#"class \""#+#classname#+#"\" was not found"#,#Project#.#MSG_DEBUG#)#;##return#false#;#}##catch#(#NoClassDefFoundError#e#)#{#log#(#"Could not load dependent class \""#+#e#.#getMessage#(#)#+#"\" for class \""#+#classname#+#"\""#,#Project#.#MSG_DEBUG#)#;##return#false#;#}#}