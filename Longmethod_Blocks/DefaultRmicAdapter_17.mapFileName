String#[#]#mapFileName#(#String#name#)#{##if#(#name#==#null#||#!#name#.#endsWith#(#".class"#)#||#name#.#endsWith#(#getStubClassSuffix#(#)#+#".class"#)#||#name#.#endsWith#(#getSkelClassSuffix#(#)#+#".class"#)#||#name#.#endsWith#(#getTieClassSuffix#(#)#+#".class"#)#)#{##// Not a .class file or the one we'd generate##return#null#;#}##// we know that name.endsWith(".class")#String#base#=#StringUtils#.#removeSuffix#(#name#,#".class"#)#;#String#classname#=#base#.#replace#(#File#.#separatorChar#,#'.'#)#;##if#(#attributes#.#getVerify#(#)#&&#!#attributes#.#isValidRmiRemote#(#classname#)#)#{##return#null#;#}##/*
             * fallback in case we have trouble loading the class or
             * don't know how to handle it (there is no easy way to
             * know what IDL mode would generate.
             *
             * This is supposed to make Ant always recompile the
             * class, as a file of that name should not exist.
             */#String#[#]#target#=#new#String#[#]#{#name#+#".tmp."#+#RAND#.#nextLong#(#)#}#;##if#(#!#attributes#.#getIiop#(#)#&&#!#attributes#.#getIdl#(#)#)#{##// JRMP with simple naming convention##if#(#STUB_OPTION_1_2#.#equals#(#attributes#.#getStubVersion#(#)#)#)#{#target#=#new#String#[#]#{#base#+#getStubClassSuffix#(#)#+#".class"#}#;#}#else#{#target#=#new#String#[#]#{#base#+#getStubClassSuffix#(#)#+#".class"#,#base#+#getSkelClassSuffix#(#)#+#".class"#,#}#;#}#}#else##if#(#!#attributes#.#getIdl#(#)#)#{#int#lastSlash#=#base#.#lastIndexOf#(#File#.#separatorChar#)#;#String#dirname#=#""#;##/*
                 * I know, this is not necessary, but I prefer it explicit (SB)
                 */#int#index#=#-#1#;##if#(#lastSlash#==#-#1#)#{##// no package#index#=#0#;#}#else#{#index#=#lastSlash#+#1#;#dirname#=#base#.#substring#(#0#,#index#)#;#}##String#filename#=#base#.#substring#(#index#)#;##try#{#Class#c#=#attributes#.#getLoader#(#)#.#loadClass#(#classname#)#;##if#(#c#.#isInterface#(#)#)#{##// only stub, no tie#target#=#new#String#[#]#{#dirname#+#"_"#+#filename#+#getStubClassSuffix#(#)#+#".class"#}#;#}#else#{##/*
                         * stub is derived from implementation,
                         * tie from interface name.
                         */#Class#interf#=#attributes#.#getRemoteInterface#(#c#)#;#String#iName#=#interf#.#getName#(#)#;#String#iDir#=#""#;#int#iIndex#=#-#1#;#int#lastDot#=#iName#.#lastIndexOf#(#"."#)#;##if#(#lastDot#==#-#1#)#{##// no package#iIndex#=#0#;#}#else#{#iIndex#=#lastDot#+#1#;#iDir#=#iName#.#substring#(#0#,#iIndex#)#;#iDir#=#iDir#.#replace#(#'.'#,#File#.#separatorChar#)#;#}##target#=#new#String#[#]#{#dirname#+#"_"#+#filename#+#getTieClassSuffix#(#)#+#".class"#,#iDir#+#"_"#+#iName#.#substring#(#iIndex#)#+#getStubClassSuffix#(#)#+#".class"#}#;#}#}##catch#(#ClassNotFoundException#e#)#{#attributes#.#log#(#"Unable to verify class "#+#classname#+#". It could not be found."#,#Project#.#MSG_WARN#)#;#}##catch#(#NoClassDefFoundError#e#)#{#attributes#.#log#(#"Unable to verify class "#+#classname#+#". It is not defined."#,#Project#.#MSG_WARN#)#;#}##catch#(#Throwable#t#)#{#attributes#.#log#(#"Unable to verify class "#+#classname#+#". Loading caused Exception: "#+#t#.#getMessage#(#)#,#Project#.#MSG_WARN#)#;#}#}##return#target#;#}