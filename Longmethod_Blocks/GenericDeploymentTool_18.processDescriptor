void#processDescriptor#(#String#descriptorFileName#,#SAXParser#saxParser#)#{#checkConfiguration#(#descriptorFileName#,#saxParser#)#;##try#{#handler#=#getDescriptorHandler#(#config#.#srcDir#)#;##// Retrive the files to be added to JAR from EJB descriptor#Hashtable#ejbFiles#=#parseEjbFiles#(#descriptorFileName#,#saxParser#)#;##// Add any support classes specified in the build file#addSupportClasses#(#ejbFiles#)#;##// Determine the JAR filename (without filename extension)#String#baseName#=#getJarBaseName#(#descriptorFileName#)#;#String#ddPrefix#=#getVendorDDPrefix#(#baseName#,#descriptorFileName#)#;#File#manifestFile#=#getManifestFile#(#ddPrefix#)#;##if#(#manifestFile#!=#null#)#{#ejbFiles#.#put#(#MANIFEST#,#manifestFile#)#;#}##// First the regular deployment descriptor#ejbFiles#.#put#(#META_DIR#+#EJB_DD#,#new#File#(#config#.#descriptorDir#,#descriptorFileName#)#)#;##// now the vendor specific files, if any#addVendorFiles#(#ejbFiles#,#ddPrefix#)#;##// add any dependent files#checkAndAddDependants#(#ejbFiles#)#;##// Lastly create File object for the Jar files. If we are using##// a flat destination dir, then we need to redefine baseName!##if#(#config#.#flatDestDir#&&#baseName#.#length#(#)#!=#0#)#{#int#startName#=#baseName#.#lastIndexOf#(#File#.#separator#)#;##if#(#startName#==#-#1#)#{#startName#=#0#;#}##int#endName#=#baseName#.#length#(#)#;#baseName#=#baseName#.#substring#(#startName#,#endName#)#;#}##File#jarFile#=#getVendorOutputJarFile#(#baseName#)#;##// Check to see if we need a build and start doing the work!##if#(#needToRebuild#(#ejbFiles#,#jarFile#)#)#{##// Log that we are going to build...#log#(#"building "#+#jarFile#.#getName#(#)#+#" with "#+#String#.#valueOf#(#ejbFiles#.#size#(#)#)#+#" files"#,#Project#.#MSG_INFO#)#;##// Use helper method to write the jarfile#String#publicId#=#getPublicId#(#)#;#writeJar#(#baseName#,#jarFile#,#ejbFiles#,#publicId#)#;#}#else#{##// Log that the file is up to date...#log#(#jarFile#.#toString#(#)#+#" is up to date."#,#Project#.#MSG_VERBOSE#)#;#}#}##catch#(#SAXException#se#)#{#String#msg#=#"SAXException while parsing '"#+#descriptorFileName#+#"'. This probably indicates badly-formed XML."#+#"  Details: "#+#se#.#getMessage#(#)#;#throw#new#BuildException#(#msg#,#se#)#;#}##catch#(#IOException#ioe#)#{#String#msg#=#"IOException while parsing'"#+#descriptorFileName#+#"'.  This probably indicates that the descriptor"#+#" doesn't exist. Details: "#+#ioe#.#getMessage#(#)#;#throw#new#BuildException#(#msg#,#ioe#)#;#}#}