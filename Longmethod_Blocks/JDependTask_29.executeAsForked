int#executeAsForked#(#CommandlineJava#commandline#,#ExecuteWatchdog#watchdog#)#throws#BuildException#{#runtimeClasses#=#new#Path#(#getProject#(#)#)#;#addClasspathEntry#(#"/jdepend/textui/JDepend.class"#)#;##// if not set, auto-create the ClassPath from the project#createClasspath#(#)#;##// not sure whether this test is needed but cost nothing to put.##// hope it will be reviewed by anybody competent##if#(#getClasspath#(#)#.#toString#(#)#.#length#(#)#>#0#)#{#createJvmarg#(#commandline#)#.#setValue#(#"-classpath"#)#;#createJvmarg#(#commandline#)#.#setValue#(#getClasspath#(#)#.#toString#(#)#)#;#}##if#(#includeRuntime#)#{#Vector#v#=#Execute#.#getProcEnvironment#(#)#;#Enumeration#e#=#v#.#elements#(#)#;##while#(#e#.#hasMoreElements#(#)#)#{#String#s#=#(#String#)#e#.#nextElement#(#)#;##if#(#s#.#startsWith#(#"CLASSPATH="#)#)#{#commandline#.#createClasspath#(#getProject#(#)#)#.#createPath#(#)#.#append#(#new#Path#(#getProject#(#)#,#s#.#substring#(#"CLASSPATH="#.#length#(#)#)#)#)#;#}#}##log#(#"Implicitly adding "#+#runtimeClasses#+#" to CLASSPATH"#,#Project#.#MSG_VERBOSE#)#;#commandline#.#createClasspath#(#getProject#(#)#)#.#createPath#(#)#.#append#(#runtimeClasses#)#;#}##if#(#getOutputFile#(#)#!=#null#)#{##// having a space between the file and its path causes commandline##// to add quotes around the argument thus making JDepend not taking##// it into account. Thus we split it in two#commandline#.#createArgument#(#)#.#setValue#(#"-file"#)#;#commandline#.#createArgument#(#)#.#setValue#(#outputFile#.#getPath#(#)#)#;##// we have to find a cleaner way to put this output#}##if#(#getSourcespath#(#)#!=#null#)#{##// This is deprecated - use classespath in the future#String#[#]#sP#=#getSourcespath#(#)#.#list#(#)#;##for#(#int#i#=#0#;##i#<#sP#.#length#;#i#++#)#{#File#f#=#new#File#(#sP#[#i#]#)#;##// not necessary as JDepend would fail, but why loose##// some time?##if#(#!#f#.#exists#(#)#||#!#f#.#isDirectory#(#)#)#{#throw#new#BuildException#(#"\""#+#f#.#getPath#(#)#+#"\" does not represent a valid"#+#" directory. JDepend would"#+#" fail."#)#;#}##commandline#.#createArgument#(#)#.#setValue#(#f#.#getPath#(#)#)#;#}#}##if#(#getClassespath#(#)#!=#null#)#{##// This is the new way - use classespath - code is the##// same for now#String#[#]#cP#=#getClassespath#(#)#.#list#(#)#;##for#(#int#i#=#0#;##i#<#cP#.#length#;#i#++#)#{#File#f#=#new#File#(#cP#[#i#]#)#;##// not necessary as JDepend would fail, but why loose##// some time?##if#(#!#f#.#exists#(#)#)#{#throw#new#BuildException#(#"\""#+#f#.#getPath#(#)#+#"\" does not represent a valid"#+#" file or directory. JDepend would"#+#" fail."#)#;#}##commandline#.#createArgument#(#)#.#setValue#(#f#.#getPath#(#)#)#;#}#}##Execute#execute#=#new#Execute#(#new#LogStreamHandler#(#this#,#Project#.#MSG_INFO#,#Project#.#MSG_WARN#)#,#watchdog#)#;#execute#.#setCommandline#(#commandline#.#getCommandline#(#)#)#;##if#(#getDir#(#)#!=#null#)#{#execute#.#setWorkingDirectory#(#getDir#(#)#)#;#execute#.#setAntRun#(#getProject#(#)#)#;#}##if#(#getOutputFile#(#)#!=#null#)#{#log#(#"Output to be stored in "#+#getOutputFile#(#)#.#getPath#(#)#)#;#}##log#(#commandline#.#describeCommand#(#)#,#Project#.#MSG_VERBOSE#)#;##try#{##return#execute#.#execute#(#)#;#}##catch#(#IOException#e#)#{#throw#new#BuildException#(#"Process fork failed."#,#e#,#getLocation#(#)#)#;#}#}