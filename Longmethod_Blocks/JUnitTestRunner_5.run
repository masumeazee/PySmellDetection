void#run#(#)#{#res#=#new#TestResult#(#)#;#res#.#addListener#(#wrapListener#(#this#)#)#;##for#(#int#i#=#0#;##i#<#formatters#.#size#(#)#;#i#++#)#{#res#.#addListener#(#wrapListener#(#(#TestListener#)#formatters#.#elementAt#(#i#)#)#)#;#}##ByteArrayOutputStream#errStrm#=#new#ByteArrayOutputStream#(#)#;#ByteArrayOutputStream#outStrm#=#new#ByteArrayOutputStream#(#)#;#setupIOStreams#(#outStrm#,#errStrm#)#;#Test#suite#=#null#;#Throwable#exception#=#null#;#boolean#startTestSuiteSuccess#=#false#;##try#{#try#{#Class#testClass#=#null#;##if#(#loader#==#null#)#{#testClass#=#Class#.#forName#(#junitTest#.#getName#(#)#)#;#}#else#{#testClass#=#Class#.#forName#(#junitTest#.#getName#(#)#,#true#,#loader#)#;#}##// check for a static suite method first, even when using##// JUnit 4#Method#suiteMethod#=#null#;##try#{##// check if there is a suite method#suiteMethod#=#testClass#.#getMethod#(#"suite"#,#new#Class#[#0#]#)#;#}##catch#(#NoSuchMethodException#e#)#{##// no appropriate suite method found. We don't report any##// error here since it might be perfectly normal.#}##if#(#suiteMethod#!=#null#)#{##// if there is a suite method available, then try##// to extract the suite from it. If there is an error##// here it will be caught below and reported.#suite#=#(#Test#)#suiteMethod#.#invoke#(#null#,#new#Class#[#0#]#)#;#}#else#{#Class#junit4TestAdapterClass#=#null#;##// Check for JDK 5 first. Will *not* help on JDK 1.4##// if only junit-4.0.jar in CP because in that case##// linkage of whole task will already have failed! But##// will help if CP has junit-3.8.2.jar:junit-4.0.jar.##// In that case first C.fN will fail with CNFE and we##// will avoid UnsupportedClassVersionError.#try#{#Class#.#forName#(#"java.lang.annotation.Annotation"#)#;##if#(#loader#==#null#)#{#junit4TestAdapterClass#=#Class#.#forName#(#JUNIT_4_TEST_ADAPTER#)#;#}#else#{#junit4TestAdapterClass#=#Class#.#forName#(#JUNIT_4_TEST_ADAPTER#,#true#,#loader#)#;#}#}##catch#(#ClassNotFoundException#e#)#{##// OK, fall back to JUnit 3.#}##junit4#=#junit4TestAdapterClass#!=#null#;##if#(#junit4#)#{##// Let's use it!#suite#=#(#Test#)#junit4TestAdapterClass#.#getConstructor#(#new#Class#[#]#{#Class#.#class#}#)#.#newInstance#(#new#Object#[#]#{#testClass#}#)#;#}#else#{##// Use JUnit 3.##// try to extract a test suite automatically this##// will generate warnings if the class is no##// suitable Test#suite#=#new#TestSuite#(#testClass#)#;#}#}#}##catch#(#Throwable#e#)#{#retCode#=#ERRORS#;#exception#=#e#;#}##long#start#=#System#.#currentTimeMillis#(#)#;#fireStartTestSuite#(#)#;#startTestSuiteSuccess#=#true#;##if#(#exception#!=#null#)#{##// had an exception constructing suite#for#(#int#i#=#0#;##i#<#formatters#.#size#(#)#;#i#++#)#{#(#(#TestListener#)#formatters#.#elementAt#(#i#)#)#.#addError#(#null#,#exception#)#;#}##junitTest#.#setCounts#(#1#,#0#,#1#)#;#junitTest#.#setRunTime#(#0#)#;#}#else#{#try#{#logTestListenerEvent#(#"tests to run: "#+#suite#.#countTestCases#(#)#)#;#suite#.#run#(#res#)#;#}##finally#{##if#(#junit4#||#suite#.#getClass#(#)#.#getName#(#)#.#equals#(#JUNIT_4_TEST_ADAPTER#)#)#{#int#[#]#cnts#=#findJUnit4FailureErrorCount#(#res#)#;#junitTest#.#setCounts#(#res#.#runCount#(#)#,#cnts#[#0#]#,#cnts#[#1#]#)#;#}#else#{#junitTest#.#setCounts#(#res#.#runCount#(#)#,#res#.#failureCount#(#)#,#res#.#errorCount#(#)#)#;#}##junitTest#.#setRunTime#(#System#.#currentTimeMillis#(#)#-#start#)#;#}#}#}##finally#{##if#(#perm#!=#null#)#{#perm#.#restoreSecurityManager#(#)#;#}##if#(#savedOut#!=#null#)#{#System#.#setOut#(#savedOut#)#;#}##if#(#savedErr#!=#null#)#{#System#.#setErr#(#savedErr#)#;#}##systemError#.#close#(#)#;#systemError#=#null#;#systemOut#.#close#(#)#;#systemOut#=#null#;##if#(#startTestSuiteSuccess#)#{#sendOutAndErr#(#new#String#(#outStrm#.#toByteArray#(#)#)#,#new#String#(#errStrm#.#toByteArray#(#)#)#)#;#}#}##fireEndTestSuite#(#)#;##// junitTest has the correct counts for JUnit4, while res doesn't##if#(#retCode#!=#SUCCESS#||#junitTest#.#errorCount#(#)#!=#0#)#{#retCode#=#ERRORS#;#}#else##if#(#junitTest#.#failureCount#(#)#!=#0#)#{#retCode#=#FAILURES#;#}#}