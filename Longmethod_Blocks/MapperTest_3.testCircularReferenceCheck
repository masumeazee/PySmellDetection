void#testCircularReferenceCheck#(#)#{#Mapper#m#=#new#Mapper#(#project#)#;#project#.#addReference#(#"dummy"#,#m#)#;#m#.#setRefid#(#new#Reference#(#project#,#"dummy"#)#)#;##try#{#m#.#getImplementation#(#)#;#fail#(#"Can make Mapper a Reference to itself."#)#;#}##catch#(#BuildException#be#)#{#assertEquals#(#"This data type contains a circular reference."#,#be#.#getMessage#(#)#)#;#}##// dummy1 --> dummy2 --> dummy3 --> dummy1#Mapper#m1#=#new#Mapper#(#project#)#;#project#.#addReference#(#"dummy1"#,#m1#)#;#m1#.#setRefid#(#new#Reference#(#project#,#"dummy2"#)#)#;#Mapper#m2#=#new#Mapper#(#project#)#;#project#.#addReference#(#"dummy2"#,#m2#)#;#m2#.#setRefid#(#new#Reference#(#project#,#"dummy3"#)#)#;#Mapper#m3#=#new#Mapper#(#project#)#;#project#.#addReference#(#"dummy3"#,#m3#)#;#m3#.#setRefid#(#new#Reference#(#project#,#"dummy1"#)#)#;##try#{#m1#.#getImplementation#(#)#;#fail#(#"Can make circular reference."#)#;#}##catch#(#BuildException#be#)#{#assertEquals#(#"This data type contains a circular reference."#,#be#.#getMessage#(#)#)#;#}##// dummy1 --> dummy2 --> dummy3##// (which holds a glob mapper from "*.java" to "*.class"#m1#=#new#Mapper#(#project#)#;#project#.#addReference#(#"dummy1"#,#m1#)#;#m1#.#setRefid#(#new#Reference#(#project#,#"dummy2"#)#)#;#m2#=#new#Mapper#(#project#)#;#project#.#addReference#(#"dummy2"#,#m2#)#;#m2#.#setRefid#(#new#Reference#(#project#,#"dummy3"#)#)#;#m3#=#new#Mapper#(#project#)#;#project#.#addReference#(#"dummy3"#,#m3#)#;#Mapper#.#MapperType#mt#=#new#Mapper#.#MapperType#(#)#;#mt#.#setValue#(#"glob"#)#;#m3#.#setType#(#mt#)#;#m3#.#setFrom#(#"*.java"#)#;#m3#.#setTo#(#"*.class"#)#;#FileNameMapper#fmm#=#m1#.#getImplementation#(#)#;#assertTrue#(#"should be glob"#,#fmm#instanceof#GlobPatternMapper#)#;#String#[#]#result#=#fmm#.#mapFileName#(#"a.java"#)#;#assertEquals#(#"a.java should match"#,#1#,#result#.#length#)#;#assertEquals#(#"a.class"#,#result#[#0#]#)#;#}