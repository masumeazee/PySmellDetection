void#testCircularReferenceCheck#(#)#{#Path#p#=#new#Path#(#project#)#;#project#.#addReference#(#"dummy"#,#p#)#;#p#.#setRefid#(#new#Reference#(#project#,#"dummy"#)#)#;##try#{#p#.#list#(#)#;#fail#(#"Can make Path a Reference to itself."#)#;#}##catch#(#BuildException#be#)#{#assertEquals#(#"This data type contains a circular reference."#,#be#.#getMessage#(#)#)#;#}##// dummy1 --> dummy2 --> dummy3 --> dummy1#Path#p1#=#new#Path#(#project#)#;#project#.#addReference#(#"dummy1"#,#p1#)#;#Path#p2#=#p1#.#createPath#(#)#;#project#.#addReference#(#"dummy2"#,#p2#)#;#Path#p3#=#p2#.#createPath#(#)#;#project#.#addReference#(#"dummy3"#,#p3#)#;#p3#.#setRefid#(#new#Reference#(#project#,#"dummy1"#)#)#;##try#{#p1#.#list#(#)#;#fail#(#"Can make circular reference."#)#;#}##catch#(#BuildException#be#)#{#assertEquals#(#"This data type contains a circular reference."#,#be#.#getMessage#(#)#)#;#}##// dummy1 --> dummy2 --> dummy3 (with Path "/a")#p1#=#new#Path#(#project#)#;#project#.#addReference#(#"dummy1"#,#p1#)#;#p2#=#p1#.#createPath#(#)#;#project#.#addReference#(#"dummy2"#,#p2#)#;#p3#=#p2#.#createPath#(#)#;#project#.#addReference#(#"dummy3"#,#p3#)#;#p3#.#setLocation#(#new#File#(#"/a"#)#)#;#String#[#]#l#=#p1#.#list#(#)#;#assertEquals#(#"One element buried deep inside a nested path structure"#,#1#,#l#.#length#)#;##if#(#isUnixStyle#)#{#assertEquals#(#"/a"#,#l#[#0#]#)#;#}#else##if#(#isNetWare#)#{#assertEquals#(#"\\a"#,#l#[#0#]#)#;#}#else#{#assertEquals#(#":\\a"#,#l#[#0#]#.#substring#(#1#)#)#;#}#}