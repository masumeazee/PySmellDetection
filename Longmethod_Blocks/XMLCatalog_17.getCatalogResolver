CatalogResolver#getCatalogResolver#(#)#{##if#(#catalogResolver#==#null#)#{#AntClassLoader#loader#=#null#;##// Memory-Leak in line below#loader#=#getProject#(#)#.#createClassLoader#(#Path#.#systemClasspath#)#;##try#{#Class#clazz#=#Class#.#forName#(#APACHE_RESOLVER#,#true#,#loader#)#;##// The Apache resolver is present - Need to check if it can##// be seen by the catalog resolver class. Start by getting##// the actual loader#ClassLoader#apacheResolverLoader#=#clazz#.#getClassLoader#(#)#;##// load the base class through this loader.#Class#baseResolverClass#=#Class#.#forName#(#CATALOG_RESOLVER#,#true#,#apacheResolverLoader#)#;##// and find its actual loader#ClassLoader#baseResolverLoader#=#baseResolverClass#.#getClassLoader#(#)#;##// We have the loader which is being used to load the##// CatalogResolver. Can it see the ApacheResolver? The##// base resolver will only be able to create the ApacheResolver##// if it can see it - doesn't use the context loader.#clazz#=#Class#.#forName#(#APACHE_RESOLVER#,#true#,#baseResolverLoader#)#;#Object#obj#=#clazz#.#newInstance#(#)#;##//##// Success!  The xml-commons resolver library is##// available, so use it.##//#catalogResolver#=#new#ExternalResolver#(#clazz#,#obj#)#;#}##catch#(#Throwable#ex#)#{##//##// The xml-commons resolver library is not##// available, so we can't use it.##//#catalogResolver#=#new#InternalResolver#(#)#;##if#(#getCatalogPath#(#)#!=#null#&&#getCatalogPath#(#)#.#list#(#)#.#length#!=#0#)#{#log#(#"Warning: XML resolver not found; external catalogs"#+#" will be ignored"#,#Project#.#MSG_WARN#)#;#}##log#(#"Failed to load Apache resolver: "#+#ex#,#Project#.#MSG_DEBUG#)#;#}#}##return#catalogResolver#;#}