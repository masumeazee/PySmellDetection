void#tearDown#(#)#throws#Exception#{#if#(#project#==#null#)#{#/*
             * Maybe the BuildFileTest was subclassed and there is
             * no initialized project. So we could avoid getting a
             * NPE.
             * If there is an initialized project getTargets() does
             * not return null as it is initialized by an empty
             * HashSet.
             */#return#;#}#final#String#tearDown#=#"tearDown"#;#if#(#project#.#getTargets#(#)#.#containsKey#(#tearDown#)#)#{#project#.#executeTarget#(#tearDown#)#;#}#}##void#expectBuildException#(#String#target#,#String#cause#)#{#expectSpecificBuildException#(#target#,#cause#,#null#)#;#}##void#expectLog#(#String#target#,#String#log#)#{#executeTarget#(#target#)#;#String#realLog#=#getLog#(#)#;#assertEquals#(#log#,#realLog#)#;#}##void#assertLogContaining#(#String#substring#)#{#String#realLog#=#getLog#(#)#;#assertTrue#(#"expecting log to contain \""#+#substring#+#"\" log was \""#+#realLog#+#"\""#,#realLog#.#indexOf#(#substring#)#>=#0#)#;#}##void#assertLogNotContaining#(#String#substring#)#{#String#realLog#=#getLog#(#)#;#assertFalse#(#"didn't expect log to contain \""#+#substring#+#"\" log was \""#+#realLog#+#"\""#,#realLog#.#indexOf#(#substring#)#>=#0#)#;#}##void#assertOutputContaining#(#String#substring#)#{#assertOutputContaining#(#null#,#substring#)#;#}##void#assertOutputContaining#(#String#message#,#String#substring#)#{#String#realOutput#=#getOutput#(#)#;#String#realMessage#=#(#message#!=#null#)#?#message#:#"expecting output to contain \""#+#substring#+#"\" output was \""#+#realOutput#+#"\""#;#assertTrue#(#realMessage#,#realOutput#.#indexOf#(#substring#)#>=#0#)#;#}##void#assertOutputNotContaining#(#String#message#,#String#substring#)#{#String#realOutput#=#getOutput#(#)#;#String#realMessage#=#(#message#!=#null#)#?#message#:#"expecting output to not contain \""#+#substring#+#"\" output was \""#+#realOutput#+#"\""#;#assertFalse#(#realMessage#,#realOutput#.#indexOf#(#substring#)#>=#0#)#;#}##void#expectLogContaining#(#String#target#,#String#log#)#{#executeTarget#(#target#)#;#assertLogContaining#(#log#)#;#}##void#expectLogNotContaining#(#String#target#,#String#log#)#{#executeTarget#(#target#)#;#assertLogNotContaining#(#log#)#;#}##String#getLog#(#)#{#return#logBuffer#.#toString#(#)#;#}##void#expectDebuglog#(#String#target#,#String#log#)#{#executeTarget#(#target#)#;#String#realLog#=#getFullLog#(#)#;#assertEquals#(#log#,#realLog#)#;#}##void#assertDebuglogContaining#(#String#substring#)#{#String#realLog#=#getFullLog#(#)#;#assertTrue#(#"expecting debug log to contain \""#+#substring#+#"\" log was \""#+#realLog#+#"\""#,#realLog#.#indexOf#(#substring#)#>=#0#)#;#}##String#getFullLog#(#)#{#return#fullLogBuffer#.#toString#(#)#;#}##void#expectOutput#(#String#target#,#String#output#)#{#executeTarget#(#target#)#;#String#realOutput#=#getOutput#(#)#;#assertEquals#(#output#,#realOutput#.#trim#(#)#)#;#}##void#expectOutputAndError#(#String#target#,#String#output#,#String#error#)#{#executeTarget#(#target#)#;#String#realOutput#=#getOutput#(#)#;#assertEquals#(#output#,#realOutput#)#;#String#realError#=#getError#(#)#;#assertEquals#(#error#,#realError#)#;#}##String#getOutput#(#)#{#return#cleanBuffer#(#outBuffer#)#;#}##String#getError#(#)#{#return#cleanBuffer#(#errBuffer#)#;#}##BuildException#getBuildException#(#)#{#return#buildException#;#}##String#cleanBuffer#(#StringBuffer#buffer#)#{#StringBuffer#cleanedBuffer#=#new#StringBuffer#(#)#;#for#(#int#i#=#0#;#i#<#buffer#.#length#(#)#;#i#++#)#{#char#ch#=#buffer#.#charAt#(#i#)#;#if#(#ch#!=#'\r'#)#{#cleanedBuffer#.#append#(#ch#)#;#}#}#return#cleanedBuffer#.#toString#(#)#;#}##void#configureProject#(#String#filename#)#throws#BuildException#{#configureProject#(#filename#,#Project#.#MSG_DEBUG#)#;#}##void#configureProject#(#String#filename#,#int#logLevel#)#throws#BuildException#{#logBuffer#=#new#StringBuffer#(#)#;#fullLogBuffer#=#new#StringBuffer#(#)#;#project#=#new#Project#(#)#;#project#.#init#(#)#;#File#antFile#=#new#File#(#System#.#getProperty#(#"root"#)#,#filename#)#;#project#.#setUserProperty#(#"ant.file"#,#antFile#.#getAbsolutePath#(#)#)#;#project#.#addBuildListener#(#new#AntTestListener#(#logLevel#)#)#;#ProjectHelper#.#configureProject#(#project#,#antFile#)#;#}##void#executeTarget#(#String#targetName#)#{#PrintStream#sysOut#=#System#.#out#;#PrintStream#sysErr#=#System#.#err#;#try#{#sysOut#.#flush#(#)#;#sysErr#.#flush#(#)#;#outBuffer#=#new#StringBuffer#(#)#;#PrintStream#out#=#new#PrintStream#(#new#AntOutputStream#(#outBuffer#)#)#;#System#.#setOut#(#out#)#;#errBuffer#=#new#StringBuffer#(#)#;#PrintStream#err#=#new#PrintStream#(#new#AntOutputStream#(#errBuffer#)#)#;#System#.#setErr#(#err#)#;#logBuffer#=#new#StringBuffer#(#)#;#fullLogBuffer#=#new#StringBuffer#(#)#;#buildException#=#null#;#project#.#executeTarget#(#targetName#)#;#}#finally#{#System#.#setOut#(#sysOut#)#;#System#.#setErr#(#sysErr#)#;#}#}##Project#getProject#(#)#{#return#project#;#}##File#getProjectDir#(#)#{#return#project#.#getBaseDir#(#)#;#}##void#expectSpecificBuildException#(#String#target#,#String#cause#,#String#msg#)#{#try#{#executeTarget#(#target#)#;#}#catch#(#org#.#apache#.#tools#.#ant#.#BuildException#ex#)#{#buildException#=#ex#;#if#(#(#null#!=#msg#)#&&#(#!#ex#.#getMessage#(#)#.#equals#(#msg#)#)#)#{#fail#(#"Should throw BuildException because '"#+#cause#+#"' with message '"#+#msg#+#"' (actual message '"#+#ex#.#getMessage#(#)#+#"' instead)"#)#;#}#return#;#}#fail#(#"Should throw BuildException because: "#+#cause#)#;#}##void#expectBuildExceptionContaining#(#String#target#,#String#cause#,#String#contains#)#{#try#{#executeTarget#(#target#)#;#}#catch#(#org#.#apache#.#tools#.#ant#.#BuildException#ex#)#{#buildException#=#ex#;#if#(#(#null#!=#contains#)#&&#(#ex#.#getMessage#(#)#.#indexOf#(#contains#)#==#-#1#)#)#{#fail#(#"Should throw BuildException because '"#+#cause#+#"' with message containing '"#+#contains#+#"' (actual message '"#+#ex#.#getMessage#(#)#+#"' instead)"#)#;#}#return#;#}#fail#(#"Should throw BuildException because: "#+#cause#)#;#}##void#expectPropertySet#(#String#target#,#String#property#,#String#value#)#{#executeTarget#(#target#)#;#assertPropertyEquals#(#property#,#value#)#;#}##void#assertPropertyEquals#(#String#property#,#String#value#)#{#String#result#=#project#.#getProperty#(#property#)#;#assertEquals#(#"property "#+#property#,#value#,#result#)#;#}##void#assertPropertySet#(#String#property#)#{#assertPropertyEquals#(#property#,#"true"#)#;#}##void#assertPropertyUnset#(#String#property#)#{#assertPropertyEquals#(#property#,#null#)#;#}##void#expectPropertySet#(#String#target#,#String#property#)#{#expectPropertySet#(#target#,#property#,#"true"#)#;#}##void#expectPropertyUnset#(#String#target#,#String#property#)#{#expectPropertySet#(#target#,#property#,#null#)#;#}##URL#getResource#(#String#resource#)#{#URL#url#=#getClass#(#)#.#getResource#(#resource#)#;#assertNotNull#(#"Could not find resource :"#+#resource#,#url#)#;#return#url#;#}##void#write#(#int#b#)#{#buffer#.#append#(#(#char#)#b#)#;#}##void#buildStarted#(#BuildEvent#event#)#{#}##void#buildFinished#(#BuildEvent#event#)#{#}##void#targetStarted#(#BuildEvent#event#)#{#//System.out.println("targetStarted " + event.getTarget().getName());#}##void#targetFinished#(#BuildEvent#event#)#{#//System.out.println("targetFinished " + event.getTarget().getName());#}##void#taskStarted#(#BuildEvent#event#)#{#//System.out.println("taskStarted " + event.getTask().getTaskName());#}##void#taskFinished#(#BuildEvent#event#)#{#//System.out.println("taskFinished " + event.getTask().getTaskName());#}##void#messageLogged#(#BuildEvent#event#)#{#if#(#event#.#getPriority#(#)#>#logLevel#)#{#// ignore event#return#;#}#if#(#event#.#getPriority#(#)#==#Project#.#MSG_INFO#||#event#.#getPriority#(#)#==#Project#.#MSG_WARN#||#event#.#getPriority#(#)#==#Project#.#MSG_ERR#)#{#logBuffer#.#append#(#event#.#getMessage#(#)#)#;#}#fullLogBuffer#.#append#(#event#.#getMessage#(#)#)#;#}##