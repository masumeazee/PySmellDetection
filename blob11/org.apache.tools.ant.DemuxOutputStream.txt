BufferInfo#getBufferInfo#(#)#{#Thread#current#=#Thread#.#currentThread#(#)#;#BufferInfo#bufferInfo#=#(#BufferInfo#)#buffers#.#get#(#current#)#;#if#(#bufferInfo#==#null#)#{#bufferInfo#=#new#BufferInfo#(#)#;#bufferInfo#.#buffer#=#new#ByteArrayOutputStream#(#INTIAL_SIZE#)#;#bufferInfo#.#crSeen#=#false#;#buffers#.#put#(#current#,#bufferInfo#)#;#}#return#bufferInfo#;#}##void#resetBufferInfo#(#)#{#Thread#current#=#Thread#.#currentThread#(#)#;#BufferInfo#bufferInfo#=#(#BufferInfo#)#buffers#.#get#(#current#)#;#try#{#bufferInfo#.#buffer#.#close#(#)#;#}#catch#(#IOException#e#)#{#// Shouldn't happen#}#bufferInfo#.#buffer#=#new#ByteArrayOutputStream#(#)#;#bufferInfo#.#crSeen#=#false#;#}##void#removeBuffer#(#)#{#Thread#current#=#Thread#.#currentThread#(#)#;#buffers#.#remove#(#current#)#;#}##void#write#(#int#cc#)#throws#IOException#{#final#byte#c#=#(#byte#)#cc#;#BufferInfo#bufferInfo#=#getBufferInfo#(#)#;#if#(#c#==#'\n'#)#{#// LF is always end of line (i.e. CRLF or single LF)#bufferInfo#.#buffer#.#write#(#cc#)#;#processBuffer#(#bufferInfo#.#buffer#)#;#}#else#{#if#(#bufferInfo#.#crSeen#)#{#// CR without LF - send buffer then add char#processBuffer#(#bufferInfo#.#buffer#)#;#}#// add into buffer#bufferInfo#.#buffer#.#write#(#cc#)#;#}#bufferInfo#.#crSeen#=#(#c#==#'\r'#)#;#if#(#!#bufferInfo#.#crSeen#&&#bufferInfo#.#buffer#.#size#(#)#>#MAX_SIZE#)#{#processBuffer#(#bufferInfo#.#buffer#)#;#}#}##void#processBuffer#(#ByteArrayOutputStream#buffer#)#{#String#output#=#buffer#.#toString#(#)#;#project#.#demuxOutput#(#output#,#isErrorStream#)#;#resetBufferInfo#(#)#;#}##void#processFlush#(#ByteArrayOutputStream#buffer#)#{#String#output#=#buffer#.#toString#(#)#;#project#.#demuxFlush#(#output#,#isErrorStream#)#;#resetBufferInfo#(#)#;#}##void#close#(#)#throws#IOException#{#flush#(#)#;#removeBuffer#(#)#;#}##void#flush#(#)#throws#IOException#{#BufferInfo#bufferInfo#=#getBufferInfo#(#)#;#if#(#bufferInfo#.#buffer#.#size#(#)#>#0#)#{#processFlush#(#bufferInfo#.#buffer#)#;#}#}##void#write#(#byte#[#]#b#,#int#off#,#int#len#)#throws#IOException#{#// find the line breaks and pass other chars through in blocks#int#offset#=#off#;#int#blockStartOffset#=#offset#;#int#remaining#=#len#;#BufferInfo#bufferInfo#=#getBufferInfo#(#)#;#while#(#remaining#>#0#)#{#while#(#remaining#>#0#&&#b#[#offset#]#!=#LF#&&#b#[#offset#]#!=#CR#)#{#offset#++#;#remaining#--#;#}#// either end of buffer or a line separator char#int#blockLength#=#offset#-#blockStartOffset#;#if#(#blockLength#>#0#)#{#bufferInfo#.#buffer#.#write#(#b#,#blockStartOffset#,#blockLength#)#;#}#while#(#remaining#>#0#&&#(#b#[#offset#]#==#LF#||#b#[#offset#]#==#CR#)#)#{#write#(#b#[#offset#]#)#;#offset#++#;#remaining#--#;#}#blockStartOffset#=#offset#;#}#}##