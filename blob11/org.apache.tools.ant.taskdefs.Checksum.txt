void#add#(#ResourceCollection#rc#)#{#u#.#add#(#rc#)#;#}##void#setFile#(#File#file#)#{#this#.#file#=#file#;#}##void#setTodir#(#File#todir#)#{#this#.#todir#=#todir#;#}##void#setAlgorithm#(#String#algorithm#)#{#this#.#algorithm#=#algorithm#;#}##void#setProvider#(#String#provider#)#{#this#.#provider#=#provider#;#}##void#setFileext#(#String#fileext#)#{#this#.#fileext#=#fileext#;#}##void#setProperty#(#String#property#)#{#this#.#property#=#property#;#}##void#setTotalproperty#(#String#totalproperty#)#{#this#.#totalproperty#=#totalproperty#;#}##void#setVerifyproperty#(#String#verifyProperty#)#{#this#.#verifyProperty#=#verifyProperty#;#}##void#setForceOverwrite#(#boolean#forceOverwrite#)#{#this#.#forceOverwrite#=#forceOverwrite#;#}##void#setReadBufferSize#(#int#size#)#{#this#.#readBufferSize#=#size#;#}##void#setFormat#(#FormatElement#e#)#{#format#=#e#.#getFormat#(#)#;#}##void#setPattern#(#String#p#)#{#format#=#new#MessageFormat#(#p#)#;#}##void#addFileset#(#FileSet#set#)#{#add#(#set#)#;#}##void#add#(#ResourceCollection#rc#)#{#if#(#rc#==#null#)#{#return#;#}#resources#=#(#resources#==#null#)#?#new#FileUnion#(#)#:#resources#;#resources#.#add#(#rc#)#;#}##void#execute#(#)#throws#BuildException#{#isCondition#=#false#;#boolean#value#=#validateAndExecute#(#)#;#if#(#verifyProperty#!=#null#)#{#getProject#(#)#.#setNewProperty#(#verifyProperty#,#(#value#?#Boolean#.#TRUE#.#toString#(#)#:#Boolean#.#FALSE#.#toString#(#)#)#)#;#}#}##boolean#eval#(#)#throws#BuildException#{#isCondition#=#true#;#return#validateAndExecute#(#)#;#}##boolean#validateAndExecute#(#)#throws#BuildException#{#String#savedFileExt#=#fileext#;#if#(#file#==#null#&&#(#resources#==#null#||#resources#.#size#(#)#==#0#)#)#{#throw#new#BuildException#(#"Specify at least one source - a file or a resource collection."#)#;#}#if#(#!#(#resources#==#null#||#resources#.#isFilesystemOnly#(#)#)#)#{#throw#new#BuildException#(#"Can only calculate checksums for file-based resources."#)#;#}#if#(#file#!=#null#&&#file#.#exists#(#)#&&#file#.#isDirectory#(#)#)#{#throw#new#BuildException#(#"Checksum cannot be generated for directories"#)#;#}#if#(#file#!=#null#&&#totalproperty#!=#null#)#{#throw#new#BuildException#(#"File and Totalproperty cannot co-exist."#)#;#}#if#(#property#!=#null#&&#fileext#!=#null#)#{#throw#new#BuildException#(#"Property and FileExt cannot co-exist."#)#;#}#if#(#property#!=#null#)#{#if#(#forceOverwrite#)#{#throw#new#BuildException#(#"ForceOverwrite cannot be used when Property is specified"#)#;#}#int#ct#=#0#;#if#(#resources#!=#null#)#{#ct#+=#resources#.#size#(#)#;#}#if#(#file#!=#null#)#{#ct#++#;#}#if#(#ct#>#1#)#{#throw#new#BuildException#(#"Multiple files cannot be used when Property is specified"#)#;#}#}#if#(#verifyProperty#!=#null#)#{#isCondition#=#true#;#}#if#(#verifyProperty#!=#null#&&#forceOverwrite#)#{#throw#new#BuildException#(#"VerifyProperty and ForceOverwrite cannot co-exist."#)#;#}#if#(#isCondition#&&#forceOverwrite#)#{#throw#new#BuildException#(#"ForceOverwrite cannot be used when conditions are being used."#)#;#}#messageDigest#=#null#;#if#(#provider#!=#null#)#{#try#{#messageDigest#=#MessageDigest#.#getInstance#(#algorithm#,#provider#)#;#}#catch#(#NoSuchAlgorithmException#noalgo#)#{#throw#new#BuildException#(#noalgo#,#getLocation#(#)#)#;#}#catch#(#NoSuchProviderException#noprovider#)#{#throw#new#BuildException#(#noprovider#,#getLocation#(#)#)#;#}#}#else#{#try#{#messageDigest#=#MessageDigest#.#getInstance#(#algorithm#)#;#}#catch#(#NoSuchAlgorithmException#noalgo#)#{#throw#new#BuildException#(#noalgo#,#getLocation#(#)#)#;#}#}#if#(#messageDigest#==#null#)#{#throw#new#BuildException#(#"Unable to create Message Digest"#,#getLocation#(#)#)#;#}#if#(#fileext#==#null#)#{#fileext#=#"."#+#algorithm#;#}#else#if#(#fileext#.#trim#(#)#.#length#(#)#==#0#)#{#throw#new#BuildException#(#"File extension when specified must not be an empty string"#)#;#}#try#{#if#(#resources#!=#null#)#{#for#(#Iterator#i#=#resources#.#iterator#(#)#;#i#.#hasNext#(#)#;#)#{#Resource#r#=#(#Resource#)#i#.#next#(#)#;#File#src#=#(#(#FileProvider#)#r#.#as#(#FileProvider#.#class#)#)#.#getFile#(#)#;#if#(#totalproperty#!=#null#||#todir#!=#null#)#{#// Use '/' to calculate digest based on file name.#// This is required in order to get the same result#// on different platforms.#relativeFilePaths#.#put#(#src#,#r#.#getName#(#)#.#replace#(#File#.#separatorChar#,#'/'#)#)#;#}#addToIncludeFileMap#(#src#)#;#}#}#if#(#file#!=#null#)#{#if#(#totalproperty#!=#null#||#todir#!=#null#)#{#relativeFilePaths#.#put#(#file#,#file#.#getName#(#)#.#replace#(#File#.#separatorChar#,#'/'#)#)#;#}#addToIncludeFileMap#(#file#)#;#}#return#generateChecksums#(#)#;#}#finally#{#fileext#=#savedFileExt#;#includeFileMap#.#clear#(#)#;#}#}##void#addToIncludeFileMap#(#File#file#)#throws#BuildException#{#if#(#file#.#exists#(#)#)#{#if#(#property#==#null#)#{#File#checksumFile#=#getChecksumFile#(#file#)#;#if#(#forceOverwrite#||#isCondition#||#(#file#.#lastModified#(#)#>#checksumFile#.#lastModified#(#)#)#)#{#includeFileMap#.#put#(#file#,#checksumFile#)#;#}#else#{#log#(#file#+#" omitted as "#+#checksumFile#+#" is up to date."#,#Project#.#MSG_VERBOSE#)#;#if#(#totalproperty#!=#null#)#{#// Read the checksum from disk.#String#checksum#=#readChecksum#(#checksumFile#)#;#byte#[#]#digest#=#decodeHex#(#checksum#.#toCharArray#(#)#)#;#allDigests#.#put#(#file#,#digest#)#;#}#}#}#else#{#includeFileMap#.#put#(#file#,#property#)#;#}#}#else#{#String#message#=#"Could not find file "#+#file#.#getAbsolutePath#(#)#+#" to generate checksum for."#;#log#(#message#)#;#throw#new#BuildException#(#message#,#getLocation#(#)#)#;#}#}##File#getChecksumFile#(#File#file#)#{#File#directory#;#if#(#todir#!=#null#)#{#// A separate directory was explicitly declared#String#path#=#(#String#)#relativeFilePaths#.#get#(#file#)#;#if#(#path#==#null#)#{#//bug 37386. this should not occur, but it has, once.#throw#new#BuildException#(#"Internal error: "#+#"relativeFilePaths could not match file"#+#file#+#"\n"#+#"please file a bug report on this"#)#;#}#directory#=#new#File#(#todir#,#path#)#.#getParentFile#(#)#;#// Create the directory, as it might not exist.#directory#.#mkdirs#(#)#;#}#else#{#// Just use the same directory as the file itself.#// This directory will exist#directory#=#file#.#getParentFile#(#)#;#}#File#checksumFile#=#new#File#(#directory#,#file#.#getName#(#)#+#fileext#)#;#return#checksumFile#;#}##boolean#generateChecksums#(#)#throws#BuildException#{#boolean#checksumMatches#=#true#;#FileInputStream#fis#=#null#;#FileOutputStream#fos#=#null#;#byte#[#]#buf#=#new#byte#[#readBufferSize#]#;#try#{#for#(#Enumeration#e#=#includeFileMap#.#keys#(#)#;#e#.#hasMoreElements#(#)#;#)#{#messageDigest#.#reset#(#)#;#File#src#=#(#File#)#e#.#nextElement#(#)#;#if#(#!#isCondition#)#{#log#(#"Calculating "#+#algorithm#+#" checksum for "#+#src#,#Project#.#MSG_VERBOSE#)#;#}#fis#=#new#FileInputStream#(#src#)#;#DigestInputStream#dis#=#new#DigestInputStream#(#fis#,#messageDigest#)#;#while#(#dis#.#read#(#buf#,#0#,#readBufferSize#)#!=#-#1#)#{#// Empty statement#}#dis#.#close#(#)#;#fis#.#close#(#)#;#fis#=#null#;#byte#[#]#fileDigest#=#messageDigest#.#digest#(#)#;#if#(#totalproperty#!=#null#)#{#allDigests#.#put#(#src#,#fileDigest#)#;#}#String#checksum#=#createDigestString#(#fileDigest#)#;#//can either be a property name string or a file#Object#destination#=#includeFileMap#.#get#(#src#)#;#if#(#destination#instanceof#java#.#lang#.#String#)#{#String#prop#=#(#String#)#destination#;#if#(#isCondition#)#{#checksumMatches#=#checksumMatches#&&#checksum#.#equals#(#property#)#;#}#else#{#getProject#(#)#.#setNewProperty#(#prop#,#checksum#)#;#}#}#else#if#(#destination#instanceof#java#.#io#.#File#)#{#if#(#isCondition#)#{#File#existingFile#=#(#File#)#destination#;#if#(#existingFile#.#exists#(#)#)#{#try#{#String#suppliedChecksum#=#readChecksum#(#existingFile#)#;#checksumMatches#=#checksumMatches#&&#checksum#.#equals#(#suppliedChecksum#)#;#}#catch#(#BuildException#be#)#{#// file is on wrong format, swallow#checksumMatches#=#false#;#}#}#else#{#checksumMatches#=#false#;#}#}#else#{#File#dest#=#(#File#)#destination#;#fos#=#new#FileOutputStream#(#dest#)#;#fos#.#write#(#format#.#format#(#new#Object#[#]#{#checksum#,#src#.#getName#(#)#,#}#)#.#getBytes#(#)#)#;#fos#.#write#(#StringUtils#.#LINE_SEP#.#getBytes#(#)#)#;#fos#.#close#(#)#;#fos#=#null#;#}#}#}#if#(#totalproperty#!=#null#)#{#// Calculate the total checksum#// Convert the keys (source files) into a sorted array.#Set#keys#=#allDigests#.#keySet#(#)#;#Object#[#]#keyArray#=#keys#.#toArray#(#)#;#// File is Comparable, but sort-order is platform#// dependent (case-insensitive on Windows)#Arrays#.#sort#(#keyArray#,#new#Comparator#(#)#{#public#int#compare#(#Object#o1#,#Object#o2#)#{#File#f1#=#(#File#)#o1#;#File#f2#=#(#File#)#o2#;#return#f1#==#null#?#(#f2#==#null#?#0#:#-#1#)#:#(#f2#==#null#?#1#:#f1#.#getName#(#)#.#compareTo#(#f2#.#getName#(#)#)#)#;#}#}#)#;#// Loop over the checksums and generate a total hash.#messageDigest#.#reset#(#)#;#for#(#int#i#=#0#;#i#<#keyArray#.#length#;#i#++#)#{#File#src#=#(#File#)#keyArray#[#i#]#;#// Add the digest for the file content#byte#[#]#digest#=#(#byte#[#]#)#allDigests#.#get#(#src#)#;#messageDigest#.#update#(#digest#)#;#// Add the file path#String#fileName#=#(#String#)#relativeFilePaths#.#get#(#src#)#;#messageDigest#.#update#(#fileName#.#getBytes#(#)#)#;#}#String#totalChecksum#=#createDigestString#(#messageDigest#.#digest#(#)#)#;#getProject#(#)#.#setNewProperty#(#totalproperty#,#totalChecksum#)#;#}#}#catch#(#Exception#e#)#{#throw#new#BuildException#(#e#,#getLocation#(#)#)#;#}#finally#{#FileUtils#.#close#(#fis#)#;#FileUtils#.#close#(#fos#)#;#}#return#checksumMatches#;#}##int#compare#(#Object#o1#,#Object#o2#)#{#File#f1#=#(#File#)#o1#;#File#f2#=#(#File#)#o2#;#return#f1#==#null#?#(#f2#==#null#?#0#:#-#1#)#:#(#f2#==#null#?#1#:#f1#.#getName#(#)#.#compareTo#(#f2#.#getName#(#)#)#)#;#}##String#createDigestString#(#byte#[#]#fileDigest#)#{#StringBuffer#checksumSb#=#new#StringBuffer#(#)#;#for#(#int#i#=#0#;#i#<#fileDigest#.#length#;#i#++#)#{#String#hexStr#=#Integer#.#toHexString#(#BYTE_MASK#&#fileDigest#[#i#]#)#;#if#(#hexStr#.#length#(#)#<#2#)#{#checksumSb#.#append#(#"0"#)#;#}#checksumSb#.#append#(#hexStr#)#;#}#return#checksumSb#.#toString#(#)#;#}##byte#[#]#decodeHex#(#char#[#]#data#)#throws#BuildException#{#int#l#=#data#.#length#;#if#(#(#l#&#0x01#)#!=#0#)#{#throw#new#BuildException#(#"odd number of characters."#)#;#}#byte#[#]#out#=#new#byte#[#l#>#>#1#]#;#// two characters form the hex value.#for#(#int#i#=#0#,#j#=#0#;#j#<#l#;#i#++#)#{#int#f#=#Character#.#digit#(#data#[#j#++#]#,#WORD#)#<#<#NIBBLE#;#f#=#f#|#Character#.#digit#(#data#[#j#++#]#,#WORD#)#;#out#[#i#]#=#(#byte#)#(#f#&#BYTE_MASK#)#;#}#return#out#;#}##String#readChecksum#(#File#f#)#{#BufferedReader#diskChecksumReader#=#null#;#try#{#diskChecksumReader#=#new#BufferedReader#(#new#FileReader#(#f#)#)#;#Object#[#]#result#=#format#.#parse#(#diskChecksumReader#.#readLine#(#)#)#;#if#(#result#==#null#||#result#.#length#==#0#||#result#[#0#]#==#null#)#{#throw#new#BuildException#(#"failed to find a checksum"#)#;#}#return#(#String#)#result#[#0#]#;#}#catch#(#IOException#e#)#{#throw#new#BuildException#(#"Couldn't read checksum file "#+#f#,#e#)#;#}#catch#(#ParseException#e#)#{#throw#new#BuildException#(#"Couldn't read checksum file "#+#f#,#e#)#;#}#finally#{#FileUtils#.#close#(#diskChecksumReader#)#;#}#}##FormatElement#getDefault#(#)#{#FormatElement#e#=#new#FormatElement#(#)#;#e#.#setValue#(#CHECKSUM#)#;#return#e#;#}##MessageFormat#getFormat#(#)#{#return#(#MessageFormat#)#formatMap#.#get#(#getValue#(#)#)#;#}##String#[#]#getValues#(#)#{#return#new#String#[#]#{#CHECKSUM#,#MD5SUM#,#SVF#}#;#}##