void#setExpandProperties#(#boolean#b#)#{#expandProperties#=#b#;#}##void#addText#(#String#val#)#{#buf#.#append#(#val#)#;#}##String#getText#(#)#{#String#s#=#buf#.#toString#(#)#;#return#expandProperties#?#getProject#(#)#.#replaceProperties#(#s#)#:#s#;#}##void#validate#(#)#throws#BuildException#{#//Validate mandatory attributes#if#(#token#==#null#)#{#String#message#=#"token is a mandatory for replacefilter."#;#throw#new#BuildException#(#message#)#;#}#if#(#""#.#equals#(#token#.#getText#(#)#)#)#{#String#message#=#"The token must not be an empty "#+#"string."#;#throw#new#BuildException#(#message#)#;#}#//value and property are mutually exclusive attributes#if#(#(#value#!=#null#)#&&#(#property#!=#null#)#)#{#String#message#=#"Either value or property "#+#"can be specified, but a replacefilter "#+#"element cannot have both."#;#throw#new#BuildException#(#message#)#;#}#if#(#(#property#!=#null#)#)#{#//the property attribute must have access to a property file#if#(#propertyResource#==#null#)#{#String#message#=#"The replacefilter's property attribute "#+#"can only be used with the replacetask's "#+#"propertyFile/Resource attribute."#;#throw#new#BuildException#(#message#)#;#}#//Make sure property exists in property file#if#(#properties#==#null#||#properties#.#getProperty#(#property#)#==#null#)#{#String#message#=#"property \""#+#property#+#"\" was not found in "#+#propertyResource#.#getName#(#)#;#throw#new#BuildException#(#message#)#;#}#}#replaceValue#=#getReplaceValue#(#)#;#}##String#getReplaceValue#(#)#{#if#(#property#!=#null#)#{#return#properties#.#getProperty#(#property#)#;#}#else#if#(#value#!=#null#)#{#return#value#.#getText#(#)#;#}#else#if#(#Replace#.#this#.#value#!=#null#)#{#return#Replace#.#this#.#value#.#getText#(#)#;#}#else#{#//Default is empty string#return#""#;#}#}##void#setToken#(#String#t#)#{#createReplaceToken#(#)#.#addText#(#t#)#;#}##String#getToken#(#)#{#return#token#.#getText#(#)#;#}##void#setValue#(#String#value#)#{#createReplaceValue#(#)#.#addText#(#value#)#;#}##String#getValue#(#)#{#return#value#.#getText#(#)#;#}##void#setProperty#(#String#property#)#{#this#.#property#=#property#;#}##String#getProperty#(#)#{#return#property#;#}##NestedString#createReplaceToken#(#)#{#if#(#token#==#null#)#{#token#=#new#NestedString#(#)#;#}#return#token#;#}##NestedString#createReplaceValue#(#)#{#if#(#value#==#null#)#{#value#=#new#NestedString#(#)#;#}#return#value#;#}##StringBuffer#getOutputBuffer#(#)#{#return#outputBuffer#;#}##void#setInputBuffer#(#StringBuffer#input#)#{#inputBuffer#=#input#;#}##boolean#process#(#)#{#String#t#=#getToken#(#)#;#if#(#inputBuffer#.#length#(#)#>#t#.#length#(#)#)#{#int#pos#=#replace#(#)#;#pos#=#Math#.#max#(#(#inputBuffer#.#length#(#)#-#t#.#length#(#)#)#,#pos#)#;#outputBuffer#.#append#(#inputBuffer#.#substring#(#0#,#pos#)#)#;#inputBuffer#.#delete#(#0#,#pos#)#;#return#true#;#}#return#false#;#}##void#flush#(#)#{#replace#(#)#;#outputBuffer#.#append#(#inputBuffer#)#;#inputBuffer#.#delete#(#0#,#inputBuffer#.#length#(#)#)#;#}##int#replace#(#)#{#String#t#=#getToken#(#)#;#int#found#=#inputBuffer#.#indexOf#(#t#)#;#int#pos#=#-#1#;#final#int#tokenLength#=#t#.#length#(#)#;#final#int#replaceValueLength#=#replaceValue#.#length#(#)#;#while#(#found#>=#0#)#{#inputBuffer#.#replace#(#found#,#found#+#tokenLength#,#replaceValue#)#;#pos#=#found#+#replaceValueLength#;#found#=#inputBuffer#.#indexOf#(#t#,#pos#)#;#++#replaceCount#;#}#return#pos#;#}##StringBuffer#getOutputBuffer#(#)#{#return#outputBuffer#;#}##boolean#readChunk#(#)#throws#IOException#{#int#bufferLength#=#0#;#bufferLength#=#reader#.#read#(#buffer#)#;#if#(#bufferLength#<#0#)#{#return#false#;#}#outputBuffer#.#append#(#new#String#(#buffer#,#0#,#bufferLength#)#)#;#return#true#;#}##void#close#(#)#throws#IOException#{#reader#.#close#(#)#;#}##void#closeQuietly#(#)#{#FileUtils#.#close#(#reader#)#;#}##void#setInputBuffer#(#StringBuffer#input#)#{#inputBuffer#=#input#;#}##boolean#process#(#)#throws#IOException#{#writer#.#write#(#inputBuffer#.#toString#(#)#)#;#inputBuffer#.#delete#(#0#,#inputBuffer#.#length#(#)#)#;#return#false#;#}##void#flush#(#)#throws#IOException#{#process#(#)#;#writer#.#flush#(#)#;#}##void#close#(#)#throws#IOException#{#writer#.#close#(#)#;#}##void#closeQuietly#(#)#{#FileUtils#.#close#(#writer#)#;#}##void#execute#(#)#throws#BuildException#{#ArrayList#savedFilters#=#(#ArrayList#)#replacefilters#.#clone#(#)#;#Properties#savedProperties#=#properties#==#null#?#null#:#(#Properties#)#properties#.#clone#(#)#;#if#(#token#!=#null#)#{#// line separators in values and tokens are "\n"#// in order to compare with the file contents, replace them#// as needed#StringBuffer#val#=#new#StringBuffer#(#value#.#getText#(#)#)#;#stringReplace#(#val#,#"\r\n"#,#"\n"#)#;#stringReplace#(#val#,#"\n"#,#StringUtils#.#LINE_SEP#)#;#StringBuffer#tok#=#new#StringBuffer#(#token#.#getText#(#)#)#;#stringReplace#(#tok#,#"\r\n"#,#"\n"#)#;#stringReplace#(#tok#,#"\n"#,#StringUtils#.#LINE_SEP#)#;#Replacefilter#firstFilter#=#createPrimaryfilter#(#)#;#firstFilter#.#setToken#(#tok#.#toString#(#)#)#;#firstFilter#.#setValue#(#val#.#toString#(#)#)#;#}#try#{#if#(#replaceFilterResource#!=#null#)#{#Properties#props#=#getProperties#(#replaceFilterResource#)#;#Iterator#e#=#props#.#keySet#(#)#.#iterator#(#)#;#while#(#e#.#hasNext#(#)#)#{#String#tok#=#e#.#next#(#)#.#toString#(#)#;#Replacefilter#replaceFilter#=#createReplacefilter#(#)#;#replaceFilter#.#setToken#(#tok#)#;#replaceFilter#.#setValue#(#props#.#getProperty#(#tok#)#)#;#}#}#validateAttributes#(#)#;#if#(#propertyResource#!=#null#)#{#properties#=#getProperties#(#propertyResource#)#;#}#validateReplacefilters#(#)#;#fileCount#=#0#;#replaceCount#=#0#;#if#(#sourceFile#!=#null#)#{#processFile#(#sourceFile#)#;#}#if#(#dir#!=#null#)#{#DirectoryScanner#ds#=#super#.#getDirectoryScanner#(#dir#)#;#String#[#]#srcs#=#ds#.#getIncludedFiles#(#)#;#for#(#int#i#=#0#;#i#<#srcs#.#length#;#i#++#)#{#File#file#=#new#File#(#dir#,#srcs#[#i#]#)#;#processFile#(#file#)#;#}#}#if#(#resources#!=#null#)#{#for#(#Iterator#i#=#resources#.#iterator#(#)#;#i#.#hasNext#(#)#;#)#{#FileProvider#fp#=#(#FileProvider#)#(#(#Resource#)#i#.#next#(#)#)#.#as#(#FileProvider#.#class#)#;#processFile#(#fp#.#getFile#(#)#)#;#}#}#if#(#summary#)#{#log#(#"Replaced "#+#replaceCount#+#" occurrences in "#+#fileCount#+#" files."#,#Project#.#MSG_INFO#)#;#}#if#(#failOnNoReplacements#&&#replaceCount#==#0#)#{#throw#new#BuildException#(#"didn't replace anything"#)#;#}#}#finally#{#replacefilters#=#savedFilters#;#properties#=#savedProperties#;#}#// end of finally#}##void#validateAttributes#(#)#throws#BuildException#{#if#(#sourceFile#==#null#&&#dir#==#null#&&#resources#==#null#)#{#String#message#=#"Either the file or the dir attribute "#+#"or nested resources must be specified"#;#throw#new#BuildException#(#message#,#getLocation#(#)#)#;#}#if#(#propertyResource#!=#null#&&#!#propertyResource#.#isExists#(#)#)#{#String#message#=#"Property file "#+#propertyResource#.#getName#(#)#+#" does not exist."#;#throw#new#BuildException#(#message#,#getLocation#(#)#)#;#}#if#(#token#==#null#&&#replacefilters#.#size#(#)#==#0#)#{#String#message#=#"Either token or a nested replacefilter "#+#"must be specified"#;#throw#new#BuildException#(#message#,#getLocation#(#)#)#;#}#if#(#token#!=#null#&&#""#.#equals#(#token#.#getText#(#)#)#)#{#String#message#=#"The token attribute must not be an empty string."#;#throw#new#BuildException#(#message#,#getLocation#(#)#)#;#}#}##void#validateReplacefilters#(#)#throws#BuildException#{#for#(#int#i#=#0#;#i#<#replacefilters#.#size#(#)#;#i#++#)#{#Replacefilter#element#=#(#Replacefilter#)#replacefilters#.#get#(#i#)#;#element#.#validate#(#)#;#}#}##Properties#getProperties#(#File#propertyFile#)#throws#BuildException#{#return#getProperties#(#new#FileResource#(#getProject#(#)#,#propertyFile#)#)#;#}##Properties#getProperties#(#Resource#propertyResource#)#throws#BuildException#{#Properties#props#=#new#Properties#(#)#;#InputStream#in#=#null#;#try#{#in#=#propertyResource#.#getInputStream#(#)#;#props#.#load#(#in#)#;#}#catch#(#IOException#e#)#{#String#message#=#"Property resource ("#+#propertyResource#.#getName#(#)#+#") cannot be loaded."#;#throw#new#BuildException#(#message#)#;#}#finally#{#FileUtils#.#close#(#in#)#;#}#return#props#;#}##void#processFile#(#File#src#)#throws#BuildException#{#if#(#!#src#.#exists#(#)#)#{#throw#new#BuildException#(#"Replace: source file "#+#src#.#getPath#(#)#+#" doesn't exist"#,#getLocation#(#)#)#;#}#File#temp#=#null#;#FileInput#in#=#null#;#FileOutput#out#=#null#;#try#{#in#=#new#FileInput#(#src#)#;#temp#=#FILE_UTILS#.#createTempFile#(#"rep"#,#".tmp"#,#src#.#getParentFile#(#)#,#false#,#true#)#;#out#=#new#FileOutput#(#temp#)#;#int#repCountStart#=#replaceCount#;#logFilterChain#(#src#.#getPath#(#)#)#;#out#.#setInputBuffer#(#buildFilterChain#(#in#.#getOutputBuffer#(#)#)#)#;#while#(#in#.#readChunk#(#)#)#{#if#(#processFilterChain#(#)#)#{#out#.#process#(#)#;#}#}#flushFilterChain#(#)#;#out#.#flush#(#)#;#in#.#close#(#)#;#in#=#null#;#out#.#close#(#)#;#out#=#null#;#boolean#changes#=#(#replaceCount#!=#repCountStart#)#;#if#(#changes#)#{#fileCount#++#;#long#origLastModified#=#src#.#lastModified#(#)#;#FILE_UTILS#.#rename#(#temp#,#src#)#;#if#(#preserveLastModified#)#{#FILE_UTILS#.#setFileLastModified#(#src#,#origLastModified#)#;#}#temp#=#null#;#}#}#catch#(#IOException#ioe#)#{#throw#new#BuildException#(#"IOException in "#+#src#+#" - "#+#ioe#.#getClass#(#)#.#getName#(#)#+#":"#+#ioe#.#getMessage#(#)#,#ioe#,#getLocation#(#)#)#;#}#finally#{#if#(#null#!=#in#)#{#in#.#closeQuietly#(#)#;#}#if#(#null#!=#out#)#{#out#.#closeQuietly#(#)#;#}#if#(#temp#!=#null#)#{#if#(#!#temp#.#delete#(#)#)#{#temp#.#deleteOnExit#(#)#;#}#}#}#}##void#flushFilterChain#(#)#{#for#(#int#i#=#0#;#i#<#replacefilters#.#size#(#)#;#i#++#)#{#Replacefilter#filter#=#(#Replacefilter#)#replacefilters#.#get#(#i#)#;#filter#.#flush#(#)#;#}#}##boolean#processFilterChain#(#)#{#for#(#int#i#=#0#;#i#<#replacefilters#.#size#(#)#;#i#++#)#{#Replacefilter#filter#=#(#Replacefilter#)#replacefilters#.#get#(#i#)#;#if#(#!#filter#.#process#(#)#)#{#return#false#;#}#}#return#true#;#}##StringBuffer#buildFilterChain#(#StringBuffer#inputBuffer#)#{#StringBuffer#buf#=#inputBuffer#;#for#(#int#i#=#0#;#i#<#replacefilters#.#size#(#)#;#i#++#)#{#Replacefilter#filter#=#(#Replacefilter#)#replacefilters#.#get#(#i#)#;#filter#.#setInputBuffer#(#buf#)#;#buf#=#filter#.#getOutputBuffer#(#)#;#}#return#buf#;#}##void#logFilterChain#(#String#filename#)#{#for#(#int#i#=#0#;#i#<#replacefilters#.#size#(#)#;#i#++#)#{#Replacefilter#filter#=#(#Replacefilter#)#replacefilters#.#get#(#i#)#;#log#(#"Replacing in "#+#filename#+#": "#+#filter#.#getToken#(#)#+#" --> "#+#filter#.#getReplaceValue#(#)#,#Project#.#MSG_VERBOSE#)#;#}#}##void#setFile#(#File#file#)#{#this#.#sourceFile#=#file#;#}##void#setSummary#(#boolean#summary#)#{#this#.#summary#=#summary#;#}##void#setReplaceFilterFile#(#File#replaceFilterFile#)#{#setReplaceFilterResource#(#new#FileResource#(#getProject#(#)#,#replaceFilterFile#)#)#;#}##void#setReplaceFilterResource#(#Resource#replaceFilter#)#{#this#.#replaceFilterResource#=#replaceFilter#;#}##void#setDir#(#File#dir#)#{#this#.#dir#=#dir#;#}##void#setToken#(#String#token#)#{#createReplaceToken#(#)#.#addText#(#token#)#;#}##void#setValue#(#String#value#)#{#createReplaceValue#(#)#.#addText#(#value#)#;#}##void#setEncoding#(#String#encoding#)#{#this#.#encoding#=#encoding#;#}##NestedString#createReplaceToken#(#)#{#if#(#token#==#null#)#{#token#=#new#NestedString#(#)#;#}#return#token#;#}##NestedString#createReplaceValue#(#)#{#return#value#;#}##void#setPropertyFile#(#File#propertyFile#)#{#setPropertyResource#(#new#FileResource#(#propertyFile#)#)#;#}##void#setPropertyResource#(#Resource#propertyResource#)#{#this#.#propertyResource#=#propertyResource#;#}##Replacefilter#createReplacefilter#(#)#{#Replacefilter#filter#=#new#Replacefilter#(#)#;#replacefilters#.#add#(#filter#)#;#return#filter#;#}##void#addConfigured#(#ResourceCollection#rc#)#{#if#(#!#rc#.#isFilesystemOnly#(#)#)#{#throw#new#BuildException#(#"only filesystem resources are supported"#)#;#}#if#(#resources#==#null#)#{#resources#=#new#Union#(#)#;#}#resources#.#add#(#rc#)#;#}##void#setPreserveLastModified#(#boolean#b#)#{#preserveLastModified#=#b#;#}##void#setFailOnNoReplacements#(#boolean#b#)#{#failOnNoReplacements#=#b#;#}##Replacefilter#createPrimaryfilter#(#)#{#Replacefilter#filter#=#new#Replacefilter#(#)#;#replacefilters#.#add#(#0#,#filter#)#;#return#filter#;#}##void#stringReplace#(#StringBuffer#str#,#String#str1#,#String#str2#)#{#int#found#=#str#.#indexOf#(#str1#)#;#final#int#str1Length#=#str1#.#length#(#)#;#final#int#str2Length#=#str2#.#length#(#)#;#while#(#found#>=#0#)#{#str#.#replace#(#found#,#found#+#str1Length#,#str2#)#;#found#=#str#.#indexOf#(#str1#,#found#+#str2Length#)#;#}#}##