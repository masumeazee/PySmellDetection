void#setUp#(#)#{#configureProject#(#TASKDEFS_DIR#+#"echoproperties.xml"#)#;#project#.#setProperty#(#"test.property"#,#TEST_VALUE#)#;#}##void#tearDown#(#)#{#executeTarget#(#"cleanup"#)#;#}##void#testEchoToLog#(#)#{#expectLogContaining#(#"testEchoToLog"#,#"test.property="#+#TEST_VALUE#)#;#}##void#testEchoWithEmptyPrefixToLog#(#)#{#expectLogContaining#(#"testEchoWithEmptyPrefixToLog"#,#"test.property="#+#TEST_VALUE#)#;#}##void#testReadBadFile#(#)#{#expectBuildExceptionContaining#(#"testReadBadFile"#,#"srcfile is a directory"#,#"srcfile is a directory!"#)#;#}##void#testReadBadFileFail#(#)#{#expectBuildExceptionContaining#(#"testReadBadFile"#,#"srcfile is a directory"#,#"srcfile is a directory!"#)#;#}##void#testReadBadFileNoFail#(#)#{#expectLog#(#"testReadBadFileNoFail"#,#"srcfile is a directory!"#)#;#}##void#testEchoToBadFile#(#)#{#expectBuildExceptionContaining#(#"testEchoToBadFile"#,#"destfile is a directory"#,#"destfile is a directory!"#)#;#}##void#testEchoToBadFileFail#(#)#{#expectBuildExceptionContaining#(#"testEchoToBadFileFail"#,#"destfile is a directory"#,#"destfile is a directory!"#)#;#}##void#testEchoToBadFileNoFail#(#)#{#expectLog#(#"testEchoToBadFileNoFail"#,#"destfile is a directory!"#)#;#}##void#testEchoToGoodFile#(#)#throws#Exception#{#executeTarget#(#"testEchoToGoodFile"#)#;#assertGoodFile#(#)#;#}##void#testEchoToGoodFileXml#(#)#throws#Exception#{#executeTarget#(#"testEchoToGoodFileXml"#)#;#// read in the file#File#f#=#createRelativeFile#(#GOOD_OUTFILE_XML#)#;#FileReader#fr#=#new#FileReader#(#f#)#;#try#{#BufferedReader#br#=#new#BufferedReader#(#fr#)#;#String#read#=#null#;#while#(#(#read#=#br#.#readLine#(#)#)#!=#null#)#{#if#(#read#.#indexOf#(#"<property name=\"test.property\" value=\""#+#TEST_VALUE#+#"\" />"#)#>=#0#)#{#// found the property we set - it's good.#return#;#}#}#fail#(#"did not encounter set property in generated file."#)#;#}#finally#{#try#{#fr#.#close#(#)#;#}#catch#(#IOException#e#)#{#}#}#}##void#testEchoToGoodFileFail#(#)#throws#Exception#{#executeTarget#(#"testEchoToGoodFileFail"#)#;#assertGoodFile#(#)#;#}##void#testEchoToGoodFileNoFail#(#)#throws#Exception#{#executeTarget#(#"testEchoToGoodFileNoFail"#)#;#assertGoodFile#(#)#;#}##void#testEchoPrefix#(#)#throws#Exception#{#testEchoPrefixVarious#(#"testEchoPrefix"#)#;#}##void#testEchoPrefixAsPropertyset#(#)#throws#Exception#{#testEchoPrefixVarious#(#"testEchoPrefixAsPropertyset"#)#;#}##void#testEchoPrefixAsNegatedPropertyset#(#)#throws#Exception#{#testEchoPrefixVarious#(#"testEchoPrefixAsNegatedPropertyset"#)#;#}##void#testEchoPrefixAsDoublyNegatedPropertyset#(#)#throws#Exception#{#testEchoPrefixVarious#(#"testEchoPrefixAsDoublyNegatedPropertyset"#)#;#}##void#testWithPrefixAndRegex#(#)#throws#Exception#{#expectSpecificBuildException#(#"testWithPrefixAndRegex"#,#"The target must fail with prefix and regex attributes set"#,#"Please specify either prefix or regex, but not both"#)#;#}##void#testWithEmptyPrefixAndRegex#(#)#throws#Exception#{#expectLogContaining#(#"testEchoWithEmptyPrefixToLog"#,#"test.property="#+#TEST_VALUE#)#;#}##void#testWithRegex#(#)#throws#Exception#{#if#(#!#RegexpMatcherFactory#.#regexpMatcherPresent#(#project#)#)#{#System#.#out#.#println#(#"Test 'testWithRegex' skipped because no regexp matcher is present."#)#;#return#;#}#executeTarget#(#"testWithRegex"#)#;#assertDebuglogContaining#(#"ant.home="#)#;#}##void#testEchoPrefixVarious#(#String#target#)#throws#Exception#{#executeTarget#(#target#)#;#Properties#props#=#loadPropFile#(#PREFIX_OUTFILE#)#;#assertEquals#(#"prefix didn't include 'a.set' property"#,#"true"#,#props#.#getProperty#(#"a.set"#)#)#;#assertNull#(#"prefix failed to filter out property 'b.set'"#,#props#.#getProperty#(#"b.set"#)#)#;#}##Properties#loadPropFile#(#String#relativeFilename#)#throws#IOException#{#File#f#=#createRelativeFile#(#relativeFilename#)#;#Properties#props#=#new#Properties#(#)#;#InputStream#in#=#null#;#try#{#in#=#new#BufferedInputStream#(#new#FileInputStream#(#f#)#)#;#props#.#load#(#in#)#;#}#finally#{#if#(#in#!=#null#)#{#try#{#in#.#close#(#)#;#}#catch#(#IOException#e#)#{#}#}#}#return#props#;#}##void#assertGoodFile#(#)#throws#Exception#{#File#f#=#createRelativeFile#(#GOOD_OUTFILE#)#;#assertTrue#(#"Did not create "#+#f#.#getAbsolutePath#(#)#,#f#.#exists#(#)#)#;#Properties#props#=#loadPropFile#(#GOOD_OUTFILE#)#;#props#.#list#(#System#.#out#)#;#assertEquals#(#"test property not found "#,#TEST_VALUE#,#props#.#getProperty#(#"test.property"#)#)#;#/*
        // read in the file
        FileReader fr = new FileReader( f );
        try {
            BufferedReader br = new BufferedReader( fr );
            String read = null;
            while ( (read = br.readLine()) != null)
            {
                if (read.indexOf("test.property" + TEST_VALUE) >= 0)
                {
                    // found the property we set - it's good.
                    return;
                }
            }
            fail( "did not encounter set property in generated file." );
        } finally {
            try { fr.close(); } catch(IOException e) {}
        }
*/#}##String#toAbsolute#(#String#filename#)#{#return#createRelativeFile#(#filename#)#.#getAbsolutePath#(#)#;#}##File#createRelativeFile#(#String#filename#)#{#if#(#filename#.#equals#(#"."#)#)#{#return#getProjectDir#(#)#;#}#// else#return#new#File#(#getProjectDir#(#)#,#filename#)#;#}##