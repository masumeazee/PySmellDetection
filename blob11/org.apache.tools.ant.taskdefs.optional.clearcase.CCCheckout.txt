void#execute#(#)#throws#BuildException#{#Commandline#commandLine#=#new#Commandline#(#)#;#Project#aProj#=#getProject#(#)#;#int#result#=#0#;#// Default the viewpath to basedir if it is not specified#if#(#getViewPath#(#)#==#null#)#{#setViewPath#(#aProj#.#getBaseDir#(#)#.#getPath#(#)#)#;#}#// build the command line from what we got the format is#// cleartool checkout [options...] [viewpath ...]#// as specified in the CLEARTOOL.EXE help#commandLine#.#setExecutable#(#getClearToolCommand#(#)#)#;#commandLine#.#createArgument#(#)#.#setValue#(#COMMAND_CHECKOUT#)#;#checkOptions#(#commandLine#)#;#/*
         * If configured to not care about whether the element is
         * already checked out to the current view.
         * Then check to see if it is checked out.
         */#if#(#!#getNotco#(#)#&&#lsCheckout#(#)#)#{#getProject#(#)#.#log#(#"Already checked out in this view: "#+#getViewPathBasename#(#)#,#Project#.#MSG_VERBOSE#)#;#return#;#}#if#(#!#getFailOnErr#(#)#)#{#getProject#(#)#.#log#(#"Ignoring any errors that occur for: "#+#getViewPathBasename#(#)#,#Project#.#MSG_VERBOSE#)#;#}#result#=#run#(#commandLine#)#;#if#(#Execute#.#isFailure#(#result#)#&&#getFailOnErr#(#)#)#{#String#msg#=#"Failed executing: "#+#commandLine#.#toString#(#)#;#throw#new#BuildException#(#msg#,#getLocation#(#)#)#;#}#}##boolean#lsCheckout#(#)#{#Commandline#cmdl#=#new#Commandline#(#)#;#String#result#;#// build the command line from what we got the format is#// cleartool lsco [options...] [viewpath ...]#// as specified in the CLEARTOOL.EXE help#cmdl#.#setExecutable#(#getClearToolCommand#(#)#)#;#cmdl#.#createArgument#(#)#.#setValue#(#COMMAND_LSCO#)#;#cmdl#.#createArgument#(#)#.#setValue#(#"-cview"#)#;#cmdl#.#createArgument#(#)#.#setValue#(#"-short"#)#;#cmdl#.#createArgument#(#)#.#setValue#(#"-d"#)#;#// viewpath#cmdl#.#createArgument#(#)#.#setValue#(#getViewPath#(#)#)#;#result#=#runS#(#cmdl#)#;#// System.out.println( "lsCheckout: " + result );#return#(#result#!=#null#&&#result#.#length#(#)#>#0#)#?#true#:#false#;#}##void#checkOptions#(#Commandline#cmd#)#{#// ClearCase items#if#(#getReserved#(#)#)#{#// -reserved#cmd#.#createArgument#(#)#.#setValue#(#FLAG_RESERVED#)#;#}#else#{#// -unreserved#cmd#.#createArgument#(#)#.#setValue#(#FLAG_UNRESERVED#)#;#}#if#(#getOut#(#)#!=#null#)#{#// -out#getOutCommand#(#cmd#)#;#}#else#{#if#(#getNoData#(#)#)#{#// -ndata#cmd#.#createArgument#(#)#.#setValue#(#FLAG_NODATA#)#;#}#}#if#(#getBranch#(#)#!=#null#)#{#// -branch#getBranchCommand#(#cmd#)#;#}#else#{#if#(#getVersion#(#)#)#{#// -version#cmd#.#createArgument#(#)#.#setValue#(#FLAG_VERSION#)#;#}#}#if#(#getNoWarn#(#)#)#{#// -nwarn#cmd#.#createArgument#(#)#.#setValue#(#FLAG_NOWARN#)#;#}#if#(#getComment#(#)#!=#null#)#{#// -c#getCommentCommand#(#cmd#)#;#}#else#{#if#(#getCommentFile#(#)#!=#null#)#{#// -cfile#getCommentFileCommand#(#cmd#)#;#}#else#{#cmd#.#createArgument#(#)#.#setValue#(#FLAG_NOCOMMENT#)#;#}#}#// viewpath#cmd#.#createArgument#(#)#.#setValue#(#getViewPath#(#)#)#;#// Print out info about the notco option#// System.out.println( "Notco: " + (getNotco() ? "yes" : "no") );#}##void#setReserved#(#boolean#reserved#)#{#mReserved#=#reserved#;#}##boolean#getReserved#(#)#{#return#mReserved#;#}##void#setNotco#(#boolean#notco#)#{#mNotco#=#notco#;#}##boolean#getNotco#(#)#{#return#mNotco#;#}##void#setOut#(#String#outf#)#{#mOut#=#outf#;#}##String#getOut#(#)#{#return#mOut#;#}##void#setNoData#(#boolean#ndata#)#{#mNdata#=#ndata#;#}##boolean#getNoData#(#)#{#return#mNdata#;#}##void#setBranch#(#String#branch#)#{#mBranch#=#branch#;#}##String#getBranch#(#)#{#return#mBranch#;#}##void#setVersion#(#boolean#version#)#{#mVersion#=#version#;#}##boolean#getVersion#(#)#{#return#mVersion#;#}##void#setNoWarn#(#boolean#nwarn#)#{#mNwarn#=#nwarn#;#}##boolean#getNoWarn#(#)#{#return#mNwarn#;#}##void#setComment#(#String#comment#)#{#mComment#=#comment#;#}##String#getComment#(#)#{#return#mComment#;#}##void#setCommentFile#(#String#cfile#)#{#mCfile#=#cfile#;#}##String#getCommentFile#(#)#{#return#mCfile#;#}##void#getOutCommand#(#Commandline#cmd#)#{#if#(#getOut#(#)#!=#null#)#{#/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */#cmd#.#createArgument#(#)#.#setValue#(#FLAG_OUT#)#;#cmd#.#createArgument#(#)#.#setValue#(#getOut#(#)#)#;#}#}##void#getBranchCommand#(#Commandline#cmd#)#{#if#(#getBranch#(#)#!=#null#)#{#/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */#cmd#.#createArgument#(#)#.#setValue#(#FLAG_BRANCH#)#;#cmd#.#createArgument#(#)#.#setValue#(#getBranch#(#)#)#;#}#}##void#getCommentCommand#(#Commandline#cmd#)#{#if#(#getComment#(#)#!=#null#)#{#/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */#cmd#.#createArgument#(#)#.#setValue#(#FLAG_COMMENT#)#;#cmd#.#createArgument#(#)#.#setValue#(#getComment#(#)#)#;#}#}##void#getCommentFileCommand#(#Commandline#cmd#)#{#if#(#getCommentFile#(#)#!=#null#)#{#/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */#cmd#.#createArgument#(#)#.#setValue#(#FLAG_COMMENTFILE#)#;#cmd#.#createArgument#(#)#.#setValue#(#getCommentFile#(#)#)#;#}#}##