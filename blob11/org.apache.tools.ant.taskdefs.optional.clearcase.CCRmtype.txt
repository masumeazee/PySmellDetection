void#execute#(#)#throws#BuildException#{#Commandline#commandLine#=#new#Commandline#(#)#;#int#result#=#0#;#// Check for required attributes#if#(#getTypeKind#(#)#==#null#)#{#throw#new#BuildException#(#"Required attribute TypeKind not specified"#)#;#}#if#(#getTypeName#(#)#==#null#)#{#throw#new#BuildException#(#"Required attribute TypeName not specified"#)#;#}#// build the command line from what we got. the format is#// cleartool rmtype [options...] type-selector...#// as specified in the CLEARTOOL help#commandLine#.#setExecutable#(#getClearToolCommand#(#)#)#;#commandLine#.#createArgument#(#)#.#setValue#(#COMMAND_RMTYPE#)#;#checkOptions#(#commandLine#)#;#if#(#!#getFailOnErr#(#)#)#{#getProject#(#)#.#log#(#"Ignoring any errors that occur for: "#+#getTypeSpecifier#(#)#,#Project#.#MSG_VERBOSE#)#;#}#result#=#run#(#commandLine#)#;#if#(#Execute#.#isFailure#(#result#)#&&#getFailOnErr#(#)#)#{#String#msg#=#"Failed executing: "#+#commandLine#.#toString#(#)#;#throw#new#BuildException#(#msg#,#getLocation#(#)#)#;#}#}##void#checkOptions#(#Commandline#cmd#)#{#if#(#getIgnore#(#)#)#{#// -ignore#cmd#.#createArgument#(#)#.#setValue#(#FLAG_IGNORE#)#;#}#if#(#getRmAll#(#)#)#{#// -rmall -force#cmd#.#createArgument#(#)#.#setValue#(#FLAG_RMALL#)#;#cmd#.#createArgument#(#)#.#setValue#(#FLAG_FORCE#)#;#}#if#(#getComment#(#)#!=#null#)#{#// -c#getCommentCommand#(#cmd#)#;#}#else#{#if#(#getCommentFile#(#)#!=#null#)#{#// -cfile#getCommentFileCommand#(#cmd#)#;#}#else#{#cmd#.#createArgument#(#)#.#setValue#(#FLAG_NOCOMMENT#)#;#}#}#// type-kind:type-name#cmd#.#createArgument#(#)#.#setValue#(#getTypeSpecifier#(#)#)#;#}##void#setIgnore#(#boolean#ignore#)#{#mIgnore#=#ignore#;#}##boolean#getIgnore#(#)#{#return#mIgnore#;#}##void#setRmAll#(#boolean#rmall#)#{#mRmall#=#rmall#;#}##boolean#getRmAll#(#)#{#return#mRmall#;#}##void#setComment#(#String#comment#)#{#mComment#=#comment#;#}##String#getComment#(#)#{#return#mComment#;#}##void#setCommentFile#(#String#cfile#)#{#mCfile#=#cfile#;#}##String#getCommentFile#(#)#{#return#mCfile#;#}##void#setTypeKind#(#String#tk#)#{#mTypeKind#=#tk#;#}##String#getTypeKind#(#)#{#return#mTypeKind#;#}##void#setTypeName#(#String#tn#)#{#mTypeName#=#tn#;#}##String#getTypeName#(#)#{#return#mTypeName#;#}##void#setVOB#(#String#vob#)#{#mVOB#=#vob#;#}##String#getVOB#(#)#{#return#mVOB#;#}##String#getTypeSpecifier#(#)#{#String#tkind#=#getTypeKind#(#)#;#String#tname#=#getTypeName#(#)#;#String#typeSpec#=#null#;#// Return the type-selector#typeSpec#=#tkind#+#":"#+#tname#;#if#(#getVOB#(#)#!=#null#)#{#typeSpec#+=#"@"#+#getVOB#(#)#;#}#return#typeSpec#;#}##void#getCommentCommand#(#Commandline#cmd#)#{#if#(#getComment#(#)#!=#null#)#{#/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */#cmd#.#createArgument#(#)#.#setValue#(#FLAG_COMMENT#)#;#cmd#.#createArgument#(#)#.#setValue#(#getComment#(#)#)#;#}#}##void#getCommentFileCommand#(#Commandline#cmd#)#{#if#(#getCommentFile#(#)#!=#null#)#{#/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */#cmd#.#createArgument#(#)#.#setValue#(#FLAG_COMMENTFILE#)#;#cmd#.#createArgument#(#)#.#setValue#(#getCommentFile#(#)#)#;#}#}##