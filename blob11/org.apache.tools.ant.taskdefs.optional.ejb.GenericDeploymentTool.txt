void#setDestdir#(#File#inDir#)#{#this#.#destDir#=#inDir#;#}##File#getDestDir#(#)#{#return#destDir#;#}##void#setTask#(#Task#task#)#{#this#.#task#=#task#;#}##Task#getTask#(#)#{#return#task#;#}##EjbJar#.#Config#getConfig#(#)#{#return#config#;#}##boolean#usingBaseJarName#(#)#{#return#config#.#baseJarName#!=#null#;#}##void#setGenericJarSuffix#(#String#inString#)#{#this#.#genericJarSuffix#=#inString#;#}##Path#createClasspath#(#)#{#if#(#classpath#==#null#)#{#classpath#=#new#Path#(#task#.#getProject#(#)#)#;#}#return#classpath#.#createPath#(#)#;#}##void#setClasspath#(#Path#classpath#)#{#this#.#classpath#=#classpath#;#}##Path#getCombinedClasspath#(#)#{#Path#combinedPath#=#classpath#;#if#(#config#.#classpath#!=#null#)#{#if#(#combinedPath#==#null#)#{#combinedPath#=#config#.#classpath#;#}#else#{#combinedPath#.#append#(#config#.#classpath#)#;#}#}#return#combinedPath#;#}##void#log#(#String#message#,#int#level#)#{#getTask#(#)#.#log#(#message#,#level#)#;#}##Location#getLocation#(#)#{#return#getTask#(#)#.#getLocation#(#)#;#}##void#createAnalyzer#(#)#{#String#analyzer#=#config#.#analyzer#;#if#(#analyzer#==#null#)#{#analyzer#=#DEFAULT_ANALYZER#;#}#if#(#analyzer#.#equals#(#ANALYZER_NONE#)#)#{#return#;#}#String#analyzerClassName#=#null#;#if#(#analyzer#.#equals#(#ANALYZER_SUPER#)#)#{#analyzerClassName#=#ANALYZER_CLASS_SUPER#;#}#else#if#(#analyzer#.#equals#(#ANALYZER_FULL#)#)#{#analyzerClassName#=#ANALYZER_CLASS_FULL#;#}#else#{#analyzerClassName#=#analyzer#;#}#try#{#Class#analyzerClass#=#Class#.#forName#(#analyzerClassName#)#;#dependencyAnalyzer#=#(#DependencyAnalyzer#)#analyzerClass#.#newInstance#(#)#;#dependencyAnalyzer#.#addClassPath#(#new#Path#(#task#.#getProject#(#)#,#config#.#srcDir#.#getPath#(#)#)#)#;#dependencyAnalyzer#.#addClassPath#(#config#.#classpath#)#;#}#catch#(#NoClassDefFoundError#e#)#{#dependencyAnalyzer#=#null#;#task#.#log#(#"Unable to load dependency analyzer: "#+#analyzerClassName#+#" - dependent class not found: "#+#e#.#getMessage#(#)#,#Project#.#MSG_WARN#)#;#}#catch#(#Exception#e#)#{#dependencyAnalyzer#=#null#;#task#.#log#(#"Unable to load dependency analyzer: "#+#analyzerClassName#+#" - exception: "#+#e#.#getMessage#(#)#,#Project#.#MSG_WARN#)#;#}#}##void#configure#(#EjbJar#.#Config#config#)#{#this#.#config#=#config#;#createAnalyzer#(#)#;#classpathLoader#=#null#;#}##void#addFileToJar#(#JarOutputStream#jStream#,#File#inputFile#,#String#logicalFilename#)#throws#BuildException#{#FileInputStream#iStream#=#null#;#try#{#if#(#!#addedfiles#.#contains#(#logicalFilename#)#)#{#iStream#=#new#FileInputStream#(#inputFile#)#;#// Create the zip entry and add it to the jar file#ZipEntry#zipEntry#=#new#ZipEntry#(#logicalFilename#.#replace#(#'\\'#,#'/'#)#)#;#jStream#.#putNextEntry#(#zipEntry#)#;#// Create the file input stream, and buffer everything over#// to the jar output stream#byte#[#]#byteBuffer#=#new#byte#[#2#*#DEFAULT_BUFFER_SIZE#]#;#int#count#=#0#;#do#{#jStream#.#write#(#byteBuffer#,#0#,#count#)#;#count#=#iStream#.#read#(#byteBuffer#,#0#,#byteBuffer#.#length#)#;#}#while#(#count#!=#-#1#)#;#//add it to list of files in jar#addedfiles#.#add#(#logicalFilename#)#;#}#}#catch#(#IOException#ioe#)#{#log#(#"WARNING: IOException while adding entry "#+#logicalFilename#+#" to jarfile from "#+#inputFile#.#getPath#(#)#+#" "#+#ioe#.#getClass#(#)#.#getName#(#)#+#"-"#+#ioe#.#getMessage#(#)#,#Project#.#MSG_WARN#)#;#}#finally#{#// Close up the file input stream for the class file#if#(#iStream#!=#null#)#{#try#{#iStream#.#close#(#)#;#}#catch#(#IOException#closeException#)#{#// ignore#}#}#}#}##DescriptorHandler#getDescriptorHandler#(#File#srcDir#)#{#DescriptorHandler#h#=#new#DescriptorHandler#(#getTask#(#)#,#srcDir#)#;#registerKnownDTDs#(#h#)#;#// register any DTDs supplied by the user#for#(#Iterator#i#=#getConfig#(#)#.#dtdLocations#.#iterator#(#)#;#i#.#hasNext#(#)#;#)#{#EjbJar#.#DTDLocation#dtdLocation#=#(#EjbJar#.#DTDLocation#)#i#.#next#(#)#;#h#.#registerDTD#(#dtdLocation#.#getPublicId#(#)#,#dtdLocation#.#getLocation#(#)#)#;#}#return#h#;#}##void#registerKnownDTDs#(#DescriptorHandler#handler#)#{#// none to register for generic#}##void#processDescriptor#(#String#descriptorFileName#,#SAXParser#saxParser#)#{#checkConfiguration#(#descriptorFileName#,#saxParser#)#;#try#{#handler#=#getDescriptorHandler#(#config#.#srcDir#)#;#// Retrive the files to be added to JAR from EJB descriptor#Hashtable#ejbFiles#=#parseEjbFiles#(#descriptorFileName#,#saxParser#)#;#// Add any support classes specified in the build file#addSupportClasses#(#ejbFiles#)#;#// Determine the JAR filename (without filename extension)#String#baseName#=#getJarBaseName#(#descriptorFileName#)#;#String#ddPrefix#=#getVendorDDPrefix#(#baseName#,#descriptorFileName#)#;#File#manifestFile#=#getManifestFile#(#ddPrefix#)#;#if#(#manifestFile#!=#null#)#{#ejbFiles#.#put#(#MANIFEST#,#manifestFile#)#;#}#// First the regular deployment descriptor#ejbFiles#.#put#(#META_DIR#+#EJB_DD#,#new#File#(#config#.#descriptorDir#,#descriptorFileName#)#)#;#// now the vendor specific files, if any#addVendorFiles#(#ejbFiles#,#ddPrefix#)#;#// add any dependent files#checkAndAddDependants#(#ejbFiles#)#;#// Lastly create File object for the Jar files. If we are using#// a flat destination dir, then we need to redefine baseName!#if#(#config#.#flatDestDir#&&#baseName#.#length#(#)#!=#0#)#{#int#startName#=#baseName#.#lastIndexOf#(#File#.#separator#)#;#if#(#startName#==#-#1#)#{#startName#=#0#;#}#int#endName#=#baseName#.#length#(#)#;#baseName#=#baseName#.#substring#(#startName#,#endName#)#;#}#File#jarFile#=#getVendorOutputJarFile#(#baseName#)#;#// Check to see if we need a build and start doing the work!#if#(#needToRebuild#(#ejbFiles#,#jarFile#)#)#{#// Log that we are going to build...#log#(#"building "#+#jarFile#.#getName#(#)#+#" with "#+#String#.#valueOf#(#ejbFiles#.#size#(#)#)#+#" files"#,#Project#.#MSG_INFO#)#;#// Use helper method to write the jarfile#String#publicId#=#getPublicId#(#)#;#writeJar#(#baseName#,#jarFile#,#ejbFiles#,#publicId#)#;#}#else#{#// Log that the file is up to date...#log#(#jarFile#.#toString#(#)#+#" is up to date."#,#Project#.#MSG_VERBOSE#)#;#}#}#catch#(#SAXException#se#)#{#String#msg#=#"SAXException while parsing '"#+#descriptorFileName#+#"'. This probably indicates badly-formed XML."#+#"  Details: "#+#se#.#getMessage#(#)#;#throw#new#BuildException#(#msg#,#se#)#;#}#catch#(#IOException#ioe#)#{#String#msg#=#"IOException while parsing'"#+#descriptorFileName#+#"'.  This probably indicates that the descriptor"#+#" doesn't exist. Details: "#+#ioe#.#getMessage#(#)#;#throw#new#BuildException#(#msg#,#ioe#)#;#}#}##void#checkConfiguration#(#String#descriptorFileName#,#SAXParser#saxParser#)#throws#BuildException#{#/*
         * For the GenericDeploymentTool, do nothing.  Vendor specific
         * subclasses should throw a BuildException if the configuration is
         * invalid for their server.
         */#}##Hashtable#parseEjbFiles#(#String#descriptorFileName#,#SAXParser#saxParser#)#throws#IOException#,#SAXException#{#FileInputStream#descriptorStream#=#null#;#Hashtable#ejbFiles#=#null#;#try#{#/* Parse the ejb deployment descriptor.  While it may not
             * look like much, we use a SAXParser and an inner class to
             * get hold of all the classfile names for the descriptor.
             */#descriptorStream#=#new#FileInputStream#(#new#File#(#config#.#descriptorDir#,#descriptorFileName#)#)#;#saxParser#.#parse#(#new#InputSource#(#descriptorStream#)#,#handler#)#;#ejbFiles#=#handler#.#getFiles#(#)#;#}#finally#{#if#(#descriptorStream#!=#null#)#{#try#{#descriptorStream#.#close#(#)#;#}#catch#(#IOException#closeException#)#{#// ignore#}#}#}#return#ejbFiles#;#}##void#addSupportClasses#(#Hashtable#ejbFiles#)#{#// add in support classes if any#Project#project#=#task#.#getProject#(#)#;#for#(#Iterator#i#=#config#.#supportFileSets#.#iterator#(#)#;#i#.#hasNext#(#)#;#)#{#FileSet#supportFileSet#=#(#FileSet#)#i#.#next#(#)#;#File#supportBaseDir#=#supportFileSet#.#getDir#(#project#)#;#DirectoryScanner#supportScanner#=#supportFileSet#.#getDirectoryScanner#(#project#)#;#supportScanner#.#scan#(#)#;#String#[#]#supportFiles#=#supportScanner#.#getIncludedFiles#(#)#;#for#(#int#j#=#0#;#j#<#supportFiles#.#length#;#++#j#)#{#ejbFiles#.#put#(#supportFiles#[#j#]#,#new#File#(#supportBaseDir#,#supportFiles#[#j#]#)#)#;#}#}#}##String#getJarBaseName#(#String#descriptorFileName#)#{#String#baseName#=#""#;#// Work out what the base name is#if#(#config#.#namingScheme#.#getValue#(#)#.#equals#(#EjbJar#.#NamingScheme#.#BASEJARNAME#)#)#{#String#canonicalDescriptor#=#descriptorFileName#.#replace#(#'\\'#,#'/'#)#;#int#index#=#canonicalDescriptor#.#lastIndexOf#(#'/'#)#;#if#(#index#!=#-#1#)#{#baseName#=#descriptorFileName#.#substring#(#0#,#index#+#1#)#;#}#baseName#+=#config#.#baseJarName#;#}#else#if#(#config#.#namingScheme#.#getValue#(#)#.#equals#(#EjbJar#.#NamingScheme#.#DESCRIPTOR#)#)#{#int#lastSeparatorIndex#=#descriptorFileName#.#lastIndexOf#(#File#.#separator#)#;#int#endBaseName#=#-#1#;#if#(#lastSeparatorIndex#!=#-#1#)#{#endBaseName#=#descriptorFileName#.#indexOf#(#config#.#baseNameTerminator#,#lastSeparatorIndex#)#;#}#else#{#endBaseName#=#descriptorFileName#.#indexOf#(#config#.#baseNameTerminator#)#;#}#if#(#endBaseName#!=#-#1#)#{#baseName#=#descriptorFileName#.#substring#(#0#,#endBaseName#)#;#}#else#{#throw#new#BuildException#(#"Unable to determine jar name "#+#"from descriptor \""#+#descriptorFileName#+#"\""#)#;#}#}#else#if#(#config#.#namingScheme#.#getValue#(#)#.#equals#(#EjbJar#.#NamingScheme#.#DIRECTORY#)#)#{#File#descriptorFile#=#new#File#(#config#.#descriptorDir#,#descriptorFileName#)#;#String#path#=#descriptorFile#.#getAbsolutePath#(#)#;#int#lastSeparatorIndex#=#path#.#lastIndexOf#(#File#.#separator#)#;#if#(#lastSeparatorIndex#==#-#1#)#{#throw#new#BuildException#(#"Unable to determine directory name holding descriptor"#)#;#}#String#dirName#=#path#.#substring#(#0#,#lastSeparatorIndex#)#;#int#dirSeparatorIndex#=#dirName#.#lastIndexOf#(#File#.#separator#)#;#if#(#dirSeparatorIndex#!=#-#1#)#{#dirName#=#dirName#.#substring#(#dirSeparatorIndex#+#1#)#;#}#baseName#=#dirName#;#}#else#if#(#config#.#namingScheme#.#getValue#(#)#.#equals#(#EjbJar#.#NamingScheme#.#EJB_NAME#)#)#{#baseName#=#handler#.#getEjbName#(#)#;#}#return#baseName#;#}##String#getVendorDDPrefix#(#String#baseName#,#String#descriptorFileName#)#{#String#ddPrefix#=#null#;#if#(#config#.#namingScheme#.#getValue#(#)#.#equals#(#EjbJar#.#NamingScheme#.#DESCRIPTOR#)#)#{#ddPrefix#=#baseName#+#config#.#baseNameTerminator#;#}#else#if#(#config#.#namingScheme#.#getValue#(#)#.#equals#(#EjbJar#.#NamingScheme#.#BASEJARNAME#)#||#config#.#namingScheme#.#getValue#(#)#.#equals#(#EjbJar#.#NamingScheme#.#EJB_NAME#)#||#config#.#namingScheme#.#getValue#(#)#.#equals#(#EjbJar#.#NamingScheme#.#DIRECTORY#)#)#{#String#canonicalDescriptor#=#descriptorFileName#.#replace#(#'\\'#,#'/'#)#;#int#index#=#canonicalDescriptor#.#lastIndexOf#(#'/'#)#;#if#(#index#==#-#1#)#{#ddPrefix#=#""#;#}#else#{#ddPrefix#=#descriptorFileName#.#substring#(#0#,#index#+#1#)#;#}#}#return#ddPrefix#;#}##void#addVendorFiles#(#Hashtable#ejbFiles#,#String#ddPrefix#)#{#// nothing to add for generic tool.#}##File#getVendorOutputJarFile#(#String#baseName#)#{#return#new#File#(#destDir#,#baseName#+#genericJarSuffix#)#;#}##boolean#needToRebuild#(#Hashtable#ejbFiles#,#File#jarFile#)#{#if#(#jarFile#.#exists#(#)#)#{#long#lastBuild#=#jarFile#.#lastModified#(#)#;#Iterator#fileIter#=#ejbFiles#.#values#(#)#.#iterator#(#)#;#// Loop through the files seeing if any has been touched#// more recently than the destination jar.#while#(#fileIter#.#hasNext#(#)#)#{#File#currentFile#=#(#File#)#fileIter#.#next#(#)#;#if#(#lastBuild#<#currentFile#.#lastModified#(#)#)#{#log#(#"Build needed because "#+#currentFile#.#getPath#(#)#+#" is out of date"#,#Project#.#MSG_VERBOSE#)#;#return#true#;#}#}#return#false#;#}#return#true#;#}##String#getPublicId#(#)#{#return#handler#.#getPublicId#(#)#;#}##File#getManifestFile#(#String#prefix#)#{#File#manifestFile#=#new#File#(#getConfig#(#)#.#descriptorDir#,#prefix#+#"manifest.mf"#)#;#if#(#manifestFile#.#exists#(#)#)#{#return#manifestFile#;#}#if#(#config#.#manifest#!=#null#)#{#return#config#.#manifest#;#}#return#null#;#}##void#writeJar#(#String#baseName#,#File#jarfile#,#Hashtable#files#,#String#publicId#)#throws#BuildException#{#JarOutputStream#jarStream#=#null#;#try#{#// clean the addedfiles set#if#(#addedfiles#==#null#)#{#addedfiles#=#new#HashSet#(#)#;#}#else#{#addedfiles#.#clear#(#)#;#}#/* If the jarfile already exists then whack it and recreate it.
             * Should probably think of a more elegant way to handle this
             * so that in case of errors we don't leave people worse off
             * than when we started =)
             */#if#(#jarfile#.#exists#(#)#)#{#jarfile#.#delete#(#)#;#}#jarfile#.#getParentFile#(#)#.#mkdirs#(#)#;#jarfile#.#createNewFile#(#)#;#InputStream#in#=#null#;#Manifest#manifest#=#null#;#try#{#File#manifestFile#=#(#File#)#files#.#get#(#MANIFEST#)#;#if#(#manifestFile#!=#null#&&#manifestFile#.#exists#(#)#)#{#in#=#new#FileInputStream#(#manifestFile#)#;#}#else#{#String#defaultManifest#=#"/org/apache/tools/ant/defaultManifest.mf"#;#in#=#this#.#getClass#(#)#.#getResourceAsStream#(#defaultManifest#)#;#if#(#in#==#null#)#{#throw#new#BuildException#(#"Could not find "#+#"default manifest: "#+#defaultManifest#)#;#}#}#manifest#=#new#Manifest#(#in#)#;#}#catch#(#IOException#e#)#{#throw#new#BuildException#(#"Unable to read manifest"#,#e#,#getLocation#(#)#)#;#}#finally#{#if#(#in#!=#null#)#{#in#.#close#(#)#;#}#}#// Create the streams necessary to write the jarfile#jarStream#=#new#JarOutputStream#(#new#FileOutputStream#(#jarfile#)#,#manifest#)#;#jarStream#.#setMethod#(#JarOutputStream#.#DEFLATED#)#;#// Loop through all the class files found and add them to the jar#for#(#Iterator#entryIterator#=#files#.#keySet#(#)#.#iterator#(#)#;#entryIterator#.#hasNext#(#)#;#)#{#String#entryName#=#(#String#)#entryIterator#.#next#(#)#;#if#(#entryName#.#equals#(#MANIFEST#)#)#{#continue#;#}#File#entryFile#=#(#File#)#files#.#get#(#entryName#)#;#log#(#"adding file '"#+#entryName#+#"'"#,#Project#.#MSG_VERBOSE#)#;#addFileToJar#(#jarStream#,#entryFile#,#entryName#)#;#// See if there are any inner classes for this class and add them in if there are#InnerClassFilenameFilter#flt#=#new#InnerClassFilenameFilter#(#entryFile#.#getName#(#)#)#;#File#entryDir#=#entryFile#.#getParentFile#(#)#;#String#[#]#innerfiles#=#entryDir#.#list#(#flt#)#;#if#(#innerfiles#!=#null#)#{#for#(#int#i#=#0#,#n#=#innerfiles#.#length#;#i#<#n#;#i#++#)#{#//get and clean up innerclass name#int#entryIndex#=#entryName#.#lastIndexOf#(#entryFile#.#getName#(#)#)#-#1#;#if#(#entryIndex#<#0#)#{#entryName#=#innerfiles#[#i#]#;#}#else#{#entryName#=#entryName#.#substring#(#0#,#entryIndex#)#+#File#.#separatorChar#+#innerfiles#[#i#]#;#}#// link the file#entryFile#=#new#File#(#config#.#srcDir#,#entryName#)#;#log#(#"adding innerclass file '"#+#entryName#+#"'"#,#Project#.#MSG_VERBOSE#)#;#addFileToJar#(#jarStream#,#entryFile#,#entryName#)#;#}#}#}#}#catch#(#IOException#ioe#)#{#String#msg#=#"IOException while processing ejb-jar file '"#+#jarfile#.#toString#(#)#+#"'. Details: "#+#ioe#.#getMessage#(#)#;#throw#new#BuildException#(#msg#,#ioe#)#;#}#finally#{#if#(#jarStream#!=#null#)#{#try#{#jarStream#.#close#(#)#;#}#catch#(#IOException#closeException#)#{#// ignore#}#}#}#}##void#checkAndAddDependants#(#Hashtable#checkEntries#)#throws#BuildException#{#if#(#dependencyAnalyzer#==#null#)#{#return#;#}#dependencyAnalyzer#.#reset#(#)#;#Iterator#i#=#checkEntries#.#keySet#(#)#.#iterator#(#)#;#while#(#i#.#hasNext#(#)#)#{#String#entryName#=#(#String#)#i#.#next#(#)#;#if#(#entryName#.#endsWith#(#".class"#)#)#{#String#className#=#entryName#.#substring#(#0#,#entryName#.#length#(#)#-#".class"#.#length#(#)#)#;#className#=#className#.#replace#(#File#.#separatorChar#,#'/'#)#;#className#=#className#.#replace#(#'/'#,#'.'#)#;#dependencyAnalyzer#.#addRootClass#(#className#)#;#}#}#Enumeration#e#=#dependencyAnalyzer#.#getClassDependencies#(#)#;#while#(#e#.#hasMoreElements#(#)#)#{#String#classname#=#(#String#)#e#.#nextElement#(#)#;#String#location#=#classname#.#replace#(#'.'#,#File#.#separatorChar#)#+#".class"#;#File#classFile#=#new#File#(#config#.#srcDir#,#location#)#;#if#(#classFile#.#exists#(#)#)#{#checkEntries#.#put#(#location#,#classFile#)#;#log#(#"dependent class: "#+#classname#+#" - "#+#classFile#,#Project#.#MSG_VERBOSE#)#;#}#}#}##ClassLoader#getClassLoaderForBuild#(#)#{#if#(#classpathLoader#!=#null#)#{#return#classpathLoader#;#}#Path#combinedClasspath#=#getCombinedClasspath#(#)#;#// only generate a new ClassLoader if we have a classpath#if#(#combinedClasspath#==#null#)#{#classpathLoader#=#getClass#(#)#.#getClassLoader#(#)#;#}#else#{#// Memory leak in line below#classpathLoader#=#getTask#(#)#.#getProject#(#)#.#createClassLoader#(#combinedClasspath#)#;#}#return#classpathLoader#;#}##void#validateConfigured#(#)#throws#BuildException#{#if#(#(#destDir#==#null#)#||#(#!#destDir#.#isDirectory#(#)#)#)#{#String#msg#=#"A valid destination directory must be specified "#+#"using the \"destdir\" attribute."#;#throw#new#BuildException#(#msg#,#getLocation#(#)#)#;#}#}##