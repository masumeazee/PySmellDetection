void#setRetainSource#(#boolean#retainSource#)#{#this#.#retainSource#=#retainSource#;#}##void#setDebugOutput#(#boolean#debugOutput#)#{#this#.#debugOutput#=#debugOutput#;#}##void#registerDTD#(#String#publicID#,#String#location#)#{#handler#.#registerDTD#(#publicID#,#location#)#;#}##void#setIasHomeDir#(#File#iasHomeDir#)#{#this#.#iasHomeDir#=#iasHomeDir#;#}##Hashtable#getEjbFiles#(#)#{#return#ejbFiles#;#}##String#getDisplayName#(#)#{#return#displayName#;#}##String#[#]#getCmpDescriptors#(#)#{#List#returnList#=#new#ArrayList#(#)#;#EjbInfo#[#]#ejbs#=#handler#.#getEjbs#(#)#;#for#(#int#i#=#0#;#i#<#ejbs#.#length#;#i#++#)#{#List#descriptors#=#(#List#)#ejbs#[#i#]#.#getCmpDescriptors#(#)#;#returnList#.#addAll#(#descriptors#)#;#}#return#(#String#[#]#)#returnList#.#toArray#(#new#String#[#returnList#.#size#(#)#]#)#;#}##void#main#(#String#[#]#args#)#{#File#stdDescriptor#;#File#iasDescriptor#;#File#destDirectory#=#null#;#String#classpath#=#null#;#SAXParser#parser#=#null#;#boolean#debug#=#false#;#boolean#retainSource#=#false#;#IPlanetEjbc#ejbc#;#if#(#(#args#.#length#<#MIN_NUM_ARGS#)#||#(#args#.#length#>#MAX_NUM_ARGS#)#)#{#usage#(#)#;#return#;#}#stdDescriptor#=#new#File#(#args#[#args#.#length#-#2#]#)#;#iasDescriptor#=#new#File#(#args#[#args#.#length#-#1#]#)#;#for#(#int#i#=#0#;#i#<#args#.#length#-#2#;#i#++#)#{#if#(#args#[#i#]#.#equals#(#"-classpath"#)#)#{#classpath#=#args#[#++#i#]#;#}#else#if#(#args#[#i#]#.#equals#(#"-d"#)#)#{#destDirectory#=#new#File#(#args#[#++#i#]#)#;#}#else#if#(#args#[#i#]#.#equals#(#"-debug"#)#)#{#debug#=#true#;#}#else#if#(#args#[#i#]#.#equals#(#"-keepsource"#)#)#{#retainSource#=#true#;#}#else#{#usage#(#)#;#return#;#}#}#/* If the -classpath flag isn't specified, use the system classpath */#if#(#classpath#==#null#)#{#Properties#props#=#System#.#getProperties#(#)#;#classpath#=#props#.#getProperty#(#"java.class.path"#)#;#}#/*
         * If the -d flag isn't specified, use the working directory as the
         * destination directory
         */#if#(#destDirectory#==#null#)#{#Properties#props#=#System#.#getProperties#(#)#;#destDirectory#=#new#File#(#props#.#getProperty#(#"user.dir"#)#)#;#}#/* Construct a SAXParser used to process the descriptors */#SAXParserFactory#parserFactory#=#SAXParserFactory#.#newInstance#(#)#;#parserFactory#.#setValidating#(#true#)#;#try#{#parser#=#parserFactory#.#newSAXParser#(#)#;#}#catch#(#Exception#e#)#{#// SAXException or ParserConfigurationException may be thrown#System#.#out#.#println#(#"An exception was generated while trying to "#)#;#System#.#out#.#println#(#"create a new SAXParser."#)#;#e#.#printStackTrace#(#)#;#return#;#}#/* Build and populate an instance of the ejbc utility */#ejbc#=#new#IPlanetEjbc#(#stdDescriptor#,#iasDescriptor#,#destDirectory#,#classpath#,#parser#)#;#ejbc#.#setDebugOutput#(#debug#)#;#ejbc#.#setRetainSource#(#retainSource#)#;#/* Execute the ejbc utility -- stubs/skeletons are rebuilt, if needed */#try#{#ejbc#.#execute#(#)#;#}#catch#(#IOException#e#)#{#System#.#out#.#println#(#"An IOException has occurred while reading the "#+#"XML descriptors ("#+#e#.#getMessage#(#)#+#")."#)#;#return#;#}#catch#(#SAXException#e#)#{#System#.#out#.#println#(#"A SAXException has occurred while reading the "#+#"XML descriptors ("#+#e#.#getMessage#(#)#+#")."#)#;#return#;#}#catch#(#IPlanetEjbc#.#EjbcException#e#)#{#System#.#out#.#println#(#"An error has occurred while executing the ejbc "#+#"utility ("#+#e#.#getMessage#(#)#+#")."#)#;#return#;#}#}##void#usage#(#)#{#System#.#out#.#println#(#"java org.apache.tools.ant.taskdefs.optional.ejb.IPlanetEjbc \\"#)#;#System#.#out#.#println#(#"  [OPTIONS] [EJB 1.1 descriptor] [iAS EJB descriptor]"#)#;#System#.#out#.#println#(#""#)#;#System#.#out#.#println#(#"Where OPTIONS are:"#)#;#System#.#out#.#println#(#"  -debug -- for additional debugging output"#)#;#System#.#out#.#println#(#"  -keepsource -- to retain Java source files generated"#)#;#System#.#out#.#println#(#"  -classpath [classpath] -- classpath used for compilation"#)#;#System#.#out#.#println#(#"  -d [destination directory] -- directory for compiled classes"#)#;#System#.#out#.#println#(#""#)#;#System#.#out#.#println#(#"If a classpath is not specified, the system classpath"#)#;#System#.#out#.#println#(#"will be used.  If a destination directory is not specified,"#)#;#System#.#out#.#println#(#"the current working directory will be used (classes will"#)#;#System#.#out#.#println#(#"still be placed in subfolders which correspond to their"#)#;#System#.#out#.#println#(#"package name)."#)#;#System#.#out#.#println#(#""#)#;#System#.#out#.#println#(#"The EJB home interface, remote interface, and implementation"#)#;#System#.#out#.#println#(#"class must be found in the destination directory.  In"#)#;#System#.#out#.#println#(#"addition, the destination will look for the stubs and skeletons"#)#;#System#.#out#.#println#(#"in the destination directory to ensure they are up to date."#)#;#}##void#execute#(#)#throws#EjbcException#,#IOException#,#SAXException#{#checkConfiguration#(#)#;#// Throws EjbcException if unsuccessful#EjbInfo#[#]#ejbs#=#getEjbs#(#)#;#// Returns list of EJBs for processing#for#(#int#i#=#0#;#i#<#ejbs#.#length#;#i#++#)#{#log#(#"EJBInfo..."#)#;#log#(#ejbs#[#i#]#.#toString#(#)#)#;#}#for#(#int#i#=#0#;#i#<#ejbs#.#length#;#i#++#)#{#EjbInfo#ejb#=#ejbs#[#i#]#;#ejb#.#checkConfiguration#(#destDirectory#)#;#// Throws EjbcException#if#(#ejb#.#mustBeRecompiled#(#destDirectory#)#)#{#log#(#ejb#.#getName#(#)#+#" must be recompiled using ejbc."#)#;#String#[#]#arguments#=#buildArgumentList#(#ejb#)#;#callEjbc#(#arguments#)#;#}#else#{#log#(#ejb#.#getName#(#)#+#" is up to date."#)#;#}#}#}##void#callEjbc#(#String#[#]#arguments#)#{#/* Concatenate all of the command line arguments into a single String */#StringBuffer#args#=#new#StringBuffer#(#)#;#for#(#int#i#=#0#;#i#<#arguments#.#length#;#i#++#)#{#args#.#append#(#arguments#[#i#]#)#.#append#(#" "#)#;#}#/* If an iAS home directory is specified, prepend it to the commmand */#String#command#;#if#(#iasHomeDir#==#null#)#{#command#=#""#;#}#else#{#command#=#iasHomeDir#.#toString#(#)#+#File#.#separator#+#"bin"#+#File#.#separator#;#}#command#+=#"ejbc "#;#log#(#command#+#args#)#;#/*
         * Use the Runtime object to execute an external command.  Use the
         * RedirectOutput inner class to direct the standard and error output
         * from the command to the JRE's standard output
         */#try#{#Process#p#=#Runtime#.#getRuntime#(#)#.#exec#(#command#+#args#)#;#RedirectOutput#output#=#new#RedirectOutput#(#p#.#getInputStream#(#)#)#;#RedirectOutput#error#=#new#RedirectOutput#(#p#.#getErrorStream#(#)#)#;#output#.#start#(#)#;#error#.#start#(#)#;#p#.#waitFor#(#)#;#p#.#destroy#(#)#;#}#catch#(#IOException#e#)#{#log#(#"An IOException has occurred while trying to execute ejbc."#)#;#e#.#printStackTrace#(#)#;#}#catch#(#InterruptedException#e#)#{#// Do nothing#}#}##void#checkConfiguration#(#)#throws#EjbcException#{#String#msg#=#""#;#if#(#stdDescriptor#==#null#)#{#msg#+=#"A standard XML descriptor file must be specified.  "#;#}#if#(#iasDescriptor#==#null#)#{#msg#+=#"An iAS-specific XML descriptor file must be specified.  "#;#}#if#(#classpath#==#null#)#{#msg#+=#"A classpath must be specified.    "#;#}#if#(#parser#==#null#)#{#msg#+=#"An XML parser must be specified.    "#;#}#if#(#destDirectory#==#null#)#{#msg#+=#"A destination directory must be specified.  "#;#}#else#if#(#!#destDirectory#.#exists#(#)#)#{#msg#+=#"The destination directory specified does not exist.  "#;#}#else#if#(#!#destDirectory#.#isDirectory#(#)#)#{#msg#+=#"The destination specified is not a directory.  "#;#}#if#(#msg#.#length#(#)#>#0#)#{#throw#new#EjbcException#(#msg#)#;#}#}##EjbInfo#[#]#getEjbs#(#)#throws#IOException#,#SAXException#{#EjbInfo#[#]#ejbs#=#null#;#/*
         * The EJB information is gathered from the standard XML EJB descriptor
         * and the iAS-specific XML EJB descriptor using a SAX parser.
         */#parser#.#parse#(#stdDescriptor#,#handler#)#;#parser#.#parse#(#iasDescriptor#,#handler#)#;#ejbs#=#handler#.#getEjbs#(#)#;#return#ejbs#;#}##String#[#]#buildArgumentList#(#EjbInfo#ejb#)#{#List#arguments#=#new#ArrayList#(#)#;#/* OPTIONAL COMMAND LINE PARAMETERS */#if#(#debugOutput#)#{#arguments#.#add#(#"-debug"#)#;#}#/* No beantype flag is needed for an entity bean */#if#(#ejb#.#getBeantype#(#)#.#equals#(#STATELESS_SESSION#)#)#{#arguments#.#add#(#"-sl"#)#;#}#else#if#(#ejb#.#getBeantype#(#)#.#equals#(#STATEFUL_SESSION#)#)#{#arguments#.#add#(#"-sf"#)#;#}#if#(#ejb#.#getIiop#(#)#)#{#arguments#.#add#(#"-iiop"#)#;#}#if#(#ejb#.#getCmp#(#)#)#{#arguments#.#add#(#"-cmp"#)#;#}#if#(#retainSource#)#{#arguments#.#add#(#"-gs"#)#;#}#if#(#ejb#.#getHasession#(#)#)#{#arguments#.#add#(#"-fo"#)#;#}#/* REQUIRED COMMAND LINE PARAMETERS */#arguments#.#add#(#"-classpath"#)#;#arguments#.#add#(#classpath#)#;#arguments#.#add#(#"-d"#)#;#arguments#.#add#(#destDirectory#.#toString#(#)#)#;#arguments#.#add#(#ejb#.#getHome#(#)#.#getQualifiedClassName#(#)#)#;#arguments#.#add#(#ejb#.#getRemote#(#)#.#getQualifiedClassName#(#)#)#;#arguments#.#add#(#ejb#.#getImplementation#(#)#.#getQualifiedClassName#(#)#)#;#/* Convert the List into an Array and return it */#return#(#String#[#]#)#arguments#.#toArray#(#new#String#[#arguments#.#size#(#)#]#)#;#}##void#log#(#String#msg#)#{#if#(#debugOutput#)#{#System#.#out#.#println#(#msg#)#;#}#}##EjbInfo#[#]#getEjbs#(#)#{#return#(#EjbInfo#[#]#)#ejbs#.#values#(#)#.#toArray#(#new#EjbInfo#[#ejbs#.#size#(#)#]#)#;#}##String#getDisplayName#(#)#{#return#displayName#;#}##void#registerDTD#(#String#publicID#,#String#location#)#{#log#(#"Registering: "#+#location#)#;#if#(#(#publicID#==#null#)#||#(#location#==#null#)#)#{#return#;#}#if#(#ClassLoader#.#getSystemResource#(#location#)#!=#null#)#{#log#(#"Found resource: "#+#location#)#;#resourceDtds#.#put#(#publicID#,#location#)#;#}#else#{#File#dtdFile#=#new#File#(#location#)#;#if#(#dtdFile#.#exists#(#)#&&#dtdFile#.#isFile#(#)#)#{#log#(#"Found file: "#+#location#)#;#fileDtds#.#put#(#publicID#,#location#)#;#}#}#}##InputSource#resolveEntity#(#String#publicId#,#String#systemId#)#throws#SAXException#{#InputStream#inputStream#=#null#;#try#{#/* Search the resource Map and (if not found) file Map */#String#location#=#(#String#)#resourceDtds#.#get#(#publicId#)#;#if#(#location#!=#null#)#{#inputStream#=#ClassLoader#.#getSystemResource#(#location#)#.#openStream#(#)#;#}#else#{#location#=#(#String#)#fileDtds#.#get#(#publicId#)#;#if#(#location#!=#null#)#{#inputStream#=#new#FileInputStream#(#location#)#;#}#}#}#catch#(#IOException#e#)#{#return#super#.#resolveEntity#(#publicId#,#systemId#)#;#}#if#(#inputStream#==#null#)#{#return#super#.#resolveEntity#(#publicId#,#systemId#)#;#}#else#{#return#new#InputSource#(#inputStream#)#;#}#}##void#startElement#(#String#name#,#AttributeList#atts#)#throws#SAXException#{#/*
             * I need to "push" the element onto the String (currentLoc) which
             * always represents the current location in the XML document.
             */#currentLoc#+=#"\\"#+#name#;#/* A new element has started, so reset the text being captured */#currentText#=#""#;#if#(#currentLoc#.#equals#(#"\\ejb-jar"#)#)#{#iasDescriptor#=#false#;#}#else#if#(#currentLoc#.#equals#(#"\\ias-ejb-jar"#)#)#{#iasDescriptor#=#true#;#}#if#(#(#name#.#equals#(#"session"#)#)#||#(#name#.#equals#(#"entity"#)#)#)#{#ejbType#=#name#;#}#}##void#characters#(#char#[#]#ch#,#int#start#,#int#len#)#throws#SAXException#{#currentText#+=#new#String#(#ch#)#.#substring#(#start#,#start#+#len#)#;#}##void#endElement#(#String#name#)#throws#SAXException#{#/*
             * If this is a standard EJB 1.1 descriptor, we are looking for one
             * set of data, while if this is an iAS-specific descriptor, we're
             * looking for different set of data.  Hand the processing off to
             * the appropriate method.
             */#if#(#iasDescriptor#)#{#iasCharacters#(#currentText#)#;#}#else#{#stdCharacters#(#currentText#)#;#}#/*
             * I need to "pop" the element off the String (currentLoc) which
             * always represents my current location in the XML document.
             */#int#nameLength#=#name#.#length#(#)#+#1#;#// Add one for the "\"#int#locLength#=#currentLoc#.#length#(#)#;#currentLoc#=#currentLoc#.#substring#(#0#,#locLength#-#nameLength#)#;#}##void#stdCharacters#(#String#value#)#{#if#(#currentLoc#.#equals#(#"\\ejb-jar\\display-name"#)#)#{#displayName#=#value#;#return#;#}#String#base#=#"\\ejb-jar\\enterprise-beans\\"#+#ejbType#;#if#(#currentLoc#.#equals#(#base#+#"\\ejb-name"#)#)#{#currentEjb#=#(#EjbInfo#)#ejbs#.#get#(#value#)#;#if#(#currentEjb#==#null#)#{#currentEjb#=#new#EjbInfo#(#value#)#;#ejbs#.#put#(#value#,#currentEjb#)#;#}#}#else#if#(#currentLoc#.#equals#(#base#+#"\\home"#)#)#{#currentEjb#.#setHome#(#value#)#;#}#else#if#(#currentLoc#.#equals#(#base#+#"\\remote"#)#)#{#currentEjb#.#setRemote#(#value#)#;#}#else#if#(#currentLoc#.#equals#(#base#+#"\\ejb-class"#)#)#{#currentEjb#.#setImplementation#(#value#)#;#}#else#if#(#currentLoc#.#equals#(#base#+#"\\prim-key-class"#)#)#{#currentEjb#.#setPrimaryKey#(#value#)#;#}#else#if#(#currentLoc#.#equals#(#base#+#"\\session-type"#)#)#{#currentEjb#.#setBeantype#(#value#)#;#}#else#if#(#currentLoc#.#equals#(#base#+#"\\persistence-type"#)#)#{#currentEjb#.#setCmp#(#value#)#;#}#}##void#iasCharacters#(#String#value#)#{#String#base#=#"\\ias-ejb-jar\\enterprise-beans\\"#+#ejbType#;#if#(#currentLoc#.#equals#(#base#+#"\\ejb-name"#)#)#{#currentEjb#=#(#EjbInfo#)#ejbs#.#get#(#value#)#;#if#(#currentEjb#==#null#)#{#currentEjb#=#new#EjbInfo#(#value#)#;#ejbs#.#put#(#value#,#currentEjb#)#;#}#}#else#if#(#currentLoc#.#equals#(#base#+#"\\iiop"#)#)#{#currentEjb#.#setIiop#(#value#)#;#}#else#if#(#currentLoc#.#equals#(#base#+#"\\failover-required"#)#)#{#currentEjb#.#setHasession#(#value#)#;#}#else#if#(#currentLoc#.#equals#(#base#+#"\\persistence-manager"#+#"\\properties-file-location"#)#)#{#currentEjb#.#addCmpDescriptor#(#value#)#;#}#}##String#getName#(#)#{#if#(#name#==#null#)#{#if#(#implementation#==#null#)#{#return#"[unnamed]"#;#}#else#{#return#implementation#.#getClassName#(#)#;#}#}#return#name#;#}##void#setHome#(#String#home#)#{#setHome#(#new#Classname#(#home#)#)#;#}##void#setHome#(#Classname#home#)#{#this#.#home#=#home#;#}##Classname#getHome#(#)#{#return#home#;#}##void#setRemote#(#String#remote#)#{#setRemote#(#new#Classname#(#remote#)#)#;#}##void#setRemote#(#Classname#remote#)#{#this#.#remote#=#remote#;#}##Classname#getRemote#(#)#{#return#remote#;#}##void#setImplementation#(#String#implementation#)#{#setImplementation#(#new#Classname#(#implementation#)#)#;#}##void#setImplementation#(#Classname#implementation#)#{#this#.#implementation#=#implementation#;#}##Classname#getImplementation#(#)#{#return#implementation#;#}##void#setPrimaryKey#(#String#primaryKey#)#{#setPrimaryKey#(#new#Classname#(#primaryKey#)#)#;#}##void#setPrimaryKey#(#Classname#primaryKey#)#{#this#.#primaryKey#=#primaryKey#;#}##Classname#getPrimaryKey#(#)#{#return#primaryKey#;#}##void#setBeantype#(#String#beantype#)#{#this#.#beantype#=#beantype#.#toLowerCase#(#)#;#}##String#getBeantype#(#)#{#return#beantype#;#}##void#setCmp#(#boolean#cmp#)#{#this#.#cmp#=#cmp#;#}##void#setCmp#(#String#cmp#)#{#setCmp#(#cmp#.#equals#(#"Container"#)#)#;#}##boolean#getCmp#(#)#{#return#cmp#;#}##void#setIiop#(#boolean#iiop#)#{#this#.#iiop#=#iiop#;#}##void#setIiop#(#String#iiop#)#{#setIiop#(#iiop#.#equals#(#"true"#)#)#;#}##boolean#getIiop#(#)#{#return#iiop#;#}##void#setHasession#(#boolean#hasession#)#{#this#.#hasession#=#hasession#;#}##void#setHasession#(#String#hasession#)#{#setHasession#(#hasession#.#equals#(#"true"#)#)#;#}##boolean#getHasession#(#)#{#return#hasession#;#}##void#addCmpDescriptor#(#String#descriptor#)#{#cmpDescriptors#.#add#(#descriptor#)#;#}##List#getCmpDescriptors#(#)#{#return#cmpDescriptors#;#}##void#checkConfiguration#(#File#buildDir#)#throws#EjbcException#{#/* Check that the specified instance variables are valid */#if#(#home#==#null#)#{#throw#new#EjbcException#(#"A home interface was not found "#+#"for the "#+#name#+#" EJB."#)#;#}#if#(#remote#==#null#)#{#throw#new#EjbcException#(#"A remote interface was not found "#+#"for the "#+#name#+#" EJB."#)#;#}#if#(#implementation#==#null#)#{#throw#new#EjbcException#(#"An EJB implementation class was not "#+#"found for the "#+#name#+#" EJB."#)#;#}#if#(#(#!#beantype#.#equals#(#ENTITY_BEAN#)#)#&&#(#!#beantype#.#equals#(#STATELESS_SESSION#)#)#&&#(#!#beantype#.#equals#(#STATEFUL_SESSION#)#)#)#{#throw#new#EjbcException#(#"The beantype found ("#+#beantype#+#") "#+#"isn't valid in the "#+#name#+#" EJB."#)#;#}#if#(#cmp#&&#(#!#beantype#.#equals#(#ENTITY_BEAN#)#)#)#{#System#.#out#.#println#(#"CMP stubs and skeletons may not be generated"#+#" for a Session Bean -- the \"cmp\" attribute will be"#+#" ignoredfor the "#+#name#+#" EJB."#)#;#}#if#(#hasession#&&#(#!#beantype#.#equals#(#STATEFUL_SESSION#)#)#)#{#System#.#out#.#println#(#"Highly available stubs and skeletons may "#+#"only be generated for a Stateful Session Bean -- the "#+#"\"hasession\" attribute will be ignored for the "#+#name#+#" EJB."#)#;#}#/* Check that the EJB "source" classes all exist */#if#(#!#remote#.#getClassFile#(#buildDir#)#.#exists#(#)#)#{#throw#new#EjbcException#(#"The remote interface "#+#remote#.#getQualifiedClassName#(#)#+#" could not be "#+#"found."#)#;#}#if#(#!#home#.#getClassFile#(#buildDir#)#.#exists#(#)#)#{#throw#new#EjbcException#(#"The home interface "#+#home#.#getQualifiedClassName#(#)#+#" could not be "#+#"found."#)#;#}#if#(#!#implementation#.#getClassFile#(#buildDir#)#.#exists#(#)#)#{#throw#new#EjbcException#(#"The EJB implementation class "#+#implementation#.#getQualifiedClassName#(#)#+#" could "#+#"not be found."#)#;#}#}##boolean#mustBeRecompiled#(#File#destDir#)#{#long#sourceModified#=#sourceClassesModified#(#destDir#)#;#long#destModified#=#destClassesModified#(#destDir#)#;#return#(#destModified#<#sourceModified#)#;#}##long#sourceClassesModified#(#File#buildDir#)#{#long#latestModified#;#// The timestamp of the "newest" class#long#modified#;#// Timestamp for a given class#File#remoteFile#;#// File for the remote interface class#File#homeFile#;#// File for the home interface class#File#implFile#;#// File for the EJB implementation class#File#pkFile#;#// File for the EJB primary key class#/* Check the timestamp on the remote interface */#remoteFile#=#remote#.#getClassFile#(#buildDir#)#;#modified#=#remoteFile#.#lastModified#(#)#;#if#(#modified#==#-#1#)#{#System#.#out#.#println#(#"The class "#+#remote#.#getQualifiedClassName#(#)#+#" couldn't "#+#"be found on the classpath"#)#;#return#-#1#;#}#latestModified#=#modified#;#/* Check the timestamp on the home interface */#homeFile#=#home#.#getClassFile#(#buildDir#)#;#modified#=#homeFile#.#lastModified#(#)#;#if#(#modified#==#-#1#)#{#System#.#out#.#println#(#"The class "#+#home#.#getQualifiedClassName#(#)#+#" couldn't be "#+#"found on the classpath"#)#;#return#-#1#;#}#latestModified#=#Math#.#max#(#latestModified#,#modified#)#;#/* Check the timestamp of the primary key class */#if#(#primaryKey#!=#null#)#{#pkFile#=#primaryKey#.#getClassFile#(#buildDir#)#;#modified#=#pkFile#.#lastModified#(#)#;#if#(#modified#==#-#1#)#{#System#.#out#.#println#(#"The class "#+#primaryKey#.#getQualifiedClassName#(#)#+#"couldn't be "#+#"found on the classpath"#)#;#return#-#1#;#}#latestModified#=#Math#.#max#(#latestModified#,#modified#)#;#}#else#{#pkFile#=#null#;#}#/* Check the timestamp on the EJB implementation class.
             *
             * Note that if ONLY the implementation class has changed, it's not
             * necessary to rebuild the EJB stubs and skeletons.  For this
             * reason, we ensure the file exists (using lastModified above), but
             * we DON'T compare it's timestamp with the timestamps of the home
             * and remote interfaces (because it's irrelevant in determining if
             * ejbc must be run)
             */#implFile#=#implementation#.#getClassFile#(#buildDir#)#;#modified#=#implFile#.#lastModified#(#)#;#if#(#modified#==#-#1#)#{#System#.#out#.#println#(#"The class "#+#implementation#.#getQualifiedClassName#(#)#+#" couldn't be found on the classpath"#)#;#return#-#1#;#}#String#pathToFile#=#remote#.#getQualifiedClassName#(#)#;#pathToFile#=#pathToFile#.#replace#(#'.'#,#File#.#separatorChar#)#+#".class"#;#ejbFiles#.#put#(#pathToFile#,#remoteFile#)#;#pathToFile#=#home#.#getQualifiedClassName#(#)#;#pathToFile#=#pathToFile#.#replace#(#'.'#,#File#.#separatorChar#)#+#".class"#;#ejbFiles#.#put#(#pathToFile#,#homeFile#)#;#pathToFile#=#implementation#.#getQualifiedClassName#(#)#;#pathToFile#=#pathToFile#.#replace#(#'.'#,#File#.#separatorChar#)#+#".class"#;#ejbFiles#.#put#(#pathToFile#,#implFile#)#;#if#(#pkFile#!=#null#)#{#pathToFile#=#primaryKey#.#getQualifiedClassName#(#)#;#pathToFile#=#pathToFile#.#replace#(#'.'#,#File#.#separatorChar#)#+#".class"#;#ejbFiles#.#put#(#pathToFile#,#pkFile#)#;#}#return#latestModified#;#}##long#destClassesModified#(#File#destDir#)#{#String#[#]#classnames#=#classesToGenerate#(#)#;#// List of all stubs & skels#long#destClassesModified#=#new#Date#(#)#.#getTime#(#)#;#// Earliest mod time#boolean#allClassesFound#=#true#;#// Has each been found?#/*
             * Loop through each stub/skeleton class that must be generated, and
             * determine (if all exist) which file has the most recent timestamp
             */#for#(#int#i#=#0#;#i#<#classnames#.#length#;#i#++#)#{#String#pathToClass#=#classnames#[#i#]#.#replace#(#'.'#,#File#.#separatorChar#)#+#".class"#;#File#classFile#=#new#File#(#destDir#,#pathToClass#)#;#/*
                 * Add each stub/skeleton class to the list of EJB files.  Note
                 * that each class is added even if it doesn't exist now.
                 */#ejbFiles#.#put#(#pathToClass#,#classFile#)#;#allClassesFound#=#allClassesFound#&&#classFile#.#exists#(#)#;#if#(#allClassesFound#)#{#long#fileMod#=#classFile#.#lastModified#(#)#;#/* Keep track of the oldest modification timestamp */#destClassesModified#=#Math#.#min#(#destClassesModified#,#fileMod#)#;#}#}#return#(#allClassesFound#)#?#destClassesModified#:#-#1#;#}##String#[#]#classesToGenerate#(#)#{#String#[#]#classnames#=#(#iiop#)#?#new#String#[#NUM_CLASSES_WITH_IIOP#]#:#new#String#[#NUM_CLASSES_WITHOUT_IIOP#]#;#final#String#remotePkg#=#remote#.#getPackageName#(#)#+#"."#;#final#String#remoteClass#=#remote#.#getClassName#(#)#;#final#String#homePkg#=#home#.#getPackageName#(#)#+#"."#;#final#String#homeClass#=#home#.#getClassName#(#)#;#final#String#implPkg#=#implementation#.#getPackageName#(#)#+#"."#;#final#String#implFullClass#=#implementation#.#getQualifiedWithUnderscores#(#)#;#int#index#=#0#;#classnames#[#index#++#]#=#implPkg#+#"ejb_fac_"#+#implFullClass#;#classnames#[#index#++#]#=#implPkg#+#"ejb_home_"#+#implFullClass#;#classnames#[#index#++#]#=#implPkg#+#"ejb_skel_"#+#implFullClass#;#classnames#[#index#++#]#=#remotePkg#+#"ejb_kcp_skel_"#+#remoteClass#;#classnames#[#index#++#]#=#homePkg#+#"ejb_kcp_skel_"#+#homeClass#;#classnames#[#index#++#]#=#remotePkg#+#"ejb_kcp_stub_"#+#remoteClass#;#classnames#[#index#++#]#=#homePkg#+#"ejb_kcp_stub_"#+#homeClass#;#classnames#[#index#++#]#=#remotePkg#+#"ejb_stub_"#+#remoteClass#;#classnames#[#index#++#]#=#homePkg#+#"ejb_stub_"#+#homeClass#;#if#(#!#iiop#)#{#return#classnames#;#}#classnames#[#index#++#]#=#"org.omg.stub."#+#remotePkg#+#"_"#+#remoteClass#+#"_Stub"#;#classnames#[#index#++#]#=#"org.omg.stub."#+#homePkg#+#"_"#+#homeClass#+#"_Stub"#;#classnames#[#index#++#]#=#"org.omg.stub."#+#remotePkg#+#"_ejb_RmiCorbaBridge_"#+#remoteClass#+#"_Tie"#;#classnames#[#index#++#]#=#"org.omg.stub."#+#homePkg#+#"_ejb_RmiCorbaBridge_"#+#homeClass#+#"_Tie"#;#classnames#[#index#++#]#=#remotePkg#+#"ejb_RmiCorbaBridge_"#+#remoteClass#;#classnames#[#index#++#]#=#homePkg#+#"ejb_RmiCorbaBridge_"#+#homeClass#;#return#classnames#;#}##String#toString#(#)#{#String#s#=#"EJB name: "#+#name#+#"\n\r              home:      "#+#home#+#"\n\r              remote:    "#+#remote#+#"\n\r              impl:      "#+#implementation#+#"\n\r              primaryKey: "#+#primaryKey#+#"\n\r              beantype:  "#+#beantype#+#"\n\r              cmp:       "#+#cmp#+#"\n\r              iiop:      "#+#iiop#+#"\n\r              hasession: "#+#hasession#;#Iterator#i#=#cmpDescriptors#.#iterator#(#)#;#while#(#i#.#hasNext#(#)#)#{#s#+=#"\n\r              CMP Descriptor: "#+#i#.#next#(#)#;#}#return#s#;#}##String#getQualifiedClassName#(#)#{#return#qualifiedName#;#}##String#getPackageName#(#)#{#return#packageName#;#}##String#getClassName#(#)#{#return#className#;#}##String#getQualifiedWithUnderscores#(#)#{#return#qualifiedName#.#replace#(#'.'#,#'_'#)#;#}##File#getClassFile#(#File#directory#)#{#String#pathToFile#=#qualifiedName#.#replace#(#'.'#,#File#.#separatorChar#)#+#".class"#;#return#new#File#(#directory#,#pathToFile#)#;#}##String#toString#(#)#{#return#getQualifiedClassName#(#)#;#}##void#run#(#)#{#BufferedReader#reader#=#new#BufferedReader#(#new#InputStreamReader#(#stream#)#)#;#String#text#;#try#{#while#(#(#text#=#reader#.#readLine#(#)#)#!=#null#)#{#System#.#out#.#println#(#text#)#;#}#}#catch#(#IOException#e#)#{#e#.#printStackTrace#(#)#;#}#finally#{#try#{#reader#.#close#(#)#;#}#catch#(#IOException#e#)#{#// Do nothing#}#}#}##