String#getLocationName#(#)#{#if#(#locationName#==#null#)#{#String#syspropValue#=#System#.#getProperty#(#MAGIC_PROPERTY_CLASS_LOCATION#)#;#String#antpropValue#=#getProject#(#)#.#getProperty#(#MAGIC_PROPERTY_CLASS_LOCATION#)#;#if#(#syspropValue#!=#null#)#{#locationName#=#syspropValue#;#verbose#(#"System property '"#+#MAGIC_PROPERTY_CLASS_LOCATION#+#"' set, so use "#+#"its value '"#+#syspropValue#+#"' as location for collector class."#)#;#}#else#if#(#antpropValue#!=#null#)#{#locationName#=#antpropValue#;#verbose#(#"Ant property '"#+#MAGIC_PROPERTY_CLASS_LOCATION#+#"' set, so use "#+#"its value '"#+#antpropValue#+#"' as location for collector class."#)#;#}#else#{#locationName#=#DEFAULT_CLASS_LOCATION#;#verbose#(#"System property '"#+#MAGIC_PROPERTY_CLASS_LOCATION#+#"' not set, so use "#+#"value as location for collector class: '"#+#DEFAULT_CLASS_LOCATION#+#"'"#)#;#}#File#locationFile#=#new#File#(#locationName#)#;#if#(#!#locationFile#.#isAbsolute#(#)#)#{#File#f#=#new#File#(#getProject#(#)#.#getBaseDir#(#)#,#locationName#)#;#locationName#=#f#.#getAbsolutePath#(#)#;#verbose#(#"Location file is relative ("#+#locationFile#+#")"#+#" use absolute path instead ("#+#locationName#+#")"#)#;#}#}#return#locationName#;#}##void#setProject#(#Project#project#)#{#// store project reference for logging#super#.#setProject#(#project#)#;#// check if already registered#boolean#alreadyRegistered#=#false#;#Vector#allListeners#=#project#.#getBuildListeners#(#)#;#for#(#int#i#=#0#;#i#<#allListeners#.#size#(#)#;#i#++#)#{#Object#listener#=#allListeners#.#get#(#i#)#;#if#(#listener#instanceof#FailureRecorder#)#{#alreadyRegistered#=#true#;#continue#;#}#}#// register if needed#if#(#!#alreadyRegistered#)#{#verbose#(#"Register FailureRecorder (@"#+#this#.#hashCode#(#)#+#") as BuildListener"#)#;#project#.#addBuildListener#(#this#)#;#}#}##void#endTestSuite#(#JUnitTest#suite#)#throws#BuildException#{#}##void#addError#(#Test#test#,#Throwable#throwable#)#{#failedTests#.#add#(#new#TestInfos#(#test#)#)#;#}##void#addFailure#(#Test#test#,#AssertionFailedError#error#)#{#failedTests#.#add#(#new#TestInfos#(#test#)#)#;#}##void#setOutput#(#OutputStream#out#)#{#// unused, close output file so it can be deleted before the VM exits#if#(#out#!=#System#.#out#)#{#FileUtils#.#close#(#out#)#;#}#}##void#setSystemError#(#String#err#)#{#}##void#setSystemOutput#(#String#out#)#{#}##void#startTestSuite#(#JUnitTest#suite#)#throws#BuildException#{#}##void#endTest#(#Test#test#)#{#}##void#startTest#(#Test#test#)#{#}##void#writeJavaClass#(#)#{#try#{#File#sourceFile#=#new#File#(#(#getLocationName#(#)#+#".java"#)#)#;#verbose#(#"Write collector class to '"#+#sourceFile#.#getAbsolutePath#(#)#+#"'"#)#;#sourceFile#.#delete#(#)#;#writer#=#new#BufferedWriter#(#new#FileWriter#(#sourceFile#)#)#;#createClassHeader#(#)#;#createSuiteMethod#(#)#;#createClassFooter#(#)#;#}#catch#(#IOException#e#)#{#e#.#printStackTrace#(#)#;#}#finally#{#FileUtils#.#close#(#writer#)#;#}#}##void#createClassHeader#(#)#throws#IOException#{#String#className#=#getLocationName#(#)#.#replace#(#'\\'#,#'/'#)#;#if#(#className#.#indexOf#(#'/'#)#>#-#1#)#{#className#=#className#.#substring#(#className#.#lastIndexOf#(#'/'#)#+#1#)#;#}#SimpleDateFormat#sdf#=#new#SimpleDateFormat#(#"yyyy.MM.dd HH:mm:ss,SSS"#)#;#writer#.#write#(#"// generated on: "#)#;#writer#.#write#(#sdf#.#format#(#new#Date#(#)#)#)#;#writer#.#newLine#(#)#;#writer#.#write#(#"import junit.framework.*;"#)#;#writer#.#newLine#(#)#;#writer#.#write#(#"public class "#)#;#writer#.#write#(#className#)#;#// If this class does not extend TC, Ant doesnt run these#writer#.#write#(#" extends TestCase {"#)#;#writer#.#newLine#(#)#;#// standard String-constructor#writer#.#write#(#"    public "#)#;#writer#.#write#(#className#)#;#writer#.#write#(#"(String testname) {"#)#;#writer#.#newLine#(#)#;#writer#.#write#(#"        super(testname);"#)#;#writer#.#newLine#(#)#;#writer#.#write#(#"    }"#)#;#writer#.#newLine#(#)#;#}##void#createSuiteMethod#(#)#throws#IOException#{#writer#.#write#(#"    public static Test suite() {"#)#;#writer#.#newLine#(#)#;#writer#.#write#(#"        TestSuite suite = new TestSuite();"#)#;#writer#.#newLine#(#)#;#for#(#Iterator#iter#=#failedTests#.#iterator#(#)#;#iter#.#hasNext#(#)#;#)#{#TestInfos#testInfos#=#(#TestInfos#)#iter#.#next#(#)#;#writer#.#write#(#"        suite.addTest("#)#;#writer#.#write#(#String#.#valueOf#(#testInfos#)#)#;#writer#.#write#(#");"#)#;#writer#.#newLine#(#)#;#}#writer#.#write#(#"        return suite;"#)#;#writer#.#newLine#(#)#;#writer#.#write#(#"    }"#)#;#writer#.#newLine#(#)#;#}##void#createClassFooter#(#)#throws#IOException#{#writer#.#write#(#"}"#)#;#writer#.#newLine#(#)#;#}##void#log#(#String#message#)#{#getProject#(#)#.#log#(#LOG_PREFIX#+#" "#+#message#,#Project#.#MSG_INFO#)#;#}##void#verbose#(#String#message#)#{#getProject#(#)#.#log#(#LOG_PREFIX#+#" "#+#message#,#Project#.#MSG_VERBOSE#)#;#}##String#toString#(#)#{#return#"new "#+#className#+#"(\""#+#methodName#+#"\")"#;#}##int#compareTo#(#Object#other#)#{#if#(#other#instanceof#TestInfos#)#{#TestInfos#otherInfos#=#(#TestInfos#)#other#;#return#toString#(#)#.#compareTo#(#otherInfos#.#toString#(#)#)#;#}#else#{#return#-#1#;#}#}##void#buildFinished#(#BuildEvent#event#)#{#}##void#buildStarted#(#BuildEvent#event#)#{#}##void#messageLogged#(#BuildEvent#event#)#{#}##void#targetFinished#(#BuildEvent#event#)#{#}##void#targetStarted#(#BuildEvent#event#)#{#}##void#taskFinished#(#BuildEvent#event#)#{#if#(#!#failedTests#.#isEmpty#(#)#)#{#writeJavaClass#(#)#;#}#}##void#taskStarted#(#BuildEvent#event#)#{#}##