void#setReloading#(#boolean#value#)#{#reloading#=#value#;#}##void#setFiltertrace#(#boolean#value#)#{#this#.#filterTrace#=#value#;#}##void#setHaltonerror#(#boolean#value#)#{#this#.#haltOnError#=#value#;#}##void#setErrorProperty#(#String#propertyName#)#{#this#.#errorProperty#=#propertyName#;#}##void#setHaltonfailure#(#boolean#value#)#{#this#.#haltOnFail#=#value#;#}##void#setFailureProperty#(#String#propertyName#)#{#this#.#failureProperty#=#propertyName#;#}##void#setFork#(#boolean#value#)#{#this#.#fork#=#value#;#}##void#setForkMode#(#ForkMode#mode#)#{#this#.#forkMode#=#mode#;#}##void#setPrintsummary#(#SummaryAttribute#value#)#{#summaryValue#=#value#.#getValue#(#)#;#summary#=#value#.#asBoolean#(#)#;#}##String#[#]#getValues#(#)#{#return#new#String#[#]#{#"true"#,#"yes"#,#"false"#,#"no"#,#"on"#,#"off"#,#"withOutAndErr"#}#;#}##boolean#asBoolean#(#)#{#String#v#=#getValue#(#)#;#return#"true"#.#equals#(#v#)#||#"on"#.#equals#(#v#)#||#"yes"#.#equals#(#v#)#||#"withOutAndErr"#.#equals#(#v#)#;#}##void#setTimeout#(#Integer#value#)#{#timeout#=#value#;#}##void#setMaxmemory#(#String#max#)#{#getCommandline#(#)#.#setMaxmemory#(#max#)#;#}##void#setJvm#(#String#value#)#{#getCommandline#(#)#.#setVm#(#value#)#;#}##Commandline#.#Argument#createJvmarg#(#)#{#return#getCommandline#(#)#.#createVmArgument#(#)#;#}##void#setDir#(#File#dir#)#{#this#.#dir#=#dir#;#}##void#addSysproperty#(#Environment#.#Variable#sysp#)#{#getCommandline#(#)#.#addSysproperty#(#sysp#)#;#}##void#addConfiguredSysproperty#(#Environment#.#Variable#sysp#)#{#// get a build exception if there is a missing key or value#// see bugzilla report 21684#String#testString#=#sysp#.#getContent#(#)#;#getProject#(#)#.#log#(#"sysproperty added : "#+#testString#,#Project#.#MSG_DEBUG#)#;#getCommandline#(#)#.#addSysproperty#(#sysp#)#;#}##void#addSyspropertyset#(#PropertySet#sysp#)#{#getCommandline#(#)#.#addSyspropertyset#(#sysp#)#;#}##Path#createClasspath#(#)#{#return#getCommandline#(#)#.#createClasspath#(#getProject#(#)#)#.#createPath#(#)#;#}##Path#createBootclasspath#(#)#{#return#getCommandline#(#)#.#createBootclasspath#(#getProject#(#)#)#.#createPath#(#)#;#}##void#addEnv#(#Environment#.#Variable#var#)#{#env#.#addVariable#(#var#)#;#}##void#setNewenvironment#(#boolean#newenv#)#{#newEnvironment#=#newenv#;#}##void#preConfigure#(#BaseTest#test#)#{#test#.#setFiltertrace#(#filterTrace#)#;#test#.#setHaltonerror#(#haltOnError#)#;#if#(#errorProperty#!=#null#)#{#test#.#setErrorProperty#(#errorProperty#)#;#}#test#.#setHaltonfailure#(#haltOnFail#)#;#if#(#failureProperty#!=#null#)#{#test#.#setFailureProperty#(#failureProperty#)#;#}#test#.#setFork#(#fork#)#;#}##void#addTest#(#JUnitTest#test#)#{#tests#.#addElement#(#test#)#;#preConfigure#(#test#)#;#}##BatchTest#createBatchTest#(#)#{#BatchTest#test#=#new#BatchTest#(#getProject#(#)#)#;#batchTests#.#addElement#(#test#)#;#preConfigure#(#test#)#;#return#test#;#}##void#addFormatter#(#FormatterElement#fe#)#{#formatters#.#addElement#(#fe#)#;#}##void#setIncludeantruntime#(#boolean#b#)#{#includeAntRuntime#=#b#;#}##void#setShowOutput#(#boolean#showOutput#)#{#this#.#showOutput#=#showOutput#;#}##void#setOutputToFormatters#(#boolean#outputToFormatters#)#{#this#.#outputToFormatters#=#outputToFormatters#;#}##void#setLogFailedTests#(#boolean#logFailedTests#)#{#this#.#logFailedTests#=#logFailedTests#;#}##void#addAssertions#(#Assertions#asserts#)#{#if#(#getCommandline#(#)#.#getAssertions#(#)#!=#null#)#{#throw#new#BuildException#(#"Only one assertion declaration is allowed"#)#;#}#getCommandline#(#)#.#setAssertions#(#asserts#)#;#}##Permissions#createPermissions#(#)#{#if#(#perm#==#null#)#{#perm#=#new#Permissions#(#)#;#}#return#perm#;#}##void#setCloneVm#(#boolean#cloneVm#)#{#getCommandline#(#)#.#setCloneVm#(#cloneVm#)#;#}##void#setTempdir#(#File#tmpDir#)#{#if#(#tmpDir#!=#null#)#{#if#(#!#tmpDir#.#exists#(#)#||#!#tmpDir#.#isDirectory#(#)#)#{#throw#new#BuildException#(#tmpDir#.#toString#(#)#+#" is not a valid temp directory"#)#;#}#}#this#.#tmpDir#=#tmpDir#;#}##void#init#(#)#{#antRuntimeClasses#=#new#Path#(#getProject#(#)#)#;#splitJunit#=#!#addClasspathResource#(#"/junit/framework/TestCase.class"#)#;#addClasspathEntry#(#"/org/apache/tools/ant/launch/AntMain.class"#)#;#addClasspathEntry#(#"/org/apache/tools/ant/Task.class"#)#;#addClasspathEntry#(#"/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.class"#)#;#}##JUnitTaskMirror#createMirror#(#JUnitTask#task#,#ClassLoader#loader#)#{#try#{#loader#.#loadClass#(#"junit.framework.Test"#)#;#// sanity check#}#catch#(#ClassNotFoundException#e#)#{#throw#new#BuildException#(#"The <classpath> for <junit> must include junit.jar "#+#"if not in Ant's own classpath"#,#e#,#task#.#getLocation#(#)#)#;#}#try#{#Class#c#=#loader#.#loadClass#(#JUnitTaskMirror#.#class#.#getName#(#)#+#"Impl"#)#;#if#(#c#.#getClassLoader#(#)#!=#loader#)#{#throw#new#BuildException#(#"Overdelegating loader"#,#task#.#getLocation#(#)#)#;#}#Constructor#cons#=#c#.#getConstructor#(#new#Class#[#]#{#JUnitTask#.#class#}#)#;#return#(#JUnitTaskMirror#)#cons#.#newInstance#(#new#Object#[#]#{#task#}#)#;#}#catch#(#Exception#e#)#{#throw#new#BuildException#(#e#,#task#.#getLocation#(#)#)#;#}#}##void#setupJUnitDelegate#(#)#{#ClassLoader#myLoader#=#JUnitTask#.#class#.#getClassLoader#(#)#;#if#(#splitJunit#)#{#Path#path#=#new#Path#(#getProject#(#)#)#;#path#.#add#(#antRuntimeClasses#)#;#Path#extra#=#getCommandline#(#)#.#getClasspath#(#)#;#if#(#extra#!=#null#)#{#path#.#add#(#extra#)#;#}#mirrorLoader#=#new#SplitClassLoader#(#myLoader#,#path#,#getProject#(#)#,#new#String#[#]#{#"BriefJUnitResultFormatter"#,#"JUnitResultFormatter"#,#"JUnitTaskMirrorImpl"#,#"JUnitTestRunner"#,#"JUnitVersionHelper"#,#"OutErrSummaryJUnitResultFormatter"#,#"PlainJUnitResultFormatter"#,#"SummaryJUnitResultFormatter"#,#"TearDownOnVmCrash"#,#"XMLJUnitResultFormatter"#,#}#)#;#}#else#{#mirrorLoader#=#myLoader#;#}#delegate#=#createMirror#(#this#,#mirrorLoader#)#;#}##void#execute#(#)#throws#BuildException#{#setupJUnitDelegate#(#)#;#List#testLists#=#new#ArrayList#(#)#;#boolean#forkPerTest#=#forkMode#.#getValue#(#)#.#equals#(#ForkMode#.#PER_TEST#)#;#if#(#forkPerTest#||#forkMode#.#getValue#(#)#.#equals#(#ForkMode#.#ONCE#)#)#{#testLists#.#addAll#(#executeOrQueue#(#getIndividualTests#(#)#,#forkPerTest#)#)#;#}#else#{#/* forkMode.getValue().equals(ForkMode.PER_BATCH) */#final#int#count#=#batchTests#.#size#(#)#;#for#(#int#i#=#0#;#i#<#count#;#i#++#)#{#BatchTest#batchtest#=#(#BatchTest#)#batchTests#.#elementAt#(#i#)#;#testLists#.#addAll#(#executeOrQueue#(#batchtest#.#elements#(#)#,#false#)#)#;#}#testLists#.#addAll#(#executeOrQueue#(#tests#.#elements#(#)#,#forkPerTest#)#)#;#}#try#{#Iterator#iter#=#testLists#.#iterator#(#)#;#while#(#iter#.#hasNext#(#)#)#{#List#l#=#(#List#)#iter#.#next#(#)#;#if#(#l#.#size#(#)#==#1#)#{#execute#(#(#JUnitTest#)#l#.#get#(#0#)#)#;#}#else#{#execute#(#l#)#;#}#}#}#finally#{#cleanup#(#)#;#}#}##void#execute#(#JUnitTest#arg#)#throws#BuildException#{#JUnitTest#test#=#(#JUnitTest#)#arg#.#clone#(#)#;#// set the default values if not specified#//@todo should be moved to the test class instead.#if#(#test#.#getTodir#(#)#==#null#)#{#test#.#setTodir#(#getProject#(#)#.#resolveFile#(#"."#)#)#;#}#if#(#test#.#getOutfile#(#)#==#null#)#{#test#.#setOutfile#(#"TEST-"#+#test#.#getName#(#)#)#;#}#// execute the test and get the return code#TestResultHolder#result#=#null#;#if#(#!#test#.#getFork#(#)#)#{#result#=#executeInVM#(#test#)#;#}#else#{#ExecuteWatchdog#watchdog#=#createWatchdog#(#)#;#result#=#executeAsForked#(#test#,#watchdog#,#null#)#;#// null watchdog means no timeout, you'd better not check with null#}#actOnTestResult#(#result#,#test#,#"Test "#+#test#.#getName#(#)#)#;#}##void#execute#(#List#testList#)#throws#BuildException#{#JUnitTest#test#=#null#;#// Create a temporary file to pass the test cases to run to#// the runner (one test case per line)#File#casesFile#=#createTempPropertiesFile#(#"junittestcases"#)#;#BufferedWriter#writer#=#null#;#try#{#writer#=#new#BufferedWriter#(#new#FileWriter#(#casesFile#)#)#;#log#(#"Creating casesfile '"#+#casesFile#.#getAbsolutePath#(#)#+#"' with content: "#,#Project#.#MSG_VERBOSE#)#;#PrintStream#logWriter#=#new#PrintStream#(#new#LogOutputStream#(#this#,#Project#.#MSG_VERBOSE#)#)#;#Iterator#iter#=#testList#.#iterator#(#)#;#while#(#iter#.#hasNext#(#)#)#{#test#=#(#JUnitTest#)#iter#.#next#(#)#;#printDual#(#writer#,#logWriter#,#test#.#getName#(#)#)#;#if#(#test#.#getTodir#(#)#==#null#)#{#printDual#(#writer#,#logWriter#,#","#+#getProject#(#)#.#resolveFile#(#"."#)#)#;#}#else#{#printDual#(#writer#,#logWriter#,#","#+#test#.#getTodir#(#)#)#;#}#if#(#test#.#getOutfile#(#)#==#null#)#{#printlnDual#(#writer#,#logWriter#,#","#+#"TEST-"#+#test#.#getName#(#)#)#;#}#else#{#printlnDual#(#writer#,#logWriter#,#","#+#test#.#getOutfile#(#)#)#;#}#}#writer#.#flush#(#)#;#writer#.#close#(#)#;#writer#=#null#;#// execute the test and get the return code#ExecuteWatchdog#watchdog#=#createWatchdog#(#)#;#TestResultHolder#result#=#executeAsForked#(#test#,#watchdog#,#casesFile#)#;#actOnTestResult#(#result#,#test#,#"Tests"#)#;#}#catch#(#IOException#e#)#{#log#(#e#.#toString#(#)#,#Project#.#MSG_ERR#)#;#throw#new#BuildException#(#e#)#;#}#finally#{#FILE_UTILS#.#close#(#writer#)#;#try#{#casesFile#.#delete#(#)#;#}#catch#(#Exception#e#)#{#log#(#e#.#toString#(#)#,#Project#.#MSG_ERR#)#;#}#}#}##TestResultHolder#executeAsForked#(#JUnitTest#test#,#ExecuteWatchdog#watchdog#,#File#casesFile#)#throws#BuildException#{#if#(#perm#!=#null#)#{#log#(#"Permissions ignored when running in forked mode!"#,#Project#.#MSG_WARN#)#;#}#CommandlineJava#cmd#;#try#{#cmd#=#(#CommandlineJava#)#(#getCommandline#(#)#.#clone#(#)#)#;#}#catch#(#CloneNotSupportedException#e#)#{#throw#new#BuildException#(#"This shouldn't happen"#,#e#,#getLocation#(#)#)#;#}#cmd#.#setClassname#(#"org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner"#)#;#if#(#casesFile#==#null#)#{#cmd#.#createArgument#(#)#.#setValue#(#test#.#getName#(#)#)#;#}#else#{#log#(#"Running multiple tests in the same VM"#,#Project#.#MSG_VERBOSE#)#;#cmd#.#createArgument#(#)#.#setValue#(#Constants#.#TESTSFILE#+#casesFile#)#;#}#cmd#.#createArgument#(#)#.#setValue#(#Constants#.#FILTERTRACE#+#test#.#getFiltertrace#(#)#)#;#cmd#.#createArgument#(#)#.#setValue#(#Constants#.#HALT_ON_ERROR#+#test#.#getHaltonerror#(#)#)#;#cmd#.#createArgument#(#)#.#setValue#(#Constants#.#HALT_ON_FAILURE#+#test#.#getHaltonfailure#(#)#)#;#checkIncludeAntRuntime#(#cmd#)#;#checkIncludeSummary#(#cmd#)#;#cmd#.#createArgument#(#)#.#setValue#(#Constants#.#SHOWOUTPUT#+#String#.#valueOf#(#showOutput#)#)#;#cmd#.#createArgument#(#)#.#setValue#(#Constants#.#OUTPUT_TO_FORMATTERS#+#String#.#valueOf#(#outputToFormatters#)#)#;#cmd#.#createArgument#(#)#.#setValue#(#Constants#.#LOG_FAILED_TESTS#+#String#.#valueOf#(#logFailedTests#)#)#;#cmd#.#createArgument#(#)#.#setValue#(#Constants#.#LOGTESTLISTENEREVENTS#+#"true"#)#;#// #31885#StringBuffer#formatterArg#=#new#StringBuffer#(#STRING_BUFFER_SIZE#)#;#final#FormatterElement#[#]#feArray#=#mergeFormatters#(#test#)#;#for#(#int#i#=#0#;#i#<#feArray#.#length#;#i#++#)#{#FormatterElement#fe#=#feArray#[#i#]#;#if#(#fe#.#shouldUse#(#this#)#)#{#formatterArg#.#append#(#Constants#.#FORMATTER#)#;#formatterArg#.#append#(#fe#.#getClassname#(#)#)#;#File#outFile#=#getOutput#(#fe#,#test#)#;#if#(#outFile#!=#null#)#{#formatterArg#.#append#(#","#)#;#formatterArg#.#append#(#outFile#)#;#}#cmd#.#createArgument#(#)#.#setValue#(#formatterArg#.#toString#(#)#)#;#formatterArg#=#new#StringBuffer#(#)#;#}#}#File#vmWatcher#=#createTempPropertiesFile#(#"junitvmwatcher"#)#;#cmd#.#createArgument#(#)#.#setValue#(#Constants#.#CRASHFILE#+#vmWatcher#.#getAbsolutePath#(#)#)#;#File#propsFile#=#createTempPropertiesFile#(#"junit"#)#;#cmd#.#createArgument#(#)#.#setValue#(#Constants#.#PROPSFILE#+#propsFile#.#getAbsolutePath#(#)#)#;#Hashtable#p#=#getProject#(#)#.#getProperties#(#)#;#Properties#props#=#new#Properties#(#)#;#for#(#Enumeration#e#=#p#.#keys#(#)#;#e#.#hasMoreElements#(#)#;#)#{#Object#key#=#e#.#nextElement#(#)#;#props#.#put#(#key#,#p#.#get#(#key#)#)#;#}#try#{#FileOutputStream#outstream#=#new#FileOutputStream#(#propsFile#)#;#props#.#store#(#outstream#,#"Ant JUnitTask generated properties file"#)#;#outstream#.#close#(#)#;#}#catch#(#java#.#io#.#IOException#e#)#{#propsFile#.#delete#(#)#;#throw#new#BuildException#(#"Error creating temporary properties "#+#"file."#,#e#,#getLocation#(#)#)#;#}#Execute#execute#=#new#Execute#(#new#JUnitLogStreamHandler#(#this#,#Project#.#MSG_INFO#,#Project#.#MSG_WARN#)#,#watchdog#)#;#execute#.#setCommandline#(#cmd#.#getCommandline#(#)#)#;#execute#.#setAntRun#(#getProject#(#)#)#;#if#(#dir#!=#null#)#{#execute#.#setWorkingDirectory#(#dir#)#;#}#String#[#]#environment#=#env#.#getVariables#(#)#;#if#(#environment#!=#null#)#{#for#(#int#i#=#0#;#i#<#environment#.#length#;#i#++#)#{#log#(#"Setting environment variable: "#+#environment#[#i#]#,#Project#.#MSG_VERBOSE#)#;#}#}#execute#.#setNewenvironment#(#newEnvironment#)#;#execute#.#setEnvironment#(#environment#)#;#log#(#cmd#.#describeCommand#(#)#,#Project#.#MSG_VERBOSE#)#;#checkForkedPath#(#cmd#)#;#TestResultHolder#result#=#new#TestResultHolder#(#)#;#try#{#result#.#exitCode#=#execute#.#execute#(#)#;#}#catch#(#IOException#e#)#{#throw#new#BuildException#(#"Process fork failed."#,#e#,#getLocation#(#)#)#;#}#finally#{#String#vmCrashString#=#"unknown"#;#BufferedReader#br#=#null#;#try#{#if#(#vmWatcher#.#exists#(#)#)#{#br#=#new#BufferedReader#(#new#FileReader#(#vmWatcher#)#)#;#vmCrashString#=#br#.#readLine#(#)#;#}#else#{#vmCrashString#=#"Monitor file ("#+#vmWatcher#.#getAbsolutePath#(#)#+#") missing, location not writable,"#+#" testcase not started or mixing ant versions?"#;#}#}#catch#(#Exception#e#)#{#e#.#printStackTrace#(#)#;#// ignored.#}#finally#{#FileUtils#.#close#(#br#)#;#if#(#vmWatcher#.#exists#(#)#)#{#vmWatcher#.#delete#(#)#;#}#}#boolean#crash#=#(#watchdog#!=#null#&&#watchdog#.#killedProcess#(#)#)#||#!#Constants#.#TERMINATED_SUCCESSFULLY#.#equals#(#vmCrashString#)#;#if#(#casesFile#!=#null#&&#crash#)#{#test#=#createDummyTestForBatchTest#(#test#)#;#}#if#(#watchdog#!=#null#&&#watchdog#.#killedProcess#(#)#)#{#result#.#timedOut#=#true#;#logTimeout#(#feArray#,#test#,#vmCrashString#)#;#}#else#if#(#crash#)#{#result#.#crashed#=#true#;#logVmCrash#(#feArray#,#test#,#vmCrashString#)#;#}#if#(#!#propsFile#.#delete#(#)#)#{#throw#new#BuildException#(#"Could not delete temporary "#+#"properties file."#)#;#}#}#return#result#;#}##void#checkIncludeAntRuntime#(#CommandlineJava#cmd#)#{#if#(#includeAntRuntime#)#{#Vector#v#=#Execute#.#getProcEnvironment#(#)#;#Enumeration#e#=#v#.#elements#(#)#;#while#(#e#.#hasMoreElements#(#)#)#{#String#s#=#(#String#)#e#.#nextElement#(#)#;#if#(#s#.#startsWith#(#CLASSPATH#)#)#{#cmd#.#createClasspath#(#getProject#(#)#)#.#createPath#(#)#.#append#(#new#Path#(#getProject#(#)#,#s#.#substring#(#CLASSPATH#.#length#(#)#)#)#)#;#}#}#log#(#"Implicitly adding "#+#antRuntimeClasses#+#" to CLASSPATH"#,#Project#.#MSG_VERBOSE#)#;#cmd#.#createClasspath#(#getProject#(#)#)#.#createPath#(#)#.#append#(#antRuntimeClasses#)#;#}#}##boolean#equalsWithOutAndErr#(#String#summaryOption#)#{#return#summaryOption#!=#null#&&#"withoutanderr"#.#equals#(#summaryOption#.#toLowerCase#(#Locale#.#ENGLISH#)#)#;#}##void#checkIncludeSummary#(#CommandlineJava#cmd#)#{#if#(#summary#)#{#String#prefix#=#""#;#if#(#equalsWithOutAndErr#(#summaryValue#)#)#{#prefix#=#"OutErr"#;#}#cmd#.#createArgument#(#)#.#setValue#(#Constants#.#FORMATTER#+#"org.apache.tools.ant.taskdefs.optional.junit."#+#prefix#+#"SummaryJUnitResultFormatter"#)#;#}#}##void#checkForkedPath#(#CommandlineJava#cmd#)#{#if#(#forkedPathChecked#)#{#return#;#}#forkedPathChecked#=#true#;#if#(#!#cmd#.#haveClasspath#(#)#)#{#return#;#}#AntClassLoader#loader#=#null#;#try#{#loader#=#AntClassLoader#.#newAntClassLoader#(#null#,#getProject#(#)#,#cmd#.#createClasspath#(#getProject#(#)#)#,#true#)#;#String#projectResourceName#=#LoaderUtils#.#classNameToResource#(#Project#.#class#.#getName#(#)#)#;#URL#previous#=#null#;#try#{#for#(#Enumeration#e#=#loader#.#getResources#(#projectResourceName#)#;#e#.#hasMoreElements#(#)#;#)#{#URL#current#=#(#URL#)#e#.#nextElement#(#)#;#if#(#previous#!=#null#&&#!#current#.#equals#(#previous#)#)#{#log#(#"WARNING: multiple versions of ant detected "#+#"in path for junit "#+#LINE_SEP#+#"         "#+#previous#+#LINE_SEP#+#"     and "#+#current#,#Project#.#MSG_WARN#)#;#return#;#}#previous#=#current#;#}#}#catch#(#Exception#ex#)#{#// Ignore exception#}#}#finally#{#if#(#loader#!=#null#)#{#loader#.#cleanup#(#)#;#}#}#}##File#createTempPropertiesFile#(#String#prefix#)#{#File#propsFile#=#FILE_UTILS#.#createTempFile#(#prefix#,#".properties"#,#tmpDir#!=#null#?#tmpDir#:#getProject#(#)#.#getBaseDir#(#)#,#true#,#true#)#;#return#propsFile#;#}##void#handleOutput#(#String#output#)#{#if#(#output#.#startsWith#(#TESTLISTENER_PREFIX#)#)#{#log#(#output#,#Project#.#MSG_VERBOSE#)#;#}#else#if#(#runner#!=#null#)#{#if#(#outputToFormatters#)#{#runner#.#handleOutput#(#output#)#;#}#if#(#showOutput#)#{#super#.#handleOutput#(#output#)#;#}#}#else#{#super#.#handleOutput#(#output#)#;#}#}##int#handleInput#(#byte#[#]#buffer#,#int#offset#,#int#length#)#throws#IOException#{#if#(#runner#!=#null#)#{#return#runner#.#handleInput#(#buffer#,#offset#,#length#)#;#}#else#{#return#super#.#handleInput#(#buffer#,#offset#,#length#)#;#}#}##void#handleFlush#(#String#output#)#{#if#(#runner#!=#null#)#{#runner#.#handleFlush#(#output#)#;#if#(#showOutput#)#{#super#.#handleFlush#(#output#)#;#}#}#else#{#super#.#handleFlush#(#output#)#;#}#}##void#handleErrorOutput#(#String#output#)#{#if#(#runner#!=#null#)#{#runner#.#handleErrorOutput#(#output#)#;#if#(#showOutput#)#{#super#.#handleErrorOutput#(#output#)#;#}#}#else#{#super#.#handleErrorOutput#(#output#)#;#}#}##void#handleErrorFlush#(#String#output#)#{#if#(#runner#!=#null#)#{#runner#.#handleErrorFlush#(#output#)#;#if#(#showOutput#)#{#super#.#handleErrorFlush#(#output#)#;#}#}#else#{#super#.#handleErrorFlush#(#output#)#;#}#}##TestResultHolder#executeInVM#(#JUnitTest#arg#)#throws#BuildException#{#if#(#delegate#==#null#)#{#setupJUnitDelegate#(#)#;#}#JUnitTest#test#=#(#JUnitTest#)#arg#.#clone#(#)#;#test#.#setProperties#(#getProject#(#)#.#getProperties#(#)#)#;#if#(#dir#!=#null#)#{#log#(#"dir attribute ignored if running in the same VM"#,#Project#.#MSG_WARN#)#;#}#if#(#newEnvironment#||#null#!=#env#.#getVariables#(#)#)#{#log#(#"Changes to environment variables are ignored if running in "#+#"the same VM."#,#Project#.#MSG_WARN#)#;#}#if#(#getCommandline#(#)#.#getBootclasspath#(#)#!=#null#)#{#log#(#"bootclasspath is ignored if running in the same VM."#,#Project#.#MSG_WARN#)#;#}#CommandlineJava#.#SysProperties#sysProperties#=#getCommandline#(#)#.#getSystemProperties#(#)#;#if#(#sysProperties#!=#null#)#{#sysProperties#.#setSystem#(#)#;#}#try#{#log#(#"Using System properties "#+#System#.#getProperties#(#)#,#Project#.#MSG_VERBOSE#)#;#if#(#splitJunit#)#{#classLoader#=#(#AntClassLoader#)#delegate#.#getClass#(#)#.#getClassLoader#(#)#;#}#else#{#createClassLoader#(#)#;#}#if#(#classLoader#!=#null#)#{#classLoader#.#setThreadContextLoader#(#)#;#}#runner#=#delegate#.#newJUnitTestRunner#(#test#,#test#.#getHaltonerror#(#)#,#test#.#getFiltertrace#(#)#,#test#.#getHaltonfailure#(#)#,#false#,#true#,#classLoader#)#;#if#(#summary#)#{#JUnitTaskMirror#.#SummaryJUnitResultFormatterMirror#f#=#delegate#.#newSummaryJUnitResultFormatter#(#)#;#f#.#setWithOutAndErr#(#equalsWithOutAndErr#(#summaryValue#)#)#;#f#.#setOutput#(#getDefaultOutput#(#)#)#;#runner#.#addFormatter#(#f#)#;#}#runner#.#setPermissions#(#perm#)#;#final#FormatterElement#[#]#feArray#=#mergeFormatters#(#test#)#;#for#(#int#i#=#0#;#i#<#feArray#.#length#;#i#++#)#{#FormatterElement#fe#=#feArray#[#i#]#;#if#(#fe#.#shouldUse#(#this#)#)#{#File#outFile#=#getOutput#(#fe#,#test#)#;#if#(#outFile#!=#null#)#{#fe#.#setOutfile#(#outFile#)#;#}#else#{#fe#.#setOutput#(#getDefaultOutput#(#)#)#;#}#runner#.#addFormatter#(#fe#.#createFormatter#(#classLoader#)#)#;#}#}#runner#.#run#(#)#;#TestResultHolder#result#=#new#TestResultHolder#(#)#;#result#.#exitCode#=#runner#.#getRetCode#(#)#;#return#result#;#}#finally#{#if#(#sysProperties#!=#null#)#{#sysProperties#.#restoreSystem#(#)#;#}#if#(#classLoader#!=#null#)#{#classLoader#.#resetThreadContextLoader#(#)#;#}#}#}##ExecuteWatchdog#createWatchdog#(#)#throws#BuildException#{#if#(#timeout#==#null#)#{#return#null#;#}#return#new#ExecuteWatchdog#(#(#long#)#timeout#.#intValue#(#)#)#;#}##OutputStream#getDefaultOutput#(#)#{#return#new#LogOutputStream#(#this#,#Project#.#MSG_INFO#)#;#}##Enumeration#getIndividualTests#(#)#{#final#int#count#=#batchTests#.#size#(#)#;#final#Enumeration#[#]#enums#=#new#Enumeration#[#count#+#1#]#;#for#(#int#i#=#0#;#i#<#count#;#i#++#)#{#BatchTest#batchtest#=#(#BatchTest#)#batchTests#.#elementAt#(#i#)#;#enums#[#i#]#=#batchtest#.#elements#(#)#;#}#enums#[#enums#.#length#-#1#]#=#tests#.#elements#(#)#;#return#Enumerations#.#fromCompound#(#enums#)#;#}##Enumeration#allTests#(#)#{#Enumeration#[#]#enums#=#{#tests#.#elements#(#)#,#batchTests#.#elements#(#)#}#;#return#Enumerations#.#fromCompound#(#enums#)#;#}##FormatterElement#[#]#mergeFormatters#(#JUnitTest#test#)#{#Vector#feVector#=#(#Vector#)#formatters#.#clone#(#)#;#test#.#addFormattersTo#(#feVector#)#;#FormatterElement#[#]#feArray#=#new#FormatterElement#[#feVector#.#size#(#)#]#;#feVector#.#copyInto#(#feArray#)#;#return#feArray#;#}##File#getOutput#(#FormatterElement#fe#,#JUnitTest#test#)#{#if#(#fe#.#getUseFile#(#)#)#{#String#base#=#test#.#getOutfile#(#)#;#if#(#base#==#null#)#{#base#=#JUnitTaskMirror#.#JUnitTestRunnerMirror#.#IGNORED_FILE_NAME#;#}#String#filename#=#base#+#fe#.#getExtension#(#)#;#File#destFile#=#new#File#(#test#.#getTodir#(#)#,#filename#)#;#String#absFilename#=#destFile#.#getAbsolutePath#(#)#;#return#getProject#(#)#.#resolveFile#(#absFilename#)#;#}#return#null#;#}##void#addClasspathEntry#(#String#resource#)#{#addClasspathResource#(#resource#)#;#}##boolean#addClasspathResource#(#String#resource#)#{#/*
         * pre Ant 1.6 this method used to call getClass().getResource
         * while Ant 1.6 will call ClassLoader.getResource().
         *
         * The difference is that Class.getResource expects a leading
         * slash for "absolute" resources and will strip it before
         * delegating to ClassLoader.getResource - so we now have to
         * emulate Class's behavior.
         */#if#(#resource#.#startsWith#(#"/"#)#)#{#resource#=#resource#.#substring#(#1#)#;#}#else#{#resource#=#"org/apache/tools/ant/taskdefs/optional/junit/"#+#resource#;#}#File#f#=#LoaderUtils#.#getResourceSource#(#getClass#(#)#.#getClassLoader#(#)#,#resource#)#;#if#(#f#!=#null#)#{#log#(#"Found "#+#f#.#getAbsolutePath#(#)#,#Project#.#MSG_DEBUG#)#;#antRuntimeClasses#.#createPath#(#)#.#setLocation#(#f#)#;#return#true#;#}#else#{#log#(#"Couldn\'t find "#+#resource#,#Project#.#MSG_DEBUG#)#;#return#false#;#}#}##void#logTimeout#(#FormatterElement#[#]#feArray#,#JUnitTest#test#,#String#testCase#)#{#logVmExit#(#feArray#,#test#,#TIMEOUT_MESSAGE#,#testCase#)#;#}##void#logVmCrash#(#FormatterElement#[#]#feArray#,#JUnitTest#test#,#String#testCase#)#{#logVmExit#(#feArray#,#test#,#"Forked Java VM exited abnormally. Please note the time in the report"#+#" does not reflect the time until the VM exit."#,#testCase#)#;#}##void#logVmExit#(#FormatterElement#[#]#feArray#,#JUnitTest#test#,#String#message#,#String#testCase#)#{#if#(#delegate#==#null#)#{#setupJUnitDelegate#(#)#;#}#try#{#log#(#"Using System properties "#+#System#.#getProperties#(#)#,#Project#.#MSG_VERBOSE#)#;#if#(#splitJunit#)#{#classLoader#=#(#AntClassLoader#)#delegate#.#getClass#(#)#.#getClassLoader#(#)#;#}#else#{#createClassLoader#(#)#;#}#if#(#classLoader#!=#null#)#{#classLoader#.#setThreadContextLoader#(#)#;#}#test#.#setCounts#(#1#,#0#,#1#)#;#test#.#setProperties#(#getProject#(#)#.#getProperties#(#)#)#;#for#(#int#i#=#0#;#i#<#feArray#.#length#;#i#++#)#{#FormatterElement#fe#=#feArray#[#i#]#;#if#(#fe#.#shouldUse#(#this#)#)#{#JUnitTaskMirror#.#JUnitResultFormatterMirror#formatter#=#fe#.#createFormatter#(#classLoader#)#;#if#(#formatter#!=#null#)#{#OutputStream#out#=#null#;#File#outFile#=#getOutput#(#fe#,#test#)#;#if#(#outFile#!=#null#)#{#try#{#out#=#new#FileOutputStream#(#outFile#)#;#}#catch#(#IOException#e#)#{#// ignore#}#}#if#(#out#==#null#)#{#out#=#getDefaultOutput#(#)#;#}#delegate#.#addVmExit#(#test#,#formatter#,#out#,#message#,#testCase#)#;#}#}#}#if#(#summary#)#{#JUnitTaskMirror#.#SummaryJUnitResultFormatterMirror#f#=#delegate#.#newSummaryJUnitResultFormatter#(#)#;#f#.#setWithOutAndErr#(#"withoutanderr"#.#equalsIgnoreCase#(#summaryValue#)#)#;#delegate#.#addVmExit#(#test#,#f#,#getDefaultOutput#(#)#,#message#,#testCase#)#;#}#}#finally#{#if#(#classLoader#!=#null#)#{#classLoader#.#resetThreadContextLoader#(#)#;#}#}#}##void#createClassLoader#(#)#{#Path#userClasspath#=#getCommandline#(#)#.#getClasspath#(#)#;#if#(#userClasspath#!=#null#)#{#if#(#reloading#||#classLoader#==#null#)#{#deleteClassLoader#(#)#;#Path#classpath#=#(#Path#)#userClasspath#.#clone#(#)#;#if#(#includeAntRuntime#)#{#log#(#"Implicitly adding "#+#antRuntimeClasses#+#" to CLASSPATH"#,#Project#.#MSG_VERBOSE#)#;#classpath#.#append#(#antRuntimeClasses#)#;#}#classLoader#=#getProject#(#)#.#createClassLoader#(#classpath#)#;#if#(#getClass#(#)#.#getClassLoader#(#)#!=#null#&&#getClass#(#)#.#getClassLoader#(#)#!=#Project#.#class#.#getClassLoader#(#)#)#{#classLoader#.#setParent#(#getClass#(#)#.#getClassLoader#(#)#)#;#}#classLoader#.#setParentFirst#(#false#)#;#classLoader#.#addJavaLibraries#(#)#;#log#(#"Using CLASSPATH "#+#classLoader#.#getClasspath#(#)#,#Project#.#MSG_VERBOSE#)#;#// make sure the test will be accepted as a TestCase#classLoader#.#addSystemPackageRoot#(#"junit"#)#;#// make sure the test annotation are accepted#classLoader#.#addSystemPackageRoot#(#"org.junit"#)#;#// will cause trouble in JDK 1.1 if omitted#classLoader#.#addSystemPackageRoot#(#"org.apache.tools.ant"#)#;#}#}#}##void#cleanup#(#)#{#deleteClassLoader#(#)#;#delegate#=#null#;#}##void#deleteClassLoader#(#)#{#if#(#classLoader#!=#null#)#{#classLoader#.#cleanup#(#)#;#classLoader#=#null#;#}#if#(#mirrorLoader#instanceof#SplitClassLoader#)#{#(#(#SplitClassLoader#)#mirrorLoader#)#.#cleanup#(#)#;#}#mirrorLoader#=#null#;#}##CommandlineJava#getCommandline#(#)#{#if#(#commandline#==#null#)#{#commandline#=#new#CommandlineJava#(#)#;#}#return#commandline#;#}##boolean#equals#(#Object#other#)#{#if#(#other#==#null#||#other#.#getClass#(#)#!=#ForkedTestConfiguration#.#class#)#{#return#false#;#}#ForkedTestConfiguration#o#=#(#ForkedTestConfiguration#)#other#;#return#filterTrace#==#o#.#filterTrace#&&#haltOnError#==#o#.#haltOnError#&&#haltOnFailure#==#o#.#haltOnFailure#&&#(#(#errorProperty#==#null#&&#o#.#errorProperty#==#null#)#||#(#errorProperty#!=#null#&&#errorProperty#.#equals#(#o#.#errorProperty#)#)#)#&&#(#(#failureProperty#==#null#&&#o#.#failureProperty#==#null#)#||#(#failureProperty#!=#null#&&#failureProperty#.#equals#(#o#.#failureProperty#)#)#)#;#}##int#hashCode#(#)#{#// CheckStyle:MagicNumber OFF#return#(#filterTrace#?#1#:#0#)#+#(#haltOnError#?#2#:#0#)#+#(#haltOnFailure#?#4#:#0#)#;#// CheckStyle:MagicNumber ON#}##String#[#]#getValues#(#)#{#return#new#String#[#]#{#ONCE#,#PER_TEST#,#PER_BATCH#}#;#}##Collection#executeOrQueue#(#Enumeration#testList#,#boolean#runIndividual#)#{#Map#testConfigurations#=#new#HashMap#(#)#;#while#(#testList#.#hasMoreElements#(#)#)#{#JUnitTest#test#=#(#JUnitTest#)#testList#.#nextElement#(#)#;#if#(#test#.#shouldRun#(#getProject#(#)#)#)#{#if#(#runIndividual#||#!#test#.#getFork#(#)#)#{#execute#(#test#)#;#}#else#{#ForkedTestConfiguration#c#=#new#ForkedTestConfiguration#(#test#)#;#List#l#=#(#List#)#testConfigurations#.#get#(#c#)#;#if#(#l#==#null#)#{#l#=#new#ArrayList#(#)#;#testConfigurations#.#put#(#c#,#l#)#;#}#l#.#add#(#test#)#;#}#}#}#return#testConfigurations#.#values#(#)#;#}##void#actOnTestResult#(#int#exitValue#,#boolean#wasKilled#,#JUnitTest#test#,#String#name#)#{#TestResultHolder#t#=#new#TestResultHolder#(#)#;#t#.#exitCode#=#exitValue#;#t#.#timedOut#=#wasKilled#;#actOnTestResult#(#t#,#test#,#name#)#;#}##void#actOnTestResult#(#TestResultHolder#result#,#JUnitTest#test#,#String#name#)#{#// if there is an error/failure and that it should halt, stop#// everything otherwise just log a statement#boolean#fatal#=#result#.#timedOut#||#result#.#crashed#;#boolean#errorOccurredHere#=#result#.#exitCode#==#JUnitTaskMirror#.#JUnitTestRunnerMirror#.#ERRORS#||#fatal#;#boolean#failureOccurredHere#=#result#.#exitCode#!=#JUnitTaskMirror#.#JUnitTestRunnerMirror#.#SUCCESS#||#fatal#;#if#(#errorOccurredHere#||#failureOccurredHere#)#{#if#(#(#errorOccurredHere#&&#test#.#getHaltonerror#(#)#)#||#(#failureOccurredHere#&&#test#.#getHaltonfailure#(#)#)#)#{#throw#new#BuildException#(#name#+#" failed"#+#(#result#.#timedOut#?#" (timeout)"#:#""#)#+#(#result#.#crashed#?#" (crashed)"#:#""#)#,#getLocation#(#)#)#;#}#else#{#if#(#logFailedTests#)#{#log#(#name#+#" FAILED"#+#(#result#.#timedOut#?#" (timeout)"#:#""#)#+#(#result#.#crashed#?#" (crashed)"#:#""#)#,#Project#.#MSG_ERR#)#;#}#if#(#errorOccurredHere#&&#test#.#getErrorProperty#(#)#!=#null#)#{#getProject#(#)#.#setNewProperty#(#test#.#getErrorProperty#(#)#,#"true"#)#;#}#if#(#failureOccurredHere#&&#test#.#getFailureProperty#(#)#!=#null#)#{#getProject#(#)#.#setNewProperty#(#test#.#getFailureProperty#(#)#,#"true"#)#;#}#}#}#}##void#processLine#(#String#line#,#int#level#)#{#if#(#line#.#startsWith#(#TESTLISTENER_PREFIX#)#)#{#task#.#log#(#line#,#Project#.#MSG_VERBOSE#)#;#}#else#{#super#.#processLine#(#line#,#level#)#;#}#}##JUnitTest#createDummyTestForBatchTest#(#JUnitTest#test#)#{#JUnitTest#t#=#(#JUnitTest#)#test#.#clone#(#)#;#int#index#=#test#.#getName#(#)#.#indexOf#(#"."#)#;#// make sure test looks as if it was in the same "package" as#// the last test of the batch#String#pack#=#index#>#0#?#test#.#getName#(#)#.#substring#(#0#,#index#+#1#)#:#""#;#t#.#setName#(#pack#+#NAME_OF_DUMMY_TEST#)#;#return#t#;#}##void#printDual#(#BufferedWriter#w#,#PrintStream#s#,#String#text#)#throws#IOException#{#w#.#write#(#String#.#valueOf#(#text#)#)#;#s#.#print#(#text#)#;#}##void#printlnDual#(#BufferedWriter#w#,#PrintStream#s#,#String#text#)#throws#IOException#{#w#.#write#(#String#.#valueOf#(#text#)#)#;#w#.#newLine#(#)#;#s#.#println#(#text#)#;#}##