void#setCommand#(#String#command#)#{#this#.#command#=#command#;#}##void#setCommandResource#(#String#f#)#{#this#.#commandResource#=#new#FileResource#(#new#File#(#f#)#)#;#}##void#setTimeout#(#long#timeout#)#{#maxwait#=#timeout#;#}##void#setOutput#(#File#output#)#{#outputFile#=#output#;#}##void#setInput#(#File#input#)#{#inputFile#=#input#;#}##void#setInputProperty#(#String#inputProperty#)#{#this#.#inputProperty#=#inputProperty#;#}##void#setAppend#(#boolean#append#)#{#this#.#append#=#append#;#}##void#setOutputproperty#(#String#property#)#{#outputProperty#=#property#;#}##void#execute#(#)#throws#BuildException#{#if#(#getHost#(#)#==#null#)#{#throw#new#BuildException#(#"Host is required."#)#;#}#if#(#getUserInfo#(#)#.#getName#(#)#==#null#)#{#throw#new#BuildException#(#"Username is required."#)#;#}#if#(#getUserInfo#(#)#.#getKeyfile#(#)#==#null#&&#getUserInfo#(#)#.#getPassword#(#)#==#null#)#{#throw#new#BuildException#(#"Password or Keyfile is required."#)#;#}#if#(#command#==#null#&&#commandResource#==#null#)#{#throw#new#BuildException#(#"Command or commandResource is required."#)#;#}#if#(#inputFile#!=#null#&&#inputProperty#!=#null#)#{#throw#new#BuildException#(#"You can't specify both inputFile and"#+#" inputProperty."#)#;#}#if#(#inputFile#!=#null#&&#!#inputFile#.#exists#(#)#)#{#throw#new#BuildException#(#"The input file "#+#inputFile#.#getAbsolutePath#(#)#+#" does not exist."#)#;#}#Session#session#=#null#;#StringBuffer#output#=#new#StringBuffer#(#)#;#try#{#session#=#openSession#(#)#;#/* called once */#if#(#command#!=#null#)#{#log#(#"cmd : "#+#command#,#Project#.#MSG_INFO#)#;#executeCommand#(#session#,#command#,#output#)#;#}#else#{#// read command resource and execute for each command#try#{#BufferedReader#br#=#new#BufferedReader#(#new#InputStreamReader#(#commandResource#.#getInputStream#(#)#)#)#;#String#cmd#;#while#(#(#cmd#=#br#.#readLine#(#)#)#!=#null#)#{#log#(#"cmd : "#+#cmd#,#Project#.#MSG_INFO#)#;#output#.#append#(#cmd#)#.#append#(#" : "#)#;#executeCommand#(#session#,#cmd#,#output#)#;#output#.#append#(#"\n"#)#;#}#FileUtils#.#close#(#br#)#;#}#catch#(#IOException#e#)#{#if#(#getFailonerror#(#)#)#{#throw#new#BuildException#(#e#)#;#}#else#{#log#(#"Caught exception: "#+#e#.#getMessage#(#)#,#Project#.#MSG_ERR#)#;#}#}#}#}#catch#(#JSchException#e#)#{#if#(#getFailonerror#(#)#)#{#throw#new#BuildException#(#e#)#;#}#else#{#log#(#"Caught exception: "#+#e#.#getMessage#(#)#,#Project#.#MSG_ERR#)#;#}#}#finally#{#if#(#outputProperty#!=#null#)#{#getProject#(#)#.#setNewProperty#(#outputProperty#,#output#.#toString#(#)#)#;#}#if#(#session#!=#null#&&#session#.#isConnected#(#)#)#{#session#.#disconnect#(#)#;#}#}#}##void#executeCommand#(#Session#session#,#String#cmd#,#StringBuffer#sb#)#throws#BuildException#{#ByteArrayOutputStream#out#=#new#ByteArrayOutputStream#(#)#;#TeeOutputStream#tee#=#new#TeeOutputStream#(#out#,#KeepAliveOutputStream#.#wrapSystemOut#(#)#)#;#InputStream#istream#=#null#;#if#(#inputFile#!=#null#)#{#try#{#istream#=#new#FileInputStream#(#inputFile#)#;#}#catch#(#IOException#e#)#{#// because we checked the existence before, this one#// shouldn't happen What if the file exists, but there#// are no read permissions?#log#(#"Failed to read "#+#inputFile#+#" because of: "#+#e#.#getMessage#(#)#,#Project#.#MSG_WARN#)#;#}#}#if#(#inputProperty#!=#null#)#{#String#inputData#=#getProject#(#)#.#getProperty#(#inputProperty#)#;#if#(#inputData#!=#null#)#{#istream#=#new#ByteArrayInputStream#(#inputData#.#getBytes#(#)#)#;#}#}#try#{#final#ChannelExec#channel#;#session#.#setTimeout#(#(#int#)#maxwait#)#;#/* execute the command */#channel#=#(#ChannelExec#)#session#.#openChannel#(#"exec"#)#;#channel#.#setCommand#(#cmd#)#;#channel#.#setOutputStream#(#tee#)#;#channel#.#setExtOutputStream#(#tee#)#;#if#(#istream#!=#null#)#{#channel#.#setInputStream#(#istream#)#;#}#channel#.#connect#(#)#;#// wait for it to finish#thread#=#new#Thread#(#)#{#public#void#run#(#)#{#while#(#!#channel#.#isClosed#(#)#)#{#if#(#thread#==#null#)#{#return#;#}#try#{#sleep#(#RETRY_INTERVAL#)#;#}#catch#(#Exception#e#)#{#// ignored#}#}#}#}#;#thread#.#start#(#)#;#thread#.#join#(#maxwait#)#;#if#(#thread#.#isAlive#(#)#)#{#// ran out of time#thread#=#null#;#if#(#getFailonerror#(#)#)#{#throw#new#BuildException#(#TIMEOUT_MESSAGE#)#;#}#else#{#log#(#TIMEOUT_MESSAGE#,#Project#.#MSG_ERR#)#;#}#}#else#{#//success#if#(#outputFile#!=#null#)#{#writeToFile#(#out#.#toString#(#)#,#append#,#outputFile#)#;#}#// this is the wrong test if the remote OS is OpenVMS,#// but there doesn't seem to be a way to detect it.#int#ec#=#channel#.#getExitStatus#(#)#;#if#(#ec#!=#0#)#{#String#msg#=#"Remote command failed with exit status "#+#ec#;#if#(#getFailonerror#(#)#)#{#throw#new#BuildException#(#msg#)#;#}#else#{#log#(#msg#,#Project#.#MSG_ERR#)#;#}#}#}#}#catch#(#BuildException#e#)#{#throw#e#;#}#catch#(#JSchException#e#)#{#if#(#e#.#getMessage#(#)#.#indexOf#(#"session is down"#)#>=#0#)#{#if#(#getFailonerror#(#)#)#{#throw#new#BuildException#(#TIMEOUT_MESSAGE#,#e#)#;#}#else#{#log#(#TIMEOUT_MESSAGE#,#Project#.#MSG_ERR#)#;#}#}#else#{#if#(#getFailonerror#(#)#)#{#throw#new#BuildException#(#e#)#;#}#else#{#log#(#"Caught exception: "#+#e#.#getMessage#(#)#,#Project#.#MSG_ERR#)#;#}#}#}#catch#(#Exception#e#)#{#if#(#getFailonerror#(#)#)#{#throw#new#BuildException#(#e#)#;#}#else#{#log#(#"Caught exception: "#+#e#.#getMessage#(#)#,#Project#.#MSG_ERR#)#;#}#}#finally#{#sb#.#append#(#out#.#toString#(#)#)#;#FileUtils#.#close#(#istream#)#;#}#}##void#run#(#)#{#while#(#!#channel#.#isClosed#(#)#)#{#if#(#thread#==#null#)#{#return#;#}#try#{#sleep#(#RETRY_INTERVAL#)#;#}#catch#(#Exception#e#)#{#// ignored#}#}#}##void#writeToFile#(#String#from#,#boolean#append#,#File#to#)#throws#IOException#{#FileWriter#out#=#null#;#try#{#out#=#new#FileWriter#(#to#.#getAbsolutePath#(#)#,#append#)#;#StringReader#in#=#new#StringReader#(#from#)#;#char#[#]#buffer#=#new#char#[#BUFFER_SIZE#]#;#int#bytesRead#;#while#(#true#)#{#bytesRead#=#in#.#read#(#buffer#)#;#if#(#bytesRead#==#-#1#)#{#break#;#}#out#.#write#(#buffer#,#0#,#bytesRead#)#;#}#out#.#flush#(#)#;#}#finally#{#if#(#out#!=#null#)#{#out#.#close#(#)#;#}#}#}##