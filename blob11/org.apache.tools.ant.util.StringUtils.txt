Vector#lineSplit#(#String#data#)#{#return#split#(#data#,#'\n'#)#;#}##Vector#split#(#String#data#,#int#ch#)#{#Vector#elems#=#new#Vector#(#)#;#int#pos#=#-#1#;#int#i#=#0#;#while#(#(#pos#=#data#.#indexOf#(#ch#,#i#)#)#!=#-#1#)#{#String#elem#=#data#.#substring#(#i#,#pos#)#;#elems#.#addElement#(#elem#)#;#i#=#pos#+#1#;#}#elems#.#addElement#(#data#.#substring#(#i#)#)#;#return#elems#;#}##String#replace#(#String#data#,#String#from#,#String#to#)#{#StringBuffer#buf#=#new#StringBuffer#(#data#.#length#(#)#)#;#int#pos#=#-#1#;#int#i#=#0#;#while#(#(#pos#=#data#.#indexOf#(#from#,#i#)#)#!=#-#1#)#{#buf#.#append#(#data#.#substring#(#i#,#pos#)#)#.#append#(#to#)#;#i#=#pos#+#from#.#length#(#)#;#}#buf#.#append#(#data#.#substring#(#i#)#)#;#return#buf#.#toString#(#)#;#}##String#getStackTrace#(#Throwable#t#)#{#StringWriter#sw#=#new#StringWriter#(#)#;#PrintWriter#pw#=#new#PrintWriter#(#sw#,#true#)#;#t#.#printStackTrace#(#pw#)#;#pw#.#flush#(#)#;#pw#.#close#(#)#;#return#sw#.#toString#(#)#;#}##boolean#endsWith#(#StringBuffer#buffer#,#String#suffix#)#{#if#(#suffix#.#length#(#)#>#buffer#.#length#(#)#)#{#return#false#;#}#// this loop is done on purpose to avoid memory allocation performance#// problems on various JDKs#// StringBuffer.lastIndexOf() was introduced in jdk 1.4 and#// implementation is ok though does allocation/copying#// StringBuffer.toString().endsWith() does massive memory#// allocation/copying on JDK 1.5#// See http://issues.apache.org/bugzilla/show_bug.cgi?id=37169#int#endIndex#=#suffix#.#length#(#)#-#1#;#int#bufferIndex#=#buffer#.#length#(#)#-#1#;#while#(#endIndex#>=#0#)#{#if#(#buffer#.#charAt#(#bufferIndex#)#!=#suffix#.#charAt#(#endIndex#)#)#{#return#false#;#}#bufferIndex#--#;#endIndex#--#;#}#return#true#;#}##String#resolveBackSlash#(#String#input#)#{#StringBuffer#b#=#new#StringBuffer#(#)#;#boolean#backSlashSeen#=#false#;#for#(#int#i#=#0#;#i#<#input#.#length#(#)#;#++#i#)#{#char#c#=#input#.#charAt#(#i#)#;#if#(#!#backSlashSeen#)#{#if#(#c#==#'\\'#)#{#backSlashSeen#=#true#;#}#else#{#b#.#append#(#c#)#;#}#}#else#{#switch#(#c#)#{#case#'\\'#:#b#.#append#(#(#char#)#'\\'#)#;#break#;#case#'n'#:#b#.#append#(#(#char#)#'\n'#)#;#break#;#case#'r'#:#b#.#append#(#(#char#)#'\r'#)#;#break#;#case#'t'#:#b#.#append#(#(#char#)#'\t'#)#;#break#;#case#'f'#:#b#.#append#(#(#char#)#'\f'#)#;#break#;#case#'s'#:#b#.#append#(#" \t\n\r\f"#)#;#break#;#default#:#b#.#append#(#c#)#;#}#backSlashSeen#=#false#;#}#}#return#b#.#toString#(#)#;#}##long#parseHumanSizes#(#String#humanSize#)#throws#Exception#{#long#factor#=#1L#;#char#s#=#humanSize#.#charAt#(#0#)#;#switch#(#s#)#{#case#'+'#:#humanSize#=#humanSize#.#substring#(#1#)#;#break#;#case#'-'#:#factor#=#-#1L#;#humanSize#=#humanSize#.#substring#(#1#)#;#break#;#default#:#break#;#}#//last character isn't a digit#char#c#=#humanSize#.#charAt#(#humanSize#.#length#(#)#-#1#)#;#if#(#!#Character#.#isDigit#(#c#)#)#{#int#trim#=#1#;#switch#(#c#)#{#case#'K'#:#factor#*=#KILOBYTE#;#break#;#case#'M'#:#factor#*=#MEGABYTE#;#break#;#case#'G'#:#factor#*=#GIGABYTE#;#break#;#case#'T'#:#factor#*=#TERABYTE#;#break#;#case#'P'#:#factor#*=#PETABYTE#;#break#;#default#:#trim#=#0#;#}#humanSize#=#humanSize#.#substring#(#0#,#humanSize#.#length#(#)#-#trim#)#;#}#return#factor#*#Long#.#parseLong#(#humanSize#)#;#}##String#removeSuffix#(#String#string#,#String#suffix#)#{#if#(#string#.#endsWith#(#suffix#)#)#{#return#string#.#substring#(#0#,#string#.#length#(#)#-#suffix#.#length#(#)#)#;#}#else#{#return#string#;#}#}##String#removePrefix#(#String#string#,#String#prefix#)#{#if#(#string#.#startsWith#(#prefix#)#)#{#return#string#.#substring#(#prefix#.#length#(#)#)#;#}#else#{#return#string#;#}#}##