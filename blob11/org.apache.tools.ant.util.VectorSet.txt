boolean#add#(#Object#o#)#{#if#(#!#set#.#contains#(#o#)#)#{#doAdd#(#size#(#)#,#o#)#;#return#true#;#}#return#false#;#}##void#add#(#int#index#,#Object#o#)#{#doAdd#(#index#,#o#)#;#}##void#doAdd#(#int#index#,#Object#o#)#{#// Vector.add seems to delegate to insertElementAt, but this#// is not documented so we may better implement it ourselves#if#(#set#.#add#(#o#)#)#{#ensureCapacity#(#size#(#)#+#1#)#;#Object#[#]#elems#=#new#Object#[#elementData#.#length#]#;#System#.#arraycopy#(#elementData#,#0#,#elems#,#0#,#index#)#;#elems#[#index#]#=#o#;#System#.#arraycopy#(#elementData#,#index#,#elems#,#index#+#1#,#size#(#)#-#index#)#;#elementData#=#elems#;#elementCount#++#;#}#}##void#addElement#(#Object#o#)#{#doAdd#(#size#(#)#,#o#)#;#}##boolean#addAll#(#Collection#c#)#{#boolean#changed#=#false#;#for#(#Iterator#i#=#c#.#iterator#(#)#;#i#.#hasNext#(#)#;#)#{#changed#|=#add#(#i#.#next#(#)#)#;#}#return#changed#;#}##boolean#addAll#(#int#index#,#Collection#c#)#{#boolean#changed#=#false#;#for#(#Iterator#i#=#c#.#iterator#(#)#;#i#.#hasNext#(#)#;#)#{#Object#o#=#i#.#next#(#)#;#if#(#!#set#.#contains#(#o#)#)#{#doAdd#(#index#++#,#o#)#;#changed#=#true#;#}#}#return#changed#;#}##void#clear#(#)#{#super#.#clear#(#)#;#set#.#clear#(#)#;#}##Object#clone#(#)#{#VectorSet#vs#=#(#VectorSet#)#super#.#clone#(#)#;#vs#.#set#.#addAll#(#set#)#;#return#vs#;#}##boolean#contains#(#Object#o#)#{#return#set#.#contains#(#o#)#;#}##boolean#containsAll#(#Collection#c#)#{#return#set#.#containsAll#(#c#)#;#}##void#insertElementAt#(#Object#o#,#int#index#)#{#doAdd#(#index#,#o#)#;#}##Object#remove#(#int#index#)#{#Object#o#=#get#(#index#)#;#remove#(#o#)#;#return#o#;#}##boolean#remove#(#Object#o#)#{#return#doRemove#(#o#)#;#}##boolean#doRemove#(#Object#o#)#{#// again, remove seems to delegate to removeElement, but we#// shouldn't trust it#if#(#set#.#remove#(#o#)#)#{#int#index#=#indexOf#(#o#)#;#System#.#arraycopy#(#elementData#,#index#+#1#,#elementData#,#index#,#size#(#)#-#index#)#;#elementCount#--#;#return#true#;#}#return#false#;#}##boolean#removeAll#(#Collection#c#)#{#boolean#changed#=#false#;#for#(#Iterator#i#=#c#.#iterator#(#)#;#i#.#hasNext#(#)#;#)#{#changed#|=#remove#(#i#.#next#(#)#)#;#}#return#changed#;#}##void#removeAllElements#(#)#{#set#.#clear#(#)#;#super#.#removeAllElements#(#)#;#}##boolean#removeElement#(#Object#o#)#{#return#doRemove#(#o#)#;#}##void#removeElementAt#(#int#index#)#{#remove#(#get#(#index#)#)#;#}##void#removeRange#(#final#int#fromIndex#,#int#toIndex#)#{#while#(#toIndex#>#fromIndex#)#{#remove#(#--#toIndex#)#;#}#}##boolean#retainAll#(#Collection#c#)#{#LinkedList#l#=#new#LinkedList#(#)#;#for#(#Iterator#i#=#iterator#(#)#;#i#.#hasNext#(#)#;#)#{#Object#o#=#i#.#next#(#)#;#if#(#!#c#.#contains#(#o#)#)#{#l#.#addLast#(#o#)#;#}#}#if#(#!#l#.#isEmpty#(#)#)#{#removeAll#(#l#)#;#return#true#;#}#return#false#;#}##Object#set#(#int#index#,#Object#o#)#{#Object#orig#=#get#(#index#)#;#if#(#set#.#add#(#o#)#)#{#elementData#[#index#]#=#o#;#set#.#remove#(#orig#)#;#}#else#{#int#oldIndexOfO#=#indexOf#(#o#)#;#remove#(#o#)#;#remove#(#orig#)#;#add#(#oldIndexOfO#>#index#?#index#:#index#-#1#,#o#)#;#}#return#orig#;#}##void#setElementAt#(#Object#o#,#int#index#)#{#set#(#index#,#o#)#;#}##