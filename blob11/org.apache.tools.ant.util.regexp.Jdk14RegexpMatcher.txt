void#setPattern#(#String#pattern#)#{#this#.#pattern#=#pattern#;#}##String#getPattern#(#)#{#return#pattern#;#}##Pattern#getCompiledPattern#(#int#options#)#throws#BuildException#{#int#cOptions#=#getCompilerOptions#(#options#)#;#try#{#Pattern#p#=#Pattern#.#compile#(#this#.#pattern#,#cOptions#)#;#return#p#;#}#catch#(#PatternSyntaxException#e#)#{#throw#new#BuildException#(#e#)#;#}#}##boolean#matches#(#String#argument#)#throws#BuildException#{#return#matches#(#argument#,#MATCH_DEFAULT#)#;#}##boolean#matches#(#String#input#,#int#options#)#throws#BuildException#{#try#{#Pattern#p#=#getCompiledPattern#(#options#)#;#return#p#.#matcher#(#input#)#.#find#(#)#;#}#catch#(#Exception#e#)#{#throw#new#BuildException#(#e#)#;#}#}##Vector#getGroups#(#String#argument#)#throws#BuildException#{#return#getGroups#(#argument#,#MATCH_DEFAULT#)#;#}##Vector#getGroups#(#String#input#,#int#options#)#throws#BuildException#{#Pattern#p#=#getCompiledPattern#(#options#)#;#Matcher#matcher#=#p#.#matcher#(#input#)#;#if#(#!#matcher#.#find#(#)#)#{#return#null#;#}#Vector#v#=#new#Vector#(#)#;#int#cnt#=#matcher#.#groupCount#(#)#;#for#(#int#i#=#0#;#i#<=#cnt#;#i#++#)#{#String#match#=#matcher#.#group#(#i#)#;#// treat non-matching groups as empty matches#if#(#match#==#null#)#{#match#=#""#;#}#v#.#addElement#(#match#)#;#}#return#v#;#}##int#getCompilerOptions#(#int#options#)#{#// be strict about line separator#int#cOptions#=#Pattern#.#UNIX_LINES#;#if#(#RegexpUtil#.#hasFlag#(#options#,#MATCH_CASE_INSENSITIVE#)#)#{#cOptions#|=#Pattern#.#CASE_INSENSITIVE#;#}#if#(#RegexpUtil#.#hasFlag#(#options#,#MATCH_MULTILINE#)#)#{#cOptions#|=#Pattern#.#MULTILINE#;#}#if#(#RegexpUtil#.#hasFlag#(#options#,#MATCH_SINGLELINE#)#)#{#cOptions#|=#Pattern#.#DOTALL#;#}#return#cOptions#;#}##