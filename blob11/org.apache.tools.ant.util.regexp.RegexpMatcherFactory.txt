RegexpMatcher#newRegexpMatcher#(#)#throws#BuildException#{#return#newRegexpMatcher#(#null#)#;#}##RegexpMatcher#newRegexpMatcher#(#Project#p#)#throws#BuildException#{#String#systemDefault#=#null#;#if#(#p#==#null#)#{#systemDefault#=#System#.#getProperty#(#MagicNames#.#REGEXP_IMPL#)#;#}#else#{#systemDefault#=#p#.#getProperty#(#MagicNames#.#REGEXP_IMPL#)#;#}#if#(#systemDefault#!=#null#)#{#return#createInstance#(#systemDefault#)#;#// XXX     should we silently catch possible exceptions and try to#//         load a different implementation?#}#return#new#Jdk14RegexpMatcher#(#)#;#}##RegexpMatcher#createInstance#(#String#className#)#throws#BuildException#{#return#(#RegexpMatcher#)#ClasspathUtils#.#newInstance#(#className#,#RegexpMatcherFactory#.#class#.#getClassLoader#(#)#,#RegexpMatcher#.#class#)#;#}##void#testAvailability#(#String#className#)#throws#BuildException#{#try#{#Class#.#forName#(#className#)#;#}#catch#(#Throwable#t#)#{#throw#new#BuildException#(#t#)#;#}#}##boolean#regexpMatcherPresent#(#Project#project#)#{#try#{#// The factory throws a BuildException if no usable matcher#// cant be instantiated. We dont need the matcher itself here.#new#RegexpMatcherFactory#(#)#.#newRegexpMatcher#(#project#)#;#return#true#;#}#catch#(#Throwable#ex#)#{#return#false#;#}#}##