void#initialize#(#int#blockSize#,#int#recordSize#)#{#this#.#debug#=#false#;#this#.#blockSize#=#blockSize#;#this#.#recordSize#=#recordSize#;#this#.#recsPerBlock#=#(#this#.#blockSize#/#this#.#recordSize#)#;#this#.#blockBuffer#=#new#byte#[#this#.#blockSize#]#;#if#(#this#.#inStream#!=#null#)#{#this#.#currBlkIdx#=#-#1#;#this#.#currRecIdx#=#this#.#recsPerBlock#;#}#else#{#this#.#currBlkIdx#=#0#;#this#.#currRecIdx#=#0#;#}#}##int#getBlockSize#(#)#{#return#this#.#blockSize#;#}##int#getRecordSize#(#)#{#return#this#.#recordSize#;#}##void#setDebug#(#boolean#debug#)#{#this#.#debug#=#debug#;#}##boolean#isEOFRecord#(#byte#[#]#record#)#{#for#(#int#i#=#0#,#sz#=#getRecordSize#(#)#;#i#<#sz#;#++#i#)#{#if#(#record#[#i#]#!=#0#)#{#return#false#;#}#}#return#true#;#}##void#skipRecord#(#)#throws#IOException#{#if#(#debug#)#{#System#.#err#.#println#(#"SkipRecord: recIdx = "#+#currRecIdx#+#" blkIdx = "#+#currBlkIdx#)#;#}#if#(#inStream#==#null#)#{#throw#new#IOException#(#"reading (via skip) from an output buffer"#)#;#}#if#(#currRecIdx#>=#recsPerBlock#)#{#if#(#!#readBlock#(#)#)#{#return#;#// UNDONE#}#}#currRecIdx#++#;#}##byte#[#]#readRecord#(#)#throws#IOException#{#if#(#debug#)#{#System#.#err#.#println#(#"ReadRecord: recIdx = "#+#currRecIdx#+#" blkIdx = "#+#currBlkIdx#)#;#}#if#(#inStream#==#null#)#{#throw#new#IOException#(#"reading from an output buffer"#)#;#}#if#(#currRecIdx#>=#recsPerBlock#)#{#if#(#!#readBlock#(#)#)#{#return#null#;#}#}#byte#[#]#result#=#new#byte#[#recordSize#]#;#System#.#arraycopy#(#blockBuffer#,#(#currRecIdx#*#recordSize#)#,#result#,#0#,#recordSize#)#;#currRecIdx#++#;#return#result#;#}##boolean#readBlock#(#)#throws#IOException#{#if#(#debug#)#{#System#.#err#.#println#(#"ReadBlock: blkIdx = "#+#currBlkIdx#)#;#}#if#(#inStream#==#null#)#{#throw#new#IOException#(#"reading from an output buffer"#)#;#}#currRecIdx#=#0#;#int#offset#=#0#;#int#bytesNeeded#=#blockSize#;#while#(#bytesNeeded#>#0#)#{#long#numBytes#=#inStream#.#read#(#blockBuffer#,#offset#,#bytesNeeded#)#;#//#// NOTE#// We have fit EOF, and the block is not full!#//#// This is a broken archive. It does not follow the standard#// blocking algorithm. However, because we are generous, and#// it requires little effort, we will simply ignore the error#// and continue as if the entire block were read. This does#// not appear to break anything upstream. We used to return#// false in this case.#//#// Thanks to 'Yohann.Roussel@alcatel.fr' for this fix.#//#if#(#numBytes#==#-#1#)#{#if#(#offset#==#0#)#{#// Ensure that we do not read gigabytes of zeros#// for a corrupt tar file.#// See http://issues.apache.org/bugzilla/show_bug.cgi?id=39924#return#false#;#}#// However, just leaving the unread portion of the buffer dirty does#// cause problems in some cases.  This problem is described in#// http://issues.apache.org/bugzilla/show_bug.cgi?id=29877#//#// The solution is to fill the unused portion of the buffer with zeros.#Arrays#.#fill#(#blockBuffer#,#offset#,#offset#+#bytesNeeded#,#(#byte#)#0#)#;#break#;#}#offset#+=#numBytes#;#bytesNeeded#-=#numBytes#;#if#(#numBytes#!=#blockSize#)#{#if#(#debug#)#{#System#.#err#.#println#(#"ReadBlock: INCOMPLETE READ "#+#numBytes#+#" of "#+#blockSize#+#" bytes read."#)#;#}#}#}#currBlkIdx#++#;#return#true#;#}##int#getCurrentBlockNum#(#)#{#return#currBlkIdx#;#}##int#getCurrentRecordNum#(#)#{#return#currRecIdx#-#1#;#}##void#writeRecord#(#byte#[#]#record#)#throws#IOException#{#if#(#debug#)#{#System#.#err#.#println#(#"WriteRecord: recIdx = "#+#currRecIdx#+#" blkIdx = "#+#currBlkIdx#)#;#}#if#(#outStream#==#null#)#{#throw#new#IOException#(#"writing to an input buffer"#)#;#}#if#(#record#.#length#!=#recordSize#)#{#throw#new#IOException#(#"record to write has length '"#+#record#.#length#+#"' which is not the record size of '"#+#recordSize#+#"'"#)#;#}#if#(#currRecIdx#>=#recsPerBlock#)#{#writeBlock#(#)#;#}#System#.#arraycopy#(#record#,#0#,#blockBuffer#,#(#currRecIdx#*#recordSize#)#,#recordSize#)#;#currRecIdx#++#;#}##void#writeRecord#(#byte#[#]#buf#,#int#offset#)#throws#IOException#{#if#(#debug#)#{#System#.#err#.#println#(#"WriteRecord: recIdx = "#+#currRecIdx#+#" blkIdx = "#+#currBlkIdx#)#;#}#if#(#outStream#==#null#)#{#throw#new#IOException#(#"writing to an input buffer"#)#;#}#if#(#(#offset#+#recordSize#)#>#buf#.#length#)#{#throw#new#IOException#(#"record has length '"#+#buf#.#length#+#"' with offset '"#+#offset#+#"' which is less than the record size of '"#+#recordSize#+#"'"#)#;#}#if#(#currRecIdx#>=#recsPerBlock#)#{#writeBlock#(#)#;#}#System#.#arraycopy#(#buf#,#offset#,#blockBuffer#,#(#currRecIdx#*#recordSize#)#,#recordSize#)#;#currRecIdx#++#;#}##void#writeBlock#(#)#throws#IOException#{#if#(#debug#)#{#System#.#err#.#println#(#"WriteBlock: blkIdx = "#+#currBlkIdx#)#;#}#if#(#outStream#==#null#)#{#throw#new#IOException#(#"writing to an input buffer"#)#;#}#outStream#.#write#(#blockBuffer#,#0#,#blockSize#)#;#outStream#.#flush#(#)#;#currRecIdx#=#0#;#currBlkIdx#++#;#Arrays#.#fill#(#blockBuffer#,#(#byte#)#0#)#;#}##void#flushBlock#(#)#throws#IOException#{#if#(#debug#)#{#System#.#err#.#println#(#"TarBuffer.flushBlock() called."#)#;#}#if#(#outStream#==#null#)#{#throw#new#IOException#(#"writing to an input buffer"#)#;#}#if#(#currRecIdx#>#0#)#{#writeBlock#(#)#;#}#}##void#close#(#)#throws#IOException#{#if#(#debug#)#{#System#.#err#.#println#(#"TarBuffer.closeBuffer()."#)#;#}#if#(#outStream#!=#null#)#{#flushBlock#(#)#;#if#(#outStream#!=#System#.#out#&&#outStream#!=#System#.#err#)#{#outStream#.#close#(#)#;#outStream#=#null#;#}#}#else#if#(#inStream#!=#null#)#{#if#(#inStream#!=#System#.#in#)#{#inStream#.#close#(#)#;#inStream#=#null#;#}#}#}##