boolean#isSeekable#(#)#{#return#raf#!=#null#;#}##void#setEncoding#(#final#String#encoding#)#{#this#.#encoding#=#encoding#;#this#.#zipEncoding#=#ZipEncodingHelper#.#getZipEncoding#(#encoding#)#;#useEFS#&=#ZipEncodingHelper#.#isUTF8#(#encoding#)#;#}##String#getEncoding#(#)#{#return#encoding#;#}##void#setUseLanguageEncodingFlag#(#boolean#b#)#{#useEFS#=#b#&&#ZipEncodingHelper#.#isUTF8#(#encoding#)#;#}##void#setCreateUnicodeExtraFields#(#UnicodeExtraFieldPolicy#b#)#{#createUnicodeExtraFields#=#b#;#}##void#setFallbackToUTF8#(#boolean#b#)#{#fallbackToUTF8#=#b#;#}##void#finish#(#)#throws#IOException#{#closeEntry#(#)#;#cdOffset#=#written#;#for#(#Iterator#i#=#entries#.#iterator#(#)#;#i#.#hasNext#(#)#;#)#{#writeCentralFileHeader#(#(#ZipEntry#)#i#.#next#(#)#)#;#}#cdLength#=#written#-#cdOffset#;#writeCentralDirectoryEnd#(#)#;#offsets#.#clear#(#)#;#entries#.#clear#(#)#;#}##void#closeEntry#(#)#throws#IOException#{#if#(#entry#==#null#)#{#return#;#}#long#realCrc#=#crc#.#getValue#(#)#;#crc#.#reset#(#)#;#if#(#entry#.#getMethod#(#)#==#DEFLATED#)#{#def#.#finish#(#)#;#while#(#!#def#.#finished#(#)#)#{#deflate#(#)#;#}#entry#.#setSize#(#adjustToLong#(#def#.#getTotalIn#(#)#)#)#;#entry#.#setCompressedSize#(#adjustToLong#(#def#.#getTotalOut#(#)#)#)#;#entry#.#setCrc#(#realCrc#)#;#def#.#reset#(#)#;#written#+=#entry#.#getCompressedSize#(#)#;#}#else#if#(#raf#==#null#)#{#if#(#entry#.#getCrc#(#)#!=#realCrc#)#{#throw#new#ZipException#(#"bad CRC checksum for entry "#+#entry#.#getName#(#)#+#": "#+#Long#.#toHexString#(#entry#.#getCrc#(#)#)#+#" instead of "#+#Long#.#toHexString#(#realCrc#)#)#;#}#if#(#entry#.#getSize#(#)#!=#written#-#dataStart#)#{#throw#new#ZipException#(#"bad size for entry "#+#entry#.#getName#(#)#+#": "#+#entry#.#getSize#(#)#+#" instead of "#+#(#written#-#dataStart#)#)#;#}#}#else#{#/* method is STORED and we used RandomAccessFile */#long#size#=#written#-#dataStart#;#entry#.#setSize#(#size#)#;#entry#.#setCompressedSize#(#size#)#;#entry#.#setCrc#(#realCrc#)#;#}#// If random access output, write the local file header containing#// the correct CRC and compressed/uncompressed sizes#if#(#raf#!=#null#)#{#long#save#=#raf#.#getFilePointer#(#)#;#raf#.#seek#(#localDataStart#)#;#writeOut#(#ZipLong#.#getBytes#(#entry#.#getCrc#(#)#)#)#;#writeOut#(#ZipLong#.#getBytes#(#entry#.#getCompressedSize#(#)#)#)#;#writeOut#(#ZipLong#.#getBytes#(#entry#.#getSize#(#)#)#)#;#raf#.#seek#(#save#)#;#}#writeDataDescriptor#(#entry#)#;#entry#=#null#;#}##void#putNextEntry#(#ZipEntry#ze#)#throws#IOException#{#closeEntry#(#)#;#entry#=#ze#;#entries#.#add#(#entry#)#;#if#(#entry#.#getMethod#(#)#==#-#1#)#{#// not specified#entry#.#setMethod#(#method#)#;#}#if#(#entry#.#getTime#(#)#==#-#1#)#{#// not specified#entry#.#setTime#(#System#.#currentTimeMillis#(#)#)#;#}#// Size/CRC not required if RandomAccessFile is used#if#(#entry#.#getMethod#(#)#==#STORED#&&#raf#==#null#)#{#if#(#entry#.#getSize#(#)#==#-#1#)#{#throw#new#ZipException#(#"uncompressed size is required for"#+#" STORED method when not writing to a"#+#" file"#)#;#}#if#(#entry#.#getCrc#(#)#==#-#1#)#{#throw#new#ZipException#(#"crc checksum is required for STORED"#+#" method when not writing to a file"#)#;#}#entry#.#setCompressedSize#(#entry#.#getSize#(#)#)#;#}#if#(#entry#.#getMethod#(#)#==#DEFLATED#&&#hasCompressionLevelChanged#)#{#def#.#setLevel#(#level#)#;#hasCompressionLevelChanged#=#false#;#}#writeLocalFileHeader#(#entry#)#;#}##void#setComment#(#String#comment#)#{#this#.#comment#=#comment#;#}##void#setLevel#(#int#level#)#{#if#(#level#<#Deflater#.#DEFAULT_COMPRESSION#||#level#>#Deflater#.#BEST_COMPRESSION#)#{#throw#new#IllegalArgumentException#(#"Invalid compression level: "#+#level#)#;#}#hasCompressionLevelChanged#=#(#this#.#level#!=#level#)#;#this#.#level#=#level#;#}##void#setMethod#(#int#method#)#{#this#.#method#=#method#;#}##void#write#(#byte#[#]#b#,#int#offset#,#int#length#)#throws#IOException#{#if#(#entry#.#getMethod#(#)#==#DEFLATED#)#{#if#(#length#>#0#)#{#if#(#!#def#.#finished#(#)#)#{#if#(#length#<=#DEFLATER_BLOCK_SIZE#)#{#def#.#setInput#(#b#,#offset#,#length#)#;#deflateUntilInputIsNeeded#(#)#;#}#else#{#final#int#fullblocks#=#length#/#DEFLATER_BLOCK_SIZE#;#for#(#int#i#=#0#;#i#<#fullblocks#;#i#++#)#{#def#.#setInput#(#b#,#offset#+#i#*#DEFLATER_BLOCK_SIZE#,#DEFLATER_BLOCK_SIZE#)#;#deflateUntilInputIsNeeded#(#)#;#}#final#int#done#=#fullblocks#*#DEFLATER_BLOCK_SIZE#;#if#(#done#<#length#)#{#def#.#setInput#(#b#,#offset#+#done#,#length#-#done#)#;#deflateUntilInputIsNeeded#(#)#;#}#}#}#}#}#else#{#writeOut#(#b#,#offset#,#length#)#;#written#+=#length#;#}#crc#.#update#(#b#,#offset#,#length#)#;#}##void#write#(#int#b#)#throws#IOException#{#byte#[#]#buff#=#new#byte#[#1#]#;#buff#[#0#]#=#(#byte#)#(#b#&#BYTE_MASK#)#;#write#(#buff#,#0#,#1#)#;#}##void#close#(#)#throws#IOException#{#finish#(#)#;#if#(#raf#!=#null#)#{#raf#.#close#(#)#;#}#if#(#out#!=#null#)#{#out#.#close#(#)#;#}#}##void#flush#(#)#throws#IOException#{#if#(#out#!=#null#)#{#out#.#flush#(#)#;#}#}##void#deflate#(#)#throws#IOException#{#int#len#=#def#.#deflate#(#buf#,#0#,#buf#.#length#)#;#if#(#len#>#0#)#{#writeOut#(#buf#,#0#,#len#)#;#}#}##void#writeLocalFileHeader#(#ZipEntry#ze#)#throws#IOException#{#boolean#encodable#=#zipEncoding#.#canEncode#(#ze#.#getName#(#)#)#;#final#ZipEncoding#entryEncoding#;#if#(#!#encodable#&&#fallbackToUTF8#)#{#entryEncoding#=#ZipEncodingHelper#.#UTF8_ZIP_ENCODING#;#}#else#{#entryEncoding#=#zipEncoding#;#}#ByteBuffer#name#=#entryEncoding#.#encode#(#ze#.#getName#(#)#)#;#if#(#createUnicodeExtraFields#!=#UnicodeExtraFieldPolicy#.#NEVER#)#{#if#(#createUnicodeExtraFields#==#UnicodeExtraFieldPolicy#.#ALWAYS#||#!#encodable#)#{#ze#.#addExtraField#(#new#UnicodePathExtraField#(#ze#.#getName#(#)#,#name#.#array#(#)#,#name#.#arrayOffset#(#)#,#name#.#limit#(#)#)#)#;#}#String#comm#=#ze#.#getComment#(#)#;#if#(#comm#!=#null#&&#!#""#.#equals#(#comm#)#)#{#boolean#commentEncodable#=#this#.#zipEncoding#.#canEncode#(#comm#)#;#if#(#createUnicodeExtraFields#==#UnicodeExtraFieldPolicy#.#ALWAYS#||#!#commentEncodable#)#{#ByteBuffer#commentB#=#entryEncoding#.#encode#(#comm#)#;#ze#.#addExtraField#(#new#UnicodeCommentExtraField#(#comm#,#commentB#.#array#(#)#,#commentB#.#arrayOffset#(#)#,#commentB#.#limit#(#)#)#)#;#}#}#}#offsets#.#put#(#ze#,#ZipLong#.#getBytes#(#written#)#)#;#writeOut#(#LFH_SIG#)#;#written#+=#WORD#;#//store method in local variable to prevent multiple method calls#final#int#zipMethod#=#ze#.#getMethod#(#)#;#writeVersionNeededToExtractAndGeneralPurposeBits#(#zipMethod#,#!#encodable#&&#fallbackToUTF8#)#;#written#+=#WORD#;#// compression method#writeOut#(#ZipShort#.#getBytes#(#zipMethod#)#)#;#written#+=#SHORT#;#// last mod. time and date#writeOut#(#toDosTime#(#ze#.#getTime#(#)#)#)#;#written#+=#WORD#;#// CRC#// compressed length#// uncompressed length#localDataStart#=#written#;#if#(#zipMethod#==#DEFLATED#||#raf#!=#null#)#{#writeOut#(#LZERO#)#;#writeOut#(#LZERO#)#;#writeOut#(#LZERO#)#;#}#else#{#writeOut#(#ZipLong#.#getBytes#(#ze#.#getCrc#(#)#)#)#;#writeOut#(#ZipLong#.#getBytes#(#ze#.#getSize#(#)#)#)#;#writeOut#(#ZipLong#.#getBytes#(#ze#.#getSize#(#)#)#)#;#}#// CheckStyle:MagicNumber OFF#written#+=#12#;#// CheckStyle:MagicNumber ON#// file name length#writeOut#(#ZipShort#.#getBytes#(#name#.#limit#(#)#)#)#;#written#+=#SHORT#;#// extra field length#byte#[#]#extra#=#ze#.#getLocalFileDataExtra#(#)#;#writeOut#(#ZipShort#.#getBytes#(#extra#.#length#)#)#;#written#+=#SHORT#;#// file name#writeOut#(#name#.#array#(#)#,#name#.#arrayOffset#(#)#,#name#.#limit#(#)#)#;#written#+=#name#.#limit#(#)#;#// extra field#writeOut#(#extra#)#;#written#+=#extra#.#length#;#dataStart#=#written#;#}##void#writeDataDescriptor#(#ZipEntry#ze#)#throws#IOException#{#if#(#ze#.#getMethod#(#)#!=#DEFLATED#||#raf#!=#null#)#{#return#;#}#writeOut#(#DD_SIG#)#;#writeOut#(#ZipLong#.#getBytes#(#entry#.#getCrc#(#)#)#)#;#writeOut#(#ZipLong#.#getBytes#(#entry#.#getCompressedSize#(#)#)#)#;#writeOut#(#ZipLong#.#getBytes#(#entry#.#getSize#(#)#)#)#;#// CheckStyle:MagicNumber OFF#written#+=#16#;#// CheckStyle:MagicNumber ON#}##void#writeCentralFileHeader#(#ZipEntry#ze#)#throws#IOException#{#writeOut#(#CFH_SIG#)#;#written#+=#WORD#;#// version made by#// CheckStyle:MagicNumber OFF#writeOut#(#ZipShort#.#getBytes#(#(#ze#.#getPlatform#(#)#<#<#8#)#|#20#)#)#;#written#+=#SHORT#;#final#int#zipMethod#=#ze#.#getMethod#(#)#;#final#boolean#encodable#=#zipEncoding#.#canEncode#(#ze#.#getName#(#)#)#;#writeVersionNeededToExtractAndGeneralPurposeBits#(#zipMethod#,#!#encodable#&&#fallbackToUTF8#)#;#written#+=#WORD#;#// compression method#writeOut#(#ZipShort#.#getBytes#(#zipMethod#)#)#;#written#+=#SHORT#;#// last mod. time and date#writeOut#(#toDosTime#(#ze#.#getTime#(#)#)#)#;#written#+=#WORD#;#// CRC#// compressed length#// uncompressed length#writeOut#(#ZipLong#.#getBytes#(#ze#.#getCrc#(#)#)#)#;#writeOut#(#ZipLong#.#getBytes#(#ze#.#getCompressedSize#(#)#)#)#;#writeOut#(#ZipLong#.#getBytes#(#ze#.#getSize#(#)#)#)#;#// CheckStyle:MagicNumber OFF#written#+=#12#;#// CheckStyle:MagicNumber ON#// file name length#final#ZipEncoding#entryEncoding#;#if#(#!#encodable#&&#fallbackToUTF8#)#{#entryEncoding#=#ZipEncodingHelper#.#UTF8_ZIP_ENCODING#;#}#else#{#entryEncoding#=#zipEncoding#;#}#ByteBuffer#name#=#entryEncoding#.#encode#(#ze#.#getName#(#)#)#;#writeOut#(#ZipShort#.#getBytes#(#name#.#limit#(#)#)#)#;#written#+=#SHORT#;#// extra field length#byte#[#]#extra#=#ze#.#getCentralDirectoryExtra#(#)#;#writeOut#(#ZipShort#.#getBytes#(#extra#.#length#)#)#;#written#+=#SHORT#;#// file comment length#String#comm#=#ze#.#getComment#(#)#;#if#(#comm#==#null#)#{#comm#=#""#;#}#ByteBuffer#commentB#=#entryEncoding#.#encode#(#comm#)#;#writeOut#(#ZipShort#.#getBytes#(#commentB#.#limit#(#)#)#)#;#written#+=#SHORT#;#// disk number start#writeOut#(#ZERO#)#;#written#+=#SHORT#;#// internal file attributes#writeOut#(#ZipShort#.#getBytes#(#ze#.#getInternalAttributes#(#)#)#)#;#written#+=#SHORT#;#// external file attributes#writeOut#(#ZipLong#.#getBytes#(#ze#.#getExternalAttributes#(#)#)#)#;#written#+=#WORD#;#// relative offset of LFH#writeOut#(#(#byte#[#]#)#offsets#.#get#(#ze#)#)#;#written#+=#WORD#;#// file name#writeOut#(#name#.#array#(#)#,#name#.#arrayOffset#(#)#,#name#.#limit#(#)#)#;#written#+=#name#.#limit#(#)#;#// extra field#writeOut#(#extra#)#;#written#+=#extra#.#length#;#// file comment#writeOut#(#commentB#.#array#(#)#,#commentB#.#arrayOffset#(#)#,#commentB#.#limit#(#)#)#;#written#+=#commentB#.#limit#(#)#;#}##void#writeCentralDirectoryEnd#(#)#throws#IOException#{#writeOut#(#EOCD_SIG#)#;#// disk numbers#writeOut#(#ZERO#)#;#writeOut#(#ZERO#)#;#// number of entries#byte#[#]#num#=#ZipShort#.#getBytes#(#entries#.#size#(#)#)#;#writeOut#(#num#)#;#writeOut#(#num#)#;#// length and location of CD#writeOut#(#ZipLong#.#getBytes#(#cdLength#)#)#;#writeOut#(#ZipLong#.#getBytes#(#cdOffset#)#)#;#// ZIP file comment#ByteBuffer#data#=#this#.#zipEncoding#.#encode#(#comment#)#;#writeOut#(#ZipShort#.#getBytes#(#data#.#limit#(#)#)#)#;#writeOut#(#data#.#array#(#)#,#data#.#arrayOffset#(#)#,#data#.#limit#(#)#)#;#}##ZipLong#toDosTime#(#Date#time#)#{#return#new#ZipLong#(#toDosTime#(#time#.#getTime#(#)#)#)#;#}##byte#[#]#toDosTime#(#long#t#)#{#Date#time#=#new#Date#(#t#)#;#// CheckStyle:MagicNumberCheck OFF - I do not think that using constants#//                                   here will improve the readablity#int#year#=#time#.#getYear#(#)#+#1900#;#if#(#year#<#1980#)#{#return#DOS_TIME_MIN#;#}#int#month#=#time#.#getMonth#(#)#+#1#;#long#value#=#(#(#year#-#1980#)#<#<#25#)#|#(#month#<#<#21#)#|#(#time#.#getDate#(#)#<#<#16#)#|#(#time#.#getHours#(#)#<#<#11#)#|#(#time#.#getMinutes#(#)#<#<#5#)#|#(#time#.#getSeconds#(#)#>#>#1#)#;#return#ZipLong#.#getBytes#(#value#)#;#// CheckStyle:MagicNumberCheck ON#}##byte#[#]#getBytes#(#String#name#)#throws#ZipException#{#try#{#ByteBuffer#b#=#ZipEncodingHelper#.#getZipEncoding#(#encoding#)#.#encode#(#name#)#;#byte#[#]#result#=#new#byte#[#b#.#limit#(#)#]#;#System#.#arraycopy#(#b#.#array#(#)#,#b#.#arrayOffset#(#)#,#result#,#0#,#result#.#length#)#;#return#result#;#}#catch#(#IOException#ex#)#{#throw#new#ZipException#(#"Failed to encode name: "#+#ex#.#getMessage#(#)#)#;#}#}##void#writeOut#(#byte#[#]#data#)#throws#IOException#{#writeOut#(#data#,#0#,#data#.#length#)#;#}##void#writeOut#(#byte#[#]#data#,#int#offset#,#int#length#)#throws#IOException#{#if#(#raf#!=#null#)#{#raf#.#write#(#data#,#offset#,#length#)#;#}#else#{#out#.#write#(#data#,#offset#,#length#)#;#}#}##long#adjustToLong#(#int#i#)#{#if#(#i#<#0#)#{#return#2#*#(#(#long#)#Integer#.#MAX_VALUE#)#+#2#+#i#;#}#else#{#return#i#;#}#}##void#deflateUntilInputIsNeeded#(#)#throws#IOException#{#while#(#!#def#.#needsInput#(#)#)#{#deflate#(#)#;#}#}##void#writeVersionNeededToExtractAndGeneralPurposeBits#(#final#int#zipMethod#,#final#boolean#utfFallback#)#throws#IOException#{#// CheckStyle:MagicNumber OFF#int#versionNeededToExtract#=#10#;#int#generalPurposeFlag#=#(#useEFS#||#utfFallback#)#?#EFS_FLAG#:#0#;#if#(#zipMethod#==#DEFLATED#&&#raf#==#null#)#{#// requires version 2 as we are going to store length info#// in the data descriptor#versionNeededToExtract#=#20#;#// bit3 set to signal, we use a data descriptor#generalPurposeFlag#|=#8#;#}#// CheckStyle:MagicNumber ON#// version needed to extract#writeOut#(#ZipShort#.#getBytes#(#versionNeededToExtract#)#)#;#// general purpose bit flag#writeOut#(#ZipShort#.#getBytes#(#generalPurposeFlag#)#)#;#}##String#toString#(#)#{#return#name#;#}##