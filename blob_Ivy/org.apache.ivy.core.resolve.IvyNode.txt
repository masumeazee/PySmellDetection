void#init#(#ResolveData#data#)#{#this#.#data#=#data#;#settings#=#data#.#getSettings#(#)#;#eviction#=#new#IvyNodeEviction#(#this#)#;#callers#=#new#IvyNodeCallers#(#this#)#;#}##boolean#loadData#(#String#rootModuleConf#,#IvyNode#parent#,#String#parentConf#,#String#conf#,#boolean#shouldBePublic#,#IvyNodeUsage#usage#)#{#Message#.#debug#(#"loadData of "#+#this#.#toString#(#)#+#" of rootConf="#+#rootModuleConf#)#;#if#(#!#isRoot#(#)#&&#(#data#.#getReport#(#)#!=#null#)#)#{#data#.#getReport#(#)#.#addDependency#(#this#)#;#}#boolean#loaded#=#false#;#if#(#hasProblem#(#)#)#{#Message#.#debug#(#"Node has problem.  Skip loading"#)#;#}#else#if#(#isEvicted#(#rootModuleConf#)#)#{#Message#.#debug#(#rootModuleConf#+#" is evicted.  Skip loading"#)#;#}#else#if#(#!#hasConfigurationsToLoad#(#)#&&#isRootModuleConfLoaded#(#rootModuleConf#)#)#{#Message#.#debug#(#rootModuleConf#+#" is loaded and no conf to load.  Skip loading"#)#;#}#else#{#markRootModuleConfLoaded#(#rootModuleConf#)#;#if#(#md#==#null#)#{#DependencyResolver#resolver#=#data#.#getSettings#(#)#.#getResolver#(#getId#(#)#)#;#if#(#resolver#==#null#)#{#Message#.#error#(#"no resolver found for "#+#getModuleId#(#)#+#": check your configuration"#)#;#problem#=#new#RuntimeException#(#"no resolver found for "#+#getModuleId#(#)#+#": check your configuration"#)#;#return#false#;#}#try#{#Message#.#debug#(#"\tusing "#+#resolver#+#" to resolve "#+#getId#(#)#)#;#DependencyDescriptor#dependencyDescriptor#=#getDependencyDescriptor#(#parent#)#;#long#start#=#System#.#currentTimeMillis#(#)#;#ModuleRevisionId#requestedRevisionId#=#dependencyDescriptor#.#getDependencyRevisionId#(#)#;#data#.#getEventManager#(#)#.#fireIvyEvent#(#new#StartResolveDependencyEvent#(#resolver#,#dependencyDescriptor#,#requestedRevisionId#)#)#;#module#=#resolver#.#getDependency#(#dependencyDescriptor#,#data#)#;#data#.#getEventManager#(#)#.#fireIvyEvent#(#new#EndResolveDependencyEvent#(#resolver#,#dependencyDescriptor#,#requestedRevisionId#,#module#,#System#.#currentTimeMillis#(#)#-#start#)#)#;#if#(#module#!=#null#)#{#module#.#getResolver#(#)#.#getRepositoryCacheManager#(#)#.#saveResolvers#(#module#.#getDescriptor#(#)#,#module#.#getResolver#(#)#.#getName#(#)#,#module#.#getArtifactResolver#(#)#.#getName#(#)#)#;#if#(#settings#.#logModuleWhenFound#(#)#&&#LogOptions#.#LOG_DEFAULT#.#equals#(#getData#(#)#.#getOptions#(#)#.#getLog#(#)#)#)#{#Message#.#info#(#"\tfound "#+#module#.#getId#(#)#+#" in "#+#module#.#getResolver#(#)#.#getName#(#)#)#;#}#else#{#Message#.#verbose#(#"\tfound "#+#module#.#getId#(#)#+#" in "#+#module#.#getResolver#(#)#.#getName#(#)#)#;#}#// IVY-56: check if revision has actually been resolved#if#(#settings#.#getVersionMatcher#(#)#.#isDynamic#(#getId#(#)#)#&&#settings#.#getVersionMatcher#(#)#.#isDynamic#(#module#.#getId#(#)#)#)#{#Message#.#error#(#"impossible to resolve dynamic revision for "#+#getId#(#)#+#": check your configuration and "#+#"make sure revision is part of your pattern"#)#;#problem#=#new#RuntimeException#(#"impossible to resolve dynamic revision"#)#;#return#false#;#}#if#(#!#getId#(#)#.#equals#(#module#.#getId#(#)#)#)#{#IvyNode#resolved#=#data#.#getNode#(#module#.#getId#(#)#)#;#if#(#resolved#!=#null#)#{#// found revision has already been resolved#// => update it and discard this node#md#=#module#.#getDescriptor#(#)#;#// needed for handleConfiguration#if#(#!#handleConfiguration#(#loaded#,#rootModuleConf#,#parent#,#parentConf#,#conf#,#shouldBePublic#,#usage#)#)#{#return#false#;#}#moveToRealNode#(#rootModuleConf#,#parent#,#parentConf#,#conf#,#shouldBePublic#,#resolved#)#;#return#true#;#}#String#log#=#"\t["#+#module#.#getId#(#)#.#getRevision#(#)#+#"] "#+#getId#(#)#;#if#(#!#settings#.#getVersionMatcher#(#)#.#isDynamic#(#getId#(#)#)#)#{#log#+=#" (forced)"#;#}#if#(#settings#.#logResolvedRevision#(#)#&&#LogOptions#.#LOG_DEFAULT#.#equals#(#getData#(#)#.#getOptions#(#)#.#getLog#(#)#)#)#{#Message#.#info#(#log#)#;#}#else#{#Message#.#verbose#(#log#)#;#}#}#downloaded#=#module#.#getReport#(#)#.#isDownloaded#(#)#;#searched#=#module#.#getReport#(#)#.#isSearched#(#)#;#loaded#=#true#;#md#=#module#.#getDescriptor#(#)#;#confsToFetch#.#remove#(#"*"#)#;#updateConfsToFetch#(#Arrays#.#asList#(#resolveSpecialConfigurations#(#getRequiredConfigurations#(#parent#,#parentConf#)#,#this#)#)#)#;#}#else#{#Message#.#warn#(#"\tmodule not found: "#+#getId#(#)#)#;#resolver#.#reportFailure#(#)#;#problem#=#new#RuntimeException#(#"not found"#)#;#return#false#;#}#}#catch#(#ResolveProcessException#e#)#{#throw#e#;#}#catch#(#Exception#e#)#{#problem#=#e#;#return#false#;#}#}#else#{#loaded#=#true#;#}#}#handleConfiguration#(#loaded#,#rootModuleConf#,#parent#,#parentConf#,#conf#,#shouldBePublic#,#usage#)#;#if#(#hasProblem#(#)#)#{#Message#.#debug#(#"problem : "#+#problem#.#getMessage#(#)#)#;#return#false#;#}#else#{#DependencyDescriptor#dd#=#getDependencyDescriptor#(#parent#)#;#if#(#dd#!=#null#)#{#usage#.#addUsage#(#rootModuleConf#,#dd#,#parentConf#)#;#}#return#loaded#;#}#}##void#moveToRealNode#(#String#rootModuleConf#,#IvyNode#parent#,#String#parentConf#,#String#conf#,#boolean#shouldBePublic#,#IvyNode#resolved#)#{#if#(#resolved#.#md#==#null#)#{#resolved#.#md#=#md#;#}#if#(#resolved#.#module#==#null#)#{#resolved#.#module#=#module#;#}#resolved#.#downloaded#|=#module#.#getReport#(#)#.#isDownloaded#(#)#;#resolved#.#searched#|=#module#.#getReport#(#)#.#isSearched#(#)#;#resolved#.#dds#.#putAll#(#dds#)#;#resolved#.#updateDataFrom#(#this#,#rootModuleConf#,#true#)#;#resolved#.#loadData#(#rootModuleConf#,#parent#,#parentConf#,#conf#,#shouldBePublic#,#usage#)#;#resolved#.#usage#.#updateDataFrom#(#getAllUsages#(#)#,#rootModuleConf#)#;#usage#=#resolved#.#usage#;#data#.#replaceNode#(#getId#(#)#,#resolved#,#rootModuleConf#)#;#// this actually discards the node#if#(#settings#.#logResolvedRevision#(#)#&&#LogOptions#.#LOG_DEFAULT#.#equals#(#getData#(#)#.#getOptions#(#)#.#getLog#(#)#)#)#{#Message#.#info#(#"\t["#+#module#.#getId#(#)#.#getRevision#(#)#+#"] "#+#getId#(#)#)#;#}#else#{#Message#.#verbose#(#"\t["#+#module#.#getId#(#)#.#getRevision#(#)#+#"] "#+#getId#(#)#)#;#}#}##Collection#getDependencies#(#String#rootModuleConf#,#String#[#]#confs#)#{#if#(#md#==#null#)#{#throw#new#IllegalStateException#(#"impossible to get dependencies when data has not been loaded"#)#;#}#if#(#Arrays#.#asList#(#confs#)#.#contains#(#"*"#)#)#{#if#(#isRoot#(#)#)#{#confs#=#md#.#getConfigurationsNames#(#)#;#}#else#{#confs#=#md#.#getPublicConfigurationsNames#(#)#;#}#}#Collection#deps#=#new#HashSet#(#)#;#for#(#int#i#=#0#;#i#<#confs#.#length#;#i#++#)#{#deps#.#addAll#(#getDependencies#(#rootModuleConf#,#confs#[#i#]#,#confs#[#i#]#)#)#;#}#return#deps#;#}##Collection#getDependencies#(#String#rootModuleConf#,#String#conf#,#String#requestedConf#)#{#if#(#md#==#null#)#{#throw#new#IllegalStateException#(#"impossible to get dependencies when data has not been loaded"#)#;#}#DependencyDescriptor#[#]#dds#=#md#.#getDependencies#(#)#;#Collection#dependencies#=#new#LinkedHashSet#(#)#;#// it's important to respect order#for#(#int#i#=#0#;#i#<#dds#.#length#;#i#++#)#{#DependencyDescriptor#dd#=#data#.#mediate#(#dds#[#i#]#)#;#String#[#]#dependencyConfigurations#=#dd#.#getDependencyConfigurations#(#conf#,#requestedConf#)#;#if#(#dependencyConfigurations#.#length#==#0#)#{#// no configuration of the dependency is required for current confs :#// it is exactly the same as if there was no dependency at all on it#continue#;#}#ModuleRevisionId#requestedDependencyRevisionId#=#dd#.#getDependencyRevisionId#(#)#;#if#(#isDependencyModuleExcluded#(#rootModuleConf#,#requestedDependencyRevisionId#,#conf#)#)#{#// the whole module is excluded, it is considered as not being part of dependencies#// at all#Message#.#verbose#(#"excluding "#+#dd#+#" in "#+#conf#)#;#continue#;#}#IvyNode#depNode#=#data#.#getNode#(#requestedDependencyRevisionId#)#;#if#(#depNode#==#null#)#{#depNode#=#new#IvyNode#(#data#,#this#,#dd#)#;#}#else#{#depNode#.#addDependencyDescriptor#(#this#,#dd#)#;#if#(#depNode#.#hasProblem#(#)#)#{#// dependency already tried to be resolved, but unsuccessfully#// nothing special to do#}#}#String#[#]#confsArray#=#resolveSpecialConfigurations#(#dependencyConfigurations#,#depNode#)#;#Collection#confs#=#Arrays#.#asList#(#confsArray#)#;#depNode#.#updateConfsToFetch#(#confs#)#;#depNode#.#addRootModuleConfigurations#(#depNode#.#usage#,#rootModuleConf#,#confsArray#)#;#depNode#.#usage#.#setRequiredConfs#(#this#,#conf#,#confs#)#;#depNode#.#addCaller#(#rootModuleConf#,#this#,#conf#,#requestedConf#,#dependencyConfigurations#,#dd#)#;#dependencies#.#add#(#depNode#)#;#}#return#dependencies#;#}##void#addDependencyDescriptor#(#IvyNode#parent#,#DependencyDescriptor#dd#)#{#dds#.#put#(#parent#,#dd#)#;#}##DependencyDescriptor#getDependencyDescriptor#(#IvyNode#parent#)#{#return#(#DependencyDescriptor#)#dds#.#get#(#parent#)#;#}##boolean#isDependencyModuleExcluded#(#String#rootModuleConf#,#ModuleRevisionId#dependencyRevisionId#,#String#conf#)#{#return#callers#.#doesCallersExclude#(#rootModuleConf#,#DefaultArtifact#.#newIvyArtifact#(#dependencyRevisionId#,#null#)#)#;#}##boolean#hasConfigurationsToLoad#(#)#{#return#!#confsToFetch#.#isEmpty#(#)#;#}##boolean#markRootModuleConfLoaded#(#String#rootModuleConf#)#{#return#loadedRootModuleConfs#.#add#(#rootModuleConf#)#;#}##boolean#isRootModuleConfLoaded#(#String#rootModuleConf#)#{#return#loadedRootModuleConfs#.#contains#(#rootModuleConf#)#;#}##boolean#handleConfiguration#(#boolean#loaded#,#String#rootModuleConf#,#IvyNode#parent#,#String#parentConf#,#String#conf#,#boolean#shouldBePublic#,#IvyNodeUsage#usage#)#{#if#(#md#!=#null#)#{#String#[#]#confs#=#getRealConfs#(#conf#)#;#addRootModuleConfigurations#(#usage#,#rootModuleConf#,#confs#)#;#for#(#int#i#=#0#;#i#<#confs#.#length#;#i#++#)#{#Configuration#c#=#md#.#getConfiguration#(#confs#[#i#]#)#;#if#(#c#==#null#)#{#confsToFetch#.#remove#(#conf#)#;#if#(#isConfRequiredByMergedUsageOnly#(#rootModuleConf#,#conf#)#)#{#Message#.#verbose#(#"configuration required by evicted revision is not available in "#+#"selected revision. skipping "#+#conf#+#" in "#+#this#)#;#}#else#if#(#!#conf#.#equals#(#confs#[#i#]#)#)#{#problem#=#new#RuntimeException#(#"configuration not found in "#+#this#+#": '"#+#conf#+#"'. Missing configuration: '"#+#confs#[#i#]#+#"'. It was required from "#+#parent#+#" "#+#parentConf#)#;#}#else#{#problem#=#new#RuntimeException#(#"configuration not found in "#+#this#+#": '"#+#confs#[#i#]#+#"'. It was required from "#+#parent#+#" "#+#parentConf#)#;#}#return#false#;#}#else#if#(#shouldBePublic#&&#!#isRoot#(#)#&&#c#.#getVisibility#(#)#!=#Configuration#.#Visibility#.#PUBLIC#)#{#confsToFetch#.#remove#(#conf#)#;#if#(#isConfRequiredByMergedUsageOnly#(#rootModuleConf#,#conf#)#)#{#Message#.#verbose#(#"configuration required by evicted revision is not visible in "#+#"selected revision. skipping "#+#conf#+#" in "#+#this#)#;#}#else#{#problem#=#new#RuntimeException#(#"configuration not public in "#+#this#+#": '"#+#c#+#"'. It was required from "#+#parent#+#" "#+#parentConf#)#;#}#return#false#;#}#}#if#(#loaded#)#{#fetchedConfigurations#.#add#(#conf#)#;#confsToFetch#.#removeAll#(#Arrays#.#asList#(#confs#)#)#;#confsToFetch#.#remove#(#conf#)#;#}#}#return#true#;#}##String#getDefaultConf#(#String#conf#)#{#Matcher#m#=#FALLBACK_CONF_PATTERN#.#matcher#(#conf#)#;#if#(#m#.#matches#(#)#)#{#return#m#.#group#(#2#)#;#}#else#{#return#conf#;#}#}##String#getMainConf#(#String#conf#)#{#Matcher#m#=#FALLBACK_CONF_PATTERN#.#matcher#(#conf#)#;#if#(#m#.#matches#(#)#)#{#return#m#.#group#(#1#)#;#}#else#{#return#null#;#}#}##void#updateConfsToFetch#(#Collection#confs#)#{#confsToFetch#.#addAll#(#confs#)#;#confsToFetch#.#removeAll#(#fetchedConfigurations#)#;#}##String#[#]#resolveSpecialConfigurations#(#String#[#]#dependencyConfigurations#,#IvyNode#node#)#{#if#(#dependencyConfigurations#.#length#==#1#&&#dependencyConfigurations#[#0#]#.#startsWith#(#"*"#)#&&#node#!=#null#&&#node#.#isLoaded#(#)#)#{#String#conf#=#dependencyConfigurations#[#0#]#;#if#(#"*"#.#equals#(#conf#)#)#{#return#node#.#getDescriptor#(#)#.#getPublicConfigurationsNames#(#)#;#}#// there are exclusions in the configuration#List#exclusions#=#Arrays#.#asList#(#conf#.#substring#(#2#)#.#split#(#"\\!"#)#)#;#List#ret#=#new#ArrayList#(#Arrays#.#asList#(#node#.#getDescriptor#(#)#.#getPublicConfigurationsNames#(#)#)#)#;#ret#.#removeAll#(#exclusions#)#;#return#(#String#[#]#)#ret#.#toArray#(#new#String#[#ret#.#size#(#)#]#)#;#}#return#dependencyConfigurations#;#}##String#[#]#getRequiredConfigurations#(#IvyNode#in#,#String#inConf#)#{#Collection#req#=#new#LinkedHashSet#(#)#;#addAllIfNotNull#(#req#,#usage#.#getRequiredConfigurations#(#in#,#inConf#)#)#;#for#(#Iterator#iterator#=#mergedUsages#.#values#(#)#.#iterator#(#)#;#iterator#.#hasNext#(#)#;#)#{#IvyNodeUsage#usage#=#(#IvyNodeUsage#)#iterator#.#next#(#)#;#addAllIfNotNull#(#req#,#usage#.#getRequiredConfigurations#(#in#,#inConf#)#)#;#}#return#req#==#null#?#new#String#[#0#]#:#(#String#[#]#)#req#.#toArray#(#new#String#[#req#.#size#(#)#]#)#;#}##void#addAllIfNotNull#(#Collection#into#,#Collection#col#)#{#if#(#col#!=#null#)#{#into#.#addAll#(#col#)#;#}#}##String#[#]#getRequiredConfigurations#(#)#{#Collection#required#=#new#ArrayList#(#confsToFetch#.#size#(#)#+#fetchedConfigurations#.#size#(#)#)#;#required#.#addAll#(#fetchedConfigurations#)#;#required#.#addAll#(#confsToFetch#)#;#return#(#String#[#]#)#required#.#toArray#(#new#String#[#required#.#size#(#)#]#)#;#}##Configuration#getConfiguration#(#String#conf#)#{#if#(#md#==#null#)#{#throw#new#IllegalStateException#(#"impossible to get configuration when data has not been loaded"#)#;#}#String#defaultConf#=#getDefaultConf#(#conf#)#;#conf#=#getMainConf#(#conf#)#;#Configuration#configuration#=#md#.#getConfiguration#(#conf#)#;#if#(#configuration#==#null#)#{#configuration#=#md#.#getConfiguration#(#defaultConf#)#;#}#return#configuration#;#}##String#[#]#getConfigurations#(#String#rootModuleConf#)#{#Set#depConfs#=#new#LinkedHashSet#(#)#;#addAllIfNotNull#(#depConfs#,#usage#.#getConfigurations#(#rootModuleConf#)#)#;#for#(#Iterator#iterator#=#mergedUsages#.#values#(#)#.#iterator#(#)#;#iterator#.#hasNext#(#)#;#)#{#IvyNodeUsage#usage#=#(#IvyNodeUsage#)#iterator#.#next#(#)#;#addAllIfNotNull#(#depConfs#,#usage#.#getConfigurations#(#rootModuleConf#)#)#;#}#return#(#String#[#]#)#depConfs#.#toArray#(#new#String#[#depConfs#.#size#(#)#]#)#;#}##boolean#isConfRequiredByMergedUsageOnly#(#String#rootModuleConf#,#String#conf#)#{#Set#confs#=#usage#.#getConfigurations#(#rootModuleConf#)#;#return#confs#==#null#||#!#confs#.#contains#(#conf#)#;#}##void#discardConf#(#String#rootModuleConf#,#String#conf#)#{#Set#depConfs#=#usage#.#addAndGetConfigurations#(#rootModuleConf#)#;#if#(#md#!=#null#)#{#// remove all given dependency configurations to the set + extended ones#Configuration#c#=#md#.#getConfiguration#(#conf#)#;#if#(#conf#!=#null#)#{#String#[#]#exts#=#c#.#getExtends#(#)#;#for#(#int#i#=#0#;#i#<#exts#.#length#;#i#++#)#{#discardConf#(#rootModuleConf#,#exts#[#i#]#)#;#// recursive remove of extended#// configurations#}#depConfs#.#remove#(#c#.#getName#(#)#)#;#}#else#{#Message#.#warn#(#"unknown configuration in "#+#getId#(#)#+#": "#+#conf#)#;#}#}#else#{#depConfs#.#remove#(#conf#)#;#}#}##void#addRootModuleConfigurations#(#IvyNodeUsage#usage#,#String#rootModuleConf#,#String#[#]#dependencyConfs#)#{#Set#depConfs#=#usage#.#addAndGetConfigurations#(#rootModuleConf#)#;#if#(#md#!=#null#)#{#// add all given dependency configurations to the set + extended ones#for#(#int#i#=#0#;#i#<#dependencyConfs#.#length#;#i#++#)#{#depConfs#.#add#(#dependencyConfs#[#i#]#)#;#Configuration#conf#=#md#.#getConfiguration#(#dependencyConfs#[#i#]#)#;#if#(#conf#!=#null#)#{#String#[#]#exts#=#conf#.#getExtends#(#)#;#// recursive add of extended#addRootModuleConfigurations#(#usage#,#rootModuleConf#,#exts#)#;#}#}#}#else#{#for#(#int#i#=#0#;#i#<#dependencyConfs#.#length#;#i#++#)#{#depConfs#.#add#(#dependencyConfs#[#i#]#)#;#}#}#}##String#[#]#getRootModuleConfigurations#(#)#{#Set#confs#=#getRootModuleConfigurationsSet#(#)#;#return#(#String#[#]#)#confs#.#toArray#(#new#String#[#confs#.#size#(#)#]#)#;#}##Set#getRootModuleConfigurationsSet#(#)#{#Set#confs#=#new#LinkedHashSet#(#)#;#addAllIfNotNull#(#confs#,#usage#.#getRootModuleConfigurations#(#)#)#;#for#(#Iterator#iterator#=#mergedUsages#.#values#(#)#.#iterator#(#)#;#iterator#.#hasNext#(#)#;#)#{#IvyNodeUsage#usage#=#(#IvyNodeUsage#)#iterator#.#next#(#)#;#addAllIfNotNull#(#confs#,#usage#.#getRootModuleConfigurations#(#)#)#;#}#return#confs#;#}##String#[#]#getConfsToFetch#(#)#{#return#(#String#[#]#)#confsToFetch#.#toArray#(#new#String#[#confsToFetch#.#size#(#)#]#)#;#}##String#[#]#getRealConfs#(#String#conf#)#{#if#(#md#==#null#)#{#return#new#String#[#]#{#conf#}#;#}#String#defaultConf#=#getDefaultConf#(#conf#)#;#conf#=#getMainConf#(#conf#)#;#if#(#md#.#getConfiguration#(#conf#)#==#null#)#{#if#(#""#.#equals#(#defaultConf#)#)#{#return#new#String#[#0#]#;#}#conf#=#defaultConf#;#}#if#(#conf#.#startsWith#(#"*"#)#)#{#return#resolveSpecialConfigurations#(#new#String#[#]#{#conf#}#,#this#)#;#}#else#if#(#conf#.#indexOf#(#','#)#!=#-#1#)#{#String#[#]#confs#=#conf#.#split#(#","#)#;#for#(#int#i#=#0#;#i#<#confs#.#length#;#i#++#)#{#confs#[#i#]#=#confs#[#i#]#.#trim#(#)#;#}#}#return#new#String#[#]#{#conf#}#;#}##Collection#findPath#(#ModuleId#from#)#{#return#findPath#(#from#,#this#,#new#LinkedList#(#)#)#;#}##Collection#findPath#(#ModuleId#from#,#IvyNode#node#,#List#path#)#{#IvyNode#parent#=#(#IvyNode#)#node#.#getDirectCallerFor#(#from#)#;#if#(#parent#==#null#)#{#throw#new#IllegalArgumentException#(#"no path from "#+#from#+#" to "#+#getId#(#)#+#" found"#)#;#}#if#(#path#.#contains#(#parent#)#)#{#path#.#add#(#0#,#parent#)#;#Message#.#verbose#(#"circular dependency found while looking for the path for another one: "#+#"was looking for "#+#from#+#" as a caller of "#+#path#.#get#(#path#.#size#(#)#-#1#)#)#;#return#path#;#}#path#.#add#(#0#,#parent#)#;#if#(#parent#.#getId#(#)#.#getModuleId#(#)#.#equals#(#from#)#)#{#return#path#;#}#return#findPath#(#from#,#parent#,#path#)#;#}##void#updateDataFrom#(#IvyNode#node#,#String#rootModuleConf#,#boolean#real#)#{#// update callers#callers#.#updateFrom#(#node#.#callers#,#rootModuleConf#,#real#)#;#if#(#real#)#{#usage#.#updateDataFrom#(#node#.#getAllUsages#(#)#,#rootModuleConf#)#;#}#else#{#// let's copy usage information for the given rootModuleConf, into a separate usage#// object to keep detailed data about where usage comes from#IvyNodeUsage#mergedUsage#=#(#IvyNodeUsage#)#mergedUsages#.#get#(#node#.#getId#(#)#)#;#if#(#mergedUsage#==#null#)#{#mergedUsage#=#new#IvyNodeUsage#(#node#)#;#mergedUsages#.#put#(#node#.#getId#(#)#,#mergedUsage#)#;#}#mergedUsage#.#updateDataFrom#(#node#.#getAllUsages#(#)#,#rootModuleConf#)#;#}#// update confsToFetch#updateConfsToFetch#(#node#.#fetchedConfigurations#)#;#updateConfsToFetch#(#node#.#confsToFetch#)#;#}##Collection#/*<IvyNodeUsage>*/#getAllUsages#(#)#{#Collection#usages#=#new#ArrayList#(#)#;#usages#.#add#(#usage#)#;#usages#.#addAll#(#mergedUsages#.#values#(#)#)#;#return#usages#;#}##Artifact#[#]#getAllArtifacts#(#)#{#Set#ret#=#new#HashSet#(#)#;#for#(#Iterator#it#=#getRootModuleConfigurationsSet#(#)#.#iterator#(#)#;#it#.#hasNext#(#)#;#)#{#String#rootModuleConf#=#(#String#)#it#.#next#(#)#;#ret#.#addAll#(#Arrays#.#asList#(#getArtifacts#(#rootModuleConf#)#)#)#;#}#return#(#Artifact#[#]#)#ret#.#toArray#(#new#Artifact#[#ret#.#size#(#)#]#)#;#}##Artifact#[#]#getSelectedArtifacts#(#Filter#artifactFilter#)#{#Collection#ret#=#new#HashSet#(#)#;#for#(#Iterator#it#=#getRootModuleConfigurationsSet#(#)#.#iterator#(#)#;#it#.#hasNext#(#)#;#)#{#String#rootModuleConf#=#(#String#)#it#.#next#(#)#;#if#(#!#isEvicted#(#rootModuleConf#)#&&#!#isBlacklisted#(#rootModuleConf#)#)#{#ret#.#addAll#(#Arrays#.#asList#(#getArtifacts#(#rootModuleConf#)#)#)#;#}#}#ret#=#FilterHelper#.#filter#(#ret#,#artifactFilter#)#;#return#(#Artifact#[#]#)#ret#.#toArray#(#new#Artifact#[#ret#.#size#(#)#]#)#;#}##Artifact#[#]#getArtifacts#(#String#rootModuleConf#)#{#// first we look for the dependency configurations required#// in the given root module configuration#String#[#]#confs#=#getConfigurations#(#rootModuleConf#)#;#if#(#confs#==#null#||#confs#.#length#==#0#)#{#// no configuration required => no artifact required#return#new#Artifact#[#0#]#;#}#if#(#md#==#null#)#{#throw#new#IllegalStateException#(#"impossible to get artifacts when data has not been loaded. IvyNode = "#+#this#.#toString#(#)#)#;#}#Set#artifacts#=#new#HashSet#(#)#;#// the set we fill before returning#// we check if we have dependencyArtifacts includes description for this rootModuleConf#Set#dependencyArtifacts#=#usage#.#getDependencyArtifactsSet#(#rootModuleConf#)#;#if#(#md#.#isDefault#(#)#&&#dependencyArtifacts#!=#null#&&#!#dependencyArtifacts#.#isEmpty#(#)#)#{#addArtifactsFromOwnUsage#(#artifacts#,#dependencyArtifacts#)#;#addArtifactsFromMergedUsage#(#rootModuleConf#,#artifacts#)#;#}#else#{#Set#includes#=#new#LinkedHashSet#(#)#;#addAllIfNotNull#(#includes#,#usage#.#getDependencyIncludesSet#(#rootModuleConf#)#)#;#for#(#Iterator#iterator#=#mergedUsages#.#values#(#)#.#iterator#(#)#;#iterator#.#hasNext#(#)#;#)#{#IvyNodeUsage#usage#=#(#IvyNodeUsage#)#iterator#.#next#(#)#;#addAllIfNotNull#(#includes#,#usage#.#getDependencyIncludesSet#(#rootModuleConf#)#)#;#}#if#(#(#dependencyArtifacts#==#null#||#dependencyArtifacts#.#isEmpty#(#)#)#&&#(#includes#.#isEmpty#(#)#)#)#{#// no artifacts / includes: we get all artifacts as defined by the descriptor#for#(#int#i#=#0#;#i#<#confs#.#length#;#i#++#)#{#artifacts#.#addAll#(#Arrays#.#asList#(#md#.#getArtifacts#(#confs#[#i#]#)#)#)#;#}#}#else#{#// we have to get only artifacts listed as "includes"#// first we get all artifacts as defined by the module descriptor#// and classify them by artifact id#Map#allArtifacts#=#new#HashMap#(#)#;#for#(#int#i#=#0#;#i#<#confs#.#length#;#i#++#)#{#Artifact#[#]#arts#=#md#.#getArtifacts#(#confs#[#i#]#)#;#for#(#int#j#=#0#;#j#<#arts#.#length#;#j#++#)#{#allArtifacts#.#put#(#arts#[#j#]#.#getId#(#)#.#getArtifactId#(#)#,#arts#[#j#]#)#;#}#}#// now we add caller defined ones#if#(#dependencyArtifacts#!=#null#)#{#addArtifactsFromOwnUsage#(#artifacts#,#dependencyArtifacts#)#;#}#addArtifactsFromMergedUsage#(#rootModuleConf#,#artifacts#)#;#// and now we filter according to include rules#for#(#Iterator#it#=#includes#.#iterator#(#)#;#it#.#hasNext#(#)#;#)#{#IncludeRule#dad#=#(#IncludeRule#)#it#.#next#(#)#;#Collection#arts#=#findArtifactsMatching#(#dad#,#allArtifacts#)#;#if#(#arts#.#isEmpty#(#)#)#{#Message#.#error#(#"a required artifact is not listed by module descriptor: "#+#dad#.#getId#(#)#)#;#// we remove it from required list to prevent message to be displayed more#// than once#it#.#remove#(#)#;#}#else#{#Message#.#debug#(#this#+#" in "#+#rootModuleConf#+#": including "#+#arts#)#;#artifacts#.#addAll#(#arts#)#;#}#}#}#}#// now excludes artifacts that aren't accepted by any caller#for#(#Iterator#iter#=#artifacts#.#iterator#(#)#;#iter#.#hasNext#(#)#;#)#{#Artifact#artifact#=#(#Artifact#)#iter#.#next#(#)#;#boolean#excluded#=#callers#.#doesCallersExclude#(#rootModuleConf#,#artifact#)#;#if#(#excluded#)#{#Message#.#debug#(#this#+#" in "#+#rootModuleConf#+#": excluding "#+#artifact#)#;#iter#.#remove#(#)#;#}#}#return#(#Artifact#[#]#)#artifacts#.#toArray#(#new#Artifact#[#artifacts#.#size#(#)#]#)#;#}##void#addArtifactsFromOwnUsage#(#Set#artifacts#,#Set#dependencyArtifacts#)#{#for#(#Iterator#it#=#dependencyArtifacts#.#iterator#(#)#;#it#.#hasNext#(#)#;#)#{#DependencyArtifactDescriptor#dad#=#(#DependencyArtifactDescriptor#)#it#.#next#(#)#;#artifacts#.#add#(#new#MDArtifact#(#md#,#dad#.#getName#(#)#,#dad#.#getType#(#)#,#dad#.#getExt#(#)#,#dad#.#getUrl#(#)#,#dad#.#getQualifiedExtraAttributes#(#)#)#)#;#}#}##void#addArtifactsFromMergedUsage#(#String#rootModuleConf#,#Set#artifacts#)#{#for#(#Iterator#iterator#=#mergedUsages#.#values#(#)#.#iterator#(#)#;#iterator#.#hasNext#(#)#;#)#{#IvyNodeUsage#usage#=#(#IvyNodeUsage#)#iterator#.#next#(#)#;#Set#mergedDependencyArtifacts#=#usage#.#getDependencyArtifactsSet#(#rootModuleConf#)#;#if#(#mergedDependencyArtifacts#!=#null#)#{#for#(#Iterator#it#=#mergedDependencyArtifacts#.#iterator#(#)#;#it#.#hasNext#(#)#;#)#{#DependencyArtifactDescriptor#dad#=#(#DependencyArtifactDescriptor#)#it#.#next#(#)#;#Map#extraAttributes#=#new#HashMap#(#dad#.#getQualifiedExtraAttributes#(#)#)#;#// this is later used to know that this is a merged artifact#extraAttributes#.#put#(#"ivy:merged"#,#dad#.#getDependencyDescriptor#(#)#.#getParentRevisionId#(#)#+#" -> "#+#usage#.#getNode#(#)#.#getId#(#)#)#;#artifacts#.#add#(#new#MDArtifact#(#md#,#dad#.#getName#(#)#,#dad#.#getType#(#)#,#dad#.#getExt#(#)#,#dad#.#getUrl#(#)#,#extraAttributes#)#)#;#}#}#}#}##Collection#findArtifactsMatching#(#IncludeRule#rule#,#Map#allArtifacts#)#{#Collection#ret#=#new#ArrayList#(#)#;#for#(#Iterator#iter#=#allArtifacts#.#keySet#(#)#.#iterator#(#)#;#iter#.#hasNext#(#)#;#)#{#ArtifactId#aid#=#(#ArtifactId#)#iter#.#next#(#)#;#if#(#MatcherHelper#.#matches#(#rule#.#getMatcher#(#)#,#rule#.#getId#(#)#,#aid#)#)#{#ret#.#add#(#allArtifacts#.#get#(#aid#)#)#;#}#}#return#ret#;#}##boolean#hasProblem#(#)#{#return#problem#!=#null#;#}##Exception#getProblem#(#)#{#return#problem#;#}##String#getProblemMessage#(#)#{#return#StringUtils#.#getErrorMessage#(#problem#)#;#}##boolean#isDownloaded#(#)#{#return#downloaded#;#}##boolean#isSearched#(#)#{#return#searched#;#}##boolean#isLoaded#(#)#{#return#md#!=#null#;#}##boolean#isFetched#(#String#conf#)#{#return#fetchedConfigurations#.#contains#(#conf#)#;#}##IvyNode#findNode#(#ModuleRevisionId#mrid#)#{#return#data#.#getNode#(#mrid#)#;#}##boolean#isRoot#(#)#{#return#root#==#this#;#}##IvyNode#getRoot#(#)#{#return#root#;#}##ConflictManager#getConflictManager#(#ModuleId#mid#)#{#if#(#md#==#null#)#{#throw#new#IllegalStateException#(#"impossible to get conflict manager when data has not been loaded. IvyNode = "#+#this#.#toString#(#)#)#;#}#ConflictManager#cm#=#md#.#getConflictManager#(#mid#)#;#return#cm#==#null#?#settings#.#getConflictManager#(#mid#)#:#cm#;#}##IvyNode#getRealNode#(#)#{#IvyNode#real#=#data#.#getNode#(#getId#(#)#)#;#return#real#!=#null#?#real#:#this#;#}##ModuleRevisionId#getId#(#)#{#return#id#;#}##ModuleId#getModuleId#(#)#{#return#id#.#getModuleId#(#)#;#}##ModuleDescriptor#getDescriptor#(#)#{#return#md#;#}##ResolveData#getData#(#)#{#return#data#;#}##ResolvedModuleRevision#getModuleRevision#(#)#{#return#module#;#}##long#getPublication#(#)#{#if#(#module#!=#null#)#{#return#module#.#getPublicationDate#(#)#.#getTime#(#)#;#}#return#0#;#}##long#getLastModified#(#)#{#if#(#md#!=#null#)#{#return#md#.#getLastModified#(#)#;#}#return#0#;#}##ModuleRevisionId#getResolvedId#(#)#{#if#(#md#!=#null#&&#md#.#getResolvedModuleRevisionId#(#)#.#getRevision#(#)#!=#null#)#{#return#md#.#getResolvedModuleRevisionId#(#)#;#}#else#if#(#module#!=#null#)#{#return#module#.#getId#(#)#;#}#else#{#return#getId#(#)#;#}#}##void#clean#(#)#{#confsToFetch#.#clear#(#)#;#}##boolean#canExclude#(#String#rootModuleConf#)#{#Caller#[#]#callers#=#getCallers#(#rootModuleConf#)#;#for#(#int#i#=#0#;#i#<#callers#.#length#;#i#++#)#{#if#(#callers#[#i#]#.#canExclude#(#)#)#{#return#true#;#}#}#return#false#;#}##IvyNode#getDirectCallerFor#(#ModuleId#from#)#{#return#callers#.#getDirectCallerFor#(#from#)#;#}##Caller#[#]#getCallers#(#String#rootModuleConf#)#{#return#callers#.#getCallers#(#rootModuleConf#)#;#}##Collection#getAllCallersModuleIds#(#)#{#return#callers#.#getAllCallersModuleIds#(#)#;#}##Caller#[#]#getAllCallers#(#)#{#return#callers#.#getAllCallers#(#)#;#}##Caller#[#]#getAllRealCallers#(#)#{#return#callers#.#getAllRealCallers#(#)#;#}##void#addCaller#(#String#rootModuleConf#,#IvyNode#callerNode#,#String#callerConf#,#String#requestedConf#,#String#[#]#dependencyConfs#,#DependencyDescriptor#dd#)#{#callers#.#addCaller#(#rootModuleConf#,#callerNode#,#callerConf#,#requestedConf#,#dependencyConfs#,#dd#)#;#boolean#isCircular#=#callers#.#getAllCallersModuleIds#(#)#.#contains#(#getId#(#)#.#getModuleId#(#)#)#;#if#(#isCircular#)#{#IvyContext#.#getContext#(#)#.#getCircularDependencyStrategy#(#)#.#handleCircularDependency#(#toMrids#(#findPath#(#getId#(#)#.#getModuleId#(#)#)#,#this#)#)#;#}#}##boolean#doesCallersExclude#(#String#rootModuleConf#,#Artifact#artifact#,#Stack#callersStack#)#{#return#callers#.#doesCallersExclude#(#rootModuleConf#,#artifact#,#callersStack#)#;#}##ModuleRevisionId#[#]#toMrids#(#Collection#path#,#IvyNode#depNode#)#{#ModuleRevisionId#[#]#ret#=#new#ModuleRevisionId#[#path#.#size#(#)#+#1#]#;#int#i#=#0#;#for#(#Iterator#iter#=#path#.#iterator#(#)#;#iter#.#hasNext#(#)#;#i#++#)#{#IvyNode#node#=#(#IvyNode#)#iter#.#next#(#)#;#ret#[#i#]#=#node#.#getId#(#)#;#}#ret#[#ret#.#length#-#1#]#=#depNode#.#getId#(#)#;#return#ret#;#}##Set#getResolvedNodes#(#ModuleId#moduleId#,#String#rootModuleConf#)#{#return#eviction#.#getResolvedNodes#(#moduleId#,#rootModuleConf#)#;#}##Collection#getResolvedRevisions#(#ModuleId#moduleId#,#String#rootModuleConf#)#{#return#eviction#.#getResolvedRevisions#(#moduleId#,#rootModuleConf#)#;#}##void#markEvicted#(#EvictionData#evictionData#)#{#eviction#.#markEvicted#(#evictionData#)#;#String#rootModuleConf#=#evictionData#.#getRootModuleConf#(#)#;#// bug 105: update selected data with evicted one#if#(#evictionData#.#getSelected#(#)#!=#null#)#{#for#(#Iterator#iter#=#evictionData#.#getSelected#(#)#.#iterator#(#)#;#iter#.#hasNext#(#)#;#)#{#IvyNode#selected#=#(#IvyNode#)#iter#.#next#(#)#;#selected#.#updateDataFrom#(#this#,#rootModuleConf#,#false#)#;#}#}#}##Collection#getAllEvictingConflictManagers#(#)#{#return#eviction#.#getAllEvictingConflictManagers#(#)#;#}##Collection#getAllEvictingNodes#(#)#{#return#eviction#.#getAllEvictingNodes#(#)#;#}##Collection#/*<String>*/#getAllEvictingNodesDetails#(#)#{#return#eviction#.#getAllEvictingNodesDetails#(#)#;#}##String#[#]#getEvictedConfs#(#)#{#return#eviction#.#getEvictedConfs#(#)#;#}##EvictionData#getEvictedData#(#String#rootModuleConf#)#{#return#eviction#.#getEvictedData#(#rootModuleConf#)#;#}##Collection#getEvictedNodes#(#ModuleId#mid#,#String#rootModuleConf#)#{#return#eviction#.#getEvictedNodes#(#mid#,#rootModuleConf#)#;#}##Collection#getEvictedRevisions#(#ModuleId#mid#,#String#rootModuleConf#)#{#return#eviction#.#getEvictedRevisions#(#mid#,#rootModuleConf#)#;#}##EvictionData#getEvictionDataInRoot#(#String#rootModuleConf#,#IvyNode#ancestor#)#{#return#eviction#.#getEvictionDataInRoot#(#rootModuleConf#,#ancestor#)#;#}##boolean#isCompletelyEvicted#(#)#{#return#eviction#.#isCompletelyEvicted#(#)#;#}##boolean#isEvicted#(#String#rootModuleConf#)#{#return#eviction#.#isEvicted#(#rootModuleConf#)#;#}##void#markEvicted#(#String#rootModuleConf#,#IvyNode#node#,#ConflictManager#conflictManager#,#Collection#resolved#)#{#EvictionData#evictionData#=#new#EvictionData#(#rootModuleConf#,#node#,#conflictManager#,#resolved#)#;#markEvicted#(#evictionData#)#;#}##void#setEvictedNodes#(#ModuleId#moduleId#,#String#rootModuleConf#,#Collection#evicted#)#{#eviction#.#setEvictedNodes#(#moduleId#,#rootModuleConf#,#evicted#)#;#}##void#setResolvedNodes#(#ModuleId#moduleId#,#String#rootModuleConf#,#Collection#resolved#)#{#eviction#.#setResolvedNodes#(#moduleId#,#rootModuleConf#,#resolved#)#;#}##String#toString#(#)#{#return#getResolvedId#(#)#.#toString#(#)#;#}##boolean#equals#(#Object#obj#)#{#if#(#!#(#obj#instanceof#IvyNode#)#)#{#return#false#;#}#IvyNode#node#=#(#IvyNode#)#obj#;#return#node#.#getId#(#)#.#equals#(#getId#(#)#)#;#}##int#compareTo#(#Object#obj#)#{#IvyNode#that#=#(#IvyNode#)#obj#;#return#this#.#getModuleId#(#)#.#compareTo#(#that#.#getModuleId#(#)#)#;#}##int#hashCode#(#)#{#return#getId#(#)#.#hashCode#(#)#;#}##Collection#getPendingConflicts#(#String#rootModuleConf#,#ModuleId#mid#)#{#return#eviction#.#getPendingConflicts#(#rootModuleConf#,#mid#)#;#}##void#setPendingConflicts#(#ModuleId#moduleId#,#String#rootModuleConf#,#Collection#conflicts#)#{#eviction#.#setPendingConflicts#(#moduleId#,#rootModuleConf#,#conflicts#)#;#}##void#blacklist#(#IvyNodeBlacklist#bdata#)#{#if#(#data#.#getSettings#(#)#.#logResolvedRevision#(#)#)#{#Message#.#info#(#"BLACKLISTING "#+#bdata#)#;#}#else#{#Message#.#verbose#(#"BLACKLISTING "#+#bdata#)#;#}#Stack#callerStack#=#new#Stack#(#)#;#callerStack#.#push#(#this#)#;#clearEvictionDataInAllCallers#(#bdata#.#getRootModuleConf#(#)#,#callerStack#)#;#usage#.#blacklist#(#bdata#)#;#data#.#blacklist#(#this#)#;#}##void#clearEvictionDataInAllCallers#(#String#rootModuleConf#,#Stack#/*<IvyNode>*/#callerStack#)#{#IvyNode#node#=#(#IvyNode#)#callerStack#.#peek#(#)#;#Caller#[#]#callers#=#node#.#getCallers#(#rootModuleConf#)#;#for#(#int#i#=#0#;#i#<#callers#.#length#;#i#++#)#{#IvyNode#callerNode#=#findNode#(#callers#[#i#]#.#getModuleRevisionId#(#)#)#;#if#(#callerNode#!=#null#)#{#callerNode#.#eviction#=#new#IvyNodeEviction#(#callerNode#)#;#if#(#!#callerStack#.#contains#(#callerNode#)#)#{#callerStack#.#push#(#callerNode#)#;#clearEvictionDataInAllCallers#(#rootModuleConf#,#callerStack#)#;#callerStack#.#pop#(#)#;#}#}#}#}##boolean#isBlacklisted#(#String#rootModuleConf#)#{#return#usage#.#isBlacklisted#(#rootModuleConf#)#;#}##boolean#isCompletelyBlacklisted#(#)#{#if#(#isRoot#(#)#)#{#return#false#;#}#String#[#]#rootModuleConfigurations#=#getRootModuleConfigurations#(#)#;#for#(#int#i#=#0#;#i#<#rootModuleConfigurations#.#length#;#i#++#)#{#if#(#!#isBlacklisted#(#rootModuleConfigurations#[#i#]#)#)#{#return#false#;#}#}#return#true#;#}##IvyNodeBlacklist#getBlacklistData#(#String#rootModuleConf#)#{#return#usage#.#getBlacklistData#(#rootModuleConf#)#;#}##IvyNodeUsage#getMainUsage#(#)#{#return#usage#;#}##boolean#hasAnyMergedUsageWithTransitiveDependency#(#String#rootModuleConf#)#{#if#(#mergedUsages#==#null#)#{#return#false#;#}#for#(#Iterator#iterator#=#mergedUsages#.#values#(#)#.#iterator#(#)#;#iterator#.#hasNext#(#)#;#)#{#IvyNodeUsage#usage#=#(#IvyNodeUsage#)#iterator#.#next#(#)#;#if#(#usage#.#hasTransitiveDepender#(#rootModuleConf#)#)#{#return#true#;#}#}#return#false#;#}##