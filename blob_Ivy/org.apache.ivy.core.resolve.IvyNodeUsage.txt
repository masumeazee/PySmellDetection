String#getConf#(#)#{#return#conf#;#}##IvyNode#getNode#(#)#{#return#node#;#}##boolean#equals#(#Object#obj#)#{#if#(#!#(#obj#instanceof#NodeConf#)#)#{#return#false#;#}#return#getNode#(#)#.#equals#(#(#(#NodeConf#)#obj#)#.#getNode#(#)#)#&&#getConf#(#)#.#equals#(#(#(#NodeConf#)#obj#)#.#getConf#(#)#)#;#}##int#hashCode#(#)#{#//CheckStyle:MagicNumber| OFF#int#hash#=#33#;#hash#+=#getNode#(#)#.#hashCode#(#)#*#17#;#hash#+=#getConf#(#)#.#hashCode#(#)#*#17#;#//CheckStyle:MagicNumber| OFF#return#hash#;#}##String#toString#(#)#{#return#"NodeConf("#+#conf#+#")"#;#}##String#toString#(#)#{#return#dd#+#" ["#+#dependerConf#+#"]"#;#}##boolean#equals#(#Object#obj#)#{#if#(#!#(#obj#instanceof#Depender#)#)#{#return#false#;#}#Depender#other#=#(#Depender#)#obj#;#return#other#.#dd#==#dd#&&#other#.#dependerConf#.#equals#(#dependerConf#)#;#}##int#hashCode#(#)#{#int#hash#=#33#;#hash#+=#dd#.#hashCode#(#)#*#13#;#hash#+=#dependerConf#.#hashCode#(#)#*#13#;#return#hash#;#}##Collection#getRequiredConfigurations#(#IvyNode#in#,#String#inConf#)#{#return#(#Collection#)#requiredConfs#.#get#(#new#NodeConf#(#in#,#inConf#)#)#;#}##void#setRequiredConfs#(#IvyNode#parent#,#String#parentConf#,#Collection#confs#)#{#requiredConfs#.#put#(#new#NodeConf#(#parent#,#parentConf#)#,#new#HashSet#(#confs#)#)#;#}##Set#getConfigurations#(#String#rootModuleConf#)#{#return#(#Set#)#rootModuleConfs#.#get#(#rootModuleConf#)#;#}##Set#addAndGetConfigurations#(#String#rootModuleConf#)#{#Set#depConfs#=#(#Set#)#rootModuleConfs#.#get#(#rootModuleConf#)#;#if#(#depConfs#==#null#)#{#depConfs#=#new#HashSet#(#)#;#rootModuleConfs#.#put#(#rootModuleConf#,#depConfs#)#;#}#return#depConfs#;#}##Set#/*<String>*/#getRootModuleConfigurations#(#)#{#return#rootModuleConfs#.#keySet#(#)#;#}##void#updateDataFrom#(#Collection#/*<IvyNodeUsage>*/#usages#,#String#rootModuleConf#)#{#for#(#Iterator#iterator#=#usages#.#iterator#(#)#;#iterator#.#hasNext#(#)#;#)#{#IvyNodeUsage#usage#=#(#IvyNodeUsage#)#iterator#.#next#(#)#;#updateDataFrom#(#usage#,#rootModuleConf#)#;#}#}##void#updateDataFrom#(#IvyNodeUsage#usage#,#String#rootModuleConf#)#{#// update requiredConfs#updateMapOfSet#(#usage#.#requiredConfs#,#requiredConfs#)#;#// update rootModuleConfs#updateMapOfSetForKey#(#usage#.#rootModuleConfs#,#rootModuleConfs#,#rootModuleConf#)#;#// update dependencyArtifacts#updateMapOfSetForKey#(#usage#.#dependers#,#dependers#,#rootModuleConf#)#;#}##void#updateMapOfSet#(#Map#from#,#Map#to#)#{#for#(#Iterator#iter#=#from#.#keySet#(#)#.#iterator#(#)#;#iter#.#hasNext#(#)#;#)#{#Object#key#=#iter#.#next#(#)#;#updateMapOfSetForKey#(#from#,#to#,#key#)#;#}#}##void#updateMapOfSetForKey#(#Map#from#,#Map#to#,#Object#key#)#{#Set#set#=#(#Set#)#from#.#get#(#key#)#;#if#(#set#!=#null#)#{#Set#toupdate#=#(#Set#)#to#.#get#(#key#)#;#if#(#toupdate#!=#null#)#{#toupdate#.#addAll#(#set#)#;#}#else#{#to#.#put#(#key#,#new#HashSet#(#set#)#)#;#}#}#}##void#addObjectsForConf#(#String#rootModuleConf#,#Object#objectToAdd#,#Map#map#)#{#Set#set#=#(#Set#)#map#.#get#(#rootModuleConf#)#;#if#(#set#==#null#)#{#set#=#new#HashSet#(#)#;#map#.#put#(#rootModuleConf#,#set#)#;#}#set#.#add#(#objectToAdd#)#;#}##void#addUsage#(#String#rootModuleConf#,#DependencyDescriptor#dd#,#String#parentConf#)#{#addObjectsForConf#(#rootModuleConf#,#new#Depender#(#dd#,#parentConf#)#,#dependers#)#;#}##Set#getDependencyArtifactsSet#(#String#rootModuleConf#)#{#Collection#dependersInConf#=#(#Collection#)#dependers#.#get#(#rootModuleConf#)#;#if#(#dependersInConf#==#null#)#{#return#null#;#}#Set#dependencyArtifacts#=#new#HashSet#(#)#;#for#(#Iterator#iterator#=#dependersInConf#.#iterator#(#)#;#iterator#.#hasNext#(#)#;#)#{#Depender#depender#=#(#Depender#)#iterator#.#next#(#)#;#DependencyArtifactDescriptor#[#]#dads#=#depender#.#dd#.#getDependencyArtifacts#(#depender#.#dependerConf#)#;#dependencyArtifacts#.#addAll#(#Arrays#.#asList#(#dads#)#)#;#}#return#dependencyArtifacts#;#}##Set#getDependencyIncludesSet#(#String#rootModuleConf#)#{#Collection#dependersInConf#=#(#Collection#)#dependers#.#get#(#rootModuleConf#)#;#if#(#dependersInConf#==#null#)#{#return#null#;#}#Set#dependencyIncludes#=#new#HashSet#(#)#;#for#(#Iterator#iterator#=#dependersInConf#.#iterator#(#)#;#iterator#.#hasNext#(#)#;#)#{#Depender#depender#=#(#Depender#)#iterator#.#next#(#)#;#IncludeRule#[#]#rules#=#depender#.#dd#.#getIncludeRules#(#depender#.#dependerConf#)#;#if#(#rules#==#null#||#rules#.#length#==#0#)#{#// no include rule in at least one depender -> we must include everything, #// and so return no include rule at all#return#null#;#}#dependencyIncludes#.#addAll#(#Arrays#.#asList#(#rules#)#)#;#}#return#dependencyIncludes#;#}##void#removeRootModuleConf#(#String#rootModuleConf#)#{#rootModuleConfs#.#remove#(#rootModuleConf#)#;#}##void#blacklist#(#IvyNodeBlacklist#bdata#)#{#blacklisted#.#put#(#bdata#.#getRootModuleConf#(#)#,#bdata#)#;#}##boolean#isBlacklisted#(#String#rootModuleConf#)#{#return#blacklisted#.#containsKey#(#rootModuleConf#)#;#}##IvyNodeBlacklist#getBlacklistData#(#String#rootModuleConf#)#{#return#(#IvyNodeBlacklist#)#blacklisted#.#get#(#rootModuleConf#)#;#}##IvyNode#getNode#(#)#{#return#node#;#}##boolean#hasTransitiveDepender#(#String#rootModuleConf#)#{#Set#/*<Depender>*/#dependersSet#=#(#Set#)#dependers#.#get#(#rootModuleConf#)#;#if#(#dependersSet#==#null#)#{#return#false#;#}#for#(#Iterator#iterator#=#dependersSet#.#iterator#(#)#;#iterator#.#hasNext#(#)#;#)#{#Depender#depender#=#(#Depender#)#iterator#.#next#(#)#;#if#(#depender#.#dd#.#isTransitive#(#)#)#{#return#true#;#}#}#return#false#;#}##