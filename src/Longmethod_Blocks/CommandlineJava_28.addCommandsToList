void#addCommandsToList#(#final#ListIterator#listIterator#)#{##//create the command to run Java, including user specified options#getActualVMCommand#(#)#.#addCommandToList#(#listIterator#)#;##// properties are part of the vm options...#sysProperties#.#addDefinitionsToList#(#listIterator#)#;##if#(#isCloneVm#(#)#)#{#SysProperties#clonedSysProperties#=#new#SysProperties#(#)#;#PropertySet#ps#=#new#PropertySet#(#)#;#PropertySet#.#BuiltinPropertySetName#sys#=#new#PropertySet#.#BuiltinPropertySetName#(#)#;#sys#.#setValue#(#"system"#)#;#ps#.#appendBuiltin#(#sys#)#;#clonedSysProperties#.#addSyspropertyset#(#ps#)#;#clonedSysProperties#.#addDefinitionsToList#(#listIterator#)#;#}##//boot classpath#Path#bcp#=#calculateBootclasspath#(#true#)#;##if#(#bcp#.#size#(#)#>#0#)#{#listIterator#.#add#(#"-Xbootclasspath:"#+#bcp#.#toString#(#)#)#;#}##//main classpath##if#(#haveClasspath#(#)#)#{#listIterator#.#add#(#"-classpath"#)#;#listIterator#.#add#(#classpath#.#concatSystemClasspath#(#"ignore"#)#.#toString#(#)#)#;#}##//now any assertions are added##if#(#getAssertions#(#)#!=#null#)#{#getAssertions#(#)#.#applyAssertions#(#listIterator#)#;#}##// JDK usage command line says that -jar must be the first option, as there is##// a bug in JDK < 1.4 that forces the jvm type to be specified as the first##// option, it is appended here as specified in the docs even though there is##// in fact no order.##if#(#executeJar#)#{#listIterator#.#add#(#"-jar"#)#;#}##// this is the classname to run as well as its arguments.##// in case of 'executeJar', the executable is a jar file.#javaCommand#.#addCommandToList#(#listIterator#)#;#}