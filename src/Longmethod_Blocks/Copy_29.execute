void#execute#(#)#throws#BuildException#{#File#savedFile#=#file#;##// may be altered in validateAttributes#File#savedDestFile#=#destFile#;#File#savedDestDir#=#destDir#;#ResourceCollection#savedRc#=#null#;##if#(#file#==#null#&&#destFile#!=#null#&&#rcs#.#size#(#)#==#1#)#{##// will be removed in validateAttributes#savedRc#=#(#ResourceCollection#)#rcs#.#elementAt#(#0#)#;#}##// make sure we don't have an illegal set of options#validateAttributes#(#)#;##try#{##// deal with the single file#copySingleFile#(#)#;##// deal with the ResourceCollections##/* for historical and performance reasons we have to do
               things in a rather complex way.

               (1) Move is optimized to move directories if a fileset
               has been included completely, therefore FileSets need a
               special treatment.  This is also required to support
               the failOnError semantice (skip filesets with broken
               basedir but handle the remaining collections).

               (2) We carry around a few protected methods that work
               on basedirs and arrays of names.  To optimize stuff, all
               resources with the same basedir get collected in
               separate lists and then each list is handled in one go.
            */#HashMap#filesByBasedir#=#new#HashMap#(#)#;#HashMap#dirsByBasedir#=#new#HashMap#(#)#;#HashSet#baseDirs#=#new#HashSet#(#)#;#ArrayList#nonFileResources#=#new#ArrayList#(#)#;##for#(#int#i#=#0#;##i#<#rcs#.#size#(#)#;#i#++#)#{#ResourceCollection#rc#=#(#ResourceCollection#)#rcs#.#elementAt#(#i#)#;##// Step (1) - beware of the ZipFileSet##if#(#rc#instanceof#FileSet#&&#rc#.#isFilesystemOnly#(#)#)#{#FileSet#fs#=#(#FileSet#)#rc#;#DirectoryScanner#ds#=#null#;##try#{#ds#=#fs#.#getDirectoryScanner#(#getProject#(#)#)#;#}##catch#(#BuildException#e#)#{##if#(#failonerror#||#!#getMessage#(#e#)#.#endsWith#(#DirectoryScanner#.#DOES_NOT_EXIST_POSTFIX#)#)#{#throw#e#;#}#else#{#log#(#"Warning: "#+#getMessage#(#e#)#,#Project#.#MSG_ERR#)#;#continue#;#}#}##File#fromDir#=#fs#.#getDir#(#getProject#(#)#)#;#String#[#]#srcFiles#=#ds#.#getIncludedFiles#(#)#;#String#[#]#srcDirs#=#ds#.#getIncludedDirectories#(#)#;##if#(#!#flatten#&&#mapperElement#==#null#&&#ds#.#isEverythingIncluded#(#)#&&#!#fs#.#hasPatterns#(#)#)#{#completeDirMap#.#put#(#fromDir#,#destDir#)#;#}##add#(#fromDir#,#srcFiles#,#filesByBasedir#)#;#add#(#fromDir#,#srcDirs#,#dirsByBasedir#)#;#baseDirs#.#add#(#fromDir#)#;#}#else#{##// not a fileset or contains non-file resources##if#(#!#rc#.#isFilesystemOnly#(#)#&&#!#supportsNonFileResources#(#)#)#{#throw#new#BuildException#(#"Only FileSystem resources are supported."#)#;#}##Iterator#resources#=#rc#.#iterator#(#)#;##while#(#resources#.#hasNext#(#)#)#{#Resource#r#=#(#Resource#)#resources#.#next#(#)#;##if#(#!#r#.#isExists#(#)#)#{#String#message#=#"Warning: Could not find resource "#+#r#.#toLongString#(#)#+#" to copy."#;##if#(#!#failonerror#)#{#log#(#message#,#Project#.#MSG_ERR#)#;#}#else#{#throw#new#BuildException#(#message#)#;#}##continue#;#}##File#baseDir#=#NULL_FILE_PLACEHOLDER#;#String#name#=#r#.#getName#(#)#;#FileProvider#fp#=#(#FileProvider#)#r#.#as#(#FileProvider#.#class#)#;##if#(#fp#!=#null#)#{#FileResource#fr#=#ResourceUtils#.#asFileResource#(#fp#)#;#baseDir#=#getKeyFile#(#fr#.#getBaseDir#(#)#)#;##if#(#fr#.#getBaseDir#(#)#==#null#)#{#name#=#fr#.#getFile#(#)#.#getAbsolutePath#(#)#;#}#}##// copying of dirs is trivial and can be done##// for non-file resources as well as for real##// files.##if#(#r#.#isDirectory#(#)#||#fp#!=#null#)#{#add#(#baseDir#,#name#,#r#.#isDirectory#(#)#?#dirsByBasedir#:#filesByBasedir#)#;#baseDirs#.#add#(#baseDir#)#;#}#else#{##// a not-directory file resource##// needs special treatment#nonFileResources#.#add#(#r#)#;#}#}#}#}##iterateOverBaseDirs#(#baseDirs#,#dirsByBasedir#,#filesByBasedir#)#;##// do all the copy operations now...#try#{#doFileOperations#(#)#;#}##catch#(#BuildException#e#)#{##if#(#!#failonerror#)#{#log#(#"Warning: "#+#getMessage#(#e#)#,#Project#.#MSG_ERR#)#;#}#else#{#throw#e#;#}#}##if#(#nonFileResources#.#size#(#)#>#0#)#{#Resource#[#]#nonFiles#=#(#Resource#[#]#)#nonFileResources#.#toArray#(#new#Resource#[#nonFileResources#.#size#(#)#]#)#;##// restrict to out-of-date resources#Map#map#=#scan#(#nonFiles#,#destDir#)#;##try#{#doResourceOperations#(#map#)#;#}##catch#(#BuildException#e#)#{##if#(#!#failonerror#)#{#log#(#"Warning: "#+#getMessage#(#e#)#,#Project#.#MSG_ERR#)#;#}#else#{#throw#e#;#}#}#}#}##finally#{##// clean up again, so this instance can be used a second##// time#file#=#savedFile#;#destFile#=#savedDestFile#;#destDir#=#savedDestDir#;##if#(#savedRc#!=#null#)#{#rcs#.#insertElementAt#(#savedRc#,#0#)#;#}##fileCopyMap#.#clear#(#)#;#dirCopyMap#.#clear#(#)#;#completeDirMap#.#clear#(#)#;#}#}