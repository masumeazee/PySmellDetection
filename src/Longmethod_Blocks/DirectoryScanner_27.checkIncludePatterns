void#checkIncludePatterns#(#)#{#ensureNonPatternSetsReady#(#)#;#Map#newroots#=#new#HashMap#(#)#;##// put in the newroots map the include patterns without##// wildcard tokens#for#(#int#i#=#0#;##i#<#includePatterns#.#length#;#i#++#)#{#String#pattern#=#includePatterns#[#i#]#.#toString#(#)#;##if#(#!#shouldSkipPattern#(#pattern#)#)#{#newroots#.#put#(#includePatterns#[#i#]#.#rtrimWildcardTokens#(#)#,#pattern#)#;#}#}##for#(#Iterator#iter#=#includeNonPatterns#.#entrySet#(#)#.#iterator#(#)#;##iter#.#hasNext#(#)#;#)#{#Map#.#Entry#entry#=#(#Map#.#Entry#)#iter#.#next#(#)#;#String#pattern#=#(#String#)#entry#.#getKey#(#)#;##if#(#!#shouldSkipPattern#(#pattern#)#)#{#newroots#.#put#(#(#TokenizedPath#)#entry#.#getValue#(#)#,#pattern#)#;#}#}##if#(#newroots#.#containsKey#(#TokenizedPath#.#EMPTY_PATH#)#&&#basedir#!=#null#)#{##// we are going to scan everything anyway#scandir#(#basedir#,#""#,#true#)#;#}#else#{##// only scan directories that can include matched files or##// directories#Iterator#it#=#newroots#.#entrySet#(#)#.#iterator#(#)#;#File#canonBase#=#null#;##if#(#basedir#!=#null#)#{#try#{#canonBase#=#basedir#.#getCanonicalFile#(#)#;#}##catch#(#IOException#ex#)#{#throw#new#BuildException#(#ex#)#;#}#}##while#(#it#.#hasNext#(#)#)#{#Map#.#Entry#entry#=#(#Map#.#Entry#)#it#.#next#(#)#;#TokenizedPath#currentPath#=#(#TokenizedPath#)#entry#.#getKey#(#)#;#String#currentelement#=#currentPath#.#toString#(#)#;##if#(#basedir#==#null#&&#!#FileUtils#.#isAbsolutePath#(#currentelement#)#)#{#continue#;#}##File#myfile#=#new#File#(#basedir#,#currentelement#)#;##if#(#myfile#.#exists#(#)#)#{##// may be on a case insensitive file system.  We want##// the results to show what's really on the disk, so##// we need to double check.#try#{#String#path#=#(#basedir#==#null#)#?#myfile#.#getCanonicalPath#(#)#:#FILE_UTILS#.#removeLeadingPath#(#canonBase#,#myfile#.#getCanonicalFile#(#)#)#;##if#(#!#path#.#equals#(#currentelement#)#||#ON_VMS#)#{#myfile#=#currentPath#.#findFile#(#basedir#,#true#)#;##if#(#myfile#!=#null#&&#basedir#!=#null#)#{#currentelement#=#FILE_UTILS#.#removeLeadingPath#(#basedir#,#myfile#)#;##if#(#!#currentPath#.#toString#(#)#.#equals#(#currentelement#)#)#{#currentPath#=#new#TokenizedPath#(#currentelement#)#;#}#}#}#}##catch#(#IOException#ex#)#{#throw#new#BuildException#(#ex#)#;#}#}##if#(#(#myfile#==#null#||#!#myfile#.#exists#(#)#)#&&#!#isCaseSensitive#(#)#)#{#File#f#=#currentPath#.#findFile#(#basedir#,#false#)#;##if#(#f#!=#null#&&#f#.#exists#(#)#)#{##// adapt currentelement to the case we've##// actually found#currentelement#=#(#basedir#==#null#)#?#f#.#getAbsolutePath#(#)#:#FILE_UTILS#.#removeLeadingPath#(#basedir#,#f#)#;#myfile#=#f#;#currentPath#=#new#TokenizedPath#(#currentelement#)#;#}#}##if#(#myfile#!=#null#&&#myfile#.#exists#(#)#)#{##if#(#!#followSymlinks#&&#currentPath#.#isSymlink#(#basedir#)#)#{##if#(#!#isExcluded#(#currentPath#)#)#{#notFollowedSymlinks#.#add#(#myfile#.#getAbsolutePath#(#)#)#;#}##continue#;#}##if#(#myfile#.#isDirectory#(#)#)#{##if#(#isIncluded#(#currentPath#)#&&#currentelement#.#length#(#)#>#0#)#{#accountForIncludedDir#(#currentPath#,#myfile#,#true#)#;#}#else#{#scandir#(#myfile#,#currentPath#,#true#)#;#}#}#else#{#String#originalpattern#=#(#String#)#entry#.#getValue#(#)#;#boolean#included#=#isCaseSensitive#(#)#?#originalpattern#.#equals#(#currentelement#)#:#originalpattern#.#equalsIgnoreCase#(#currentelement#)#;##if#(#included#)#{#accountForIncludedFile#(#currentPath#,#myfile#)#;#}#}#}#}#}#}