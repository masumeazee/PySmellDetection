void#testCircularReferenceCheck#(#)#{#FileList#f#=#new#FileList#(#)#;#project#.#addReference#(#"dummy"#,#f#)#;#f#.#setRefid#(#new#Reference#(#getProject#(#)#,#"dummy"#)#)#;##try#{#f#.#getDir#(#project#)#;#fail#(#"Can make FileList a Reference to itself."#)#;#}##catch#(#BuildException#be#)#{#assertEquals#(#"This data type contains a circular reference."#,#be#.#getMessage#(#)#)#;#}##try#{#f#.#getFiles#(#project#)#;#fail#(#"Can make FileList a Reference to itself."#)#;#}##catch#(#BuildException#be#)#{#assertEquals#(#"This data type contains a circular reference."#,#be#.#getMessage#(#)#)#;#}##// dummy1 --> dummy2 --> dummy3 --> dummy1#FileList#f1#=#new#FileList#(#)#;#project#.#addReference#(#"dummy1"#,#f1#)#;#f1#.#setRefid#(#new#Reference#(#getProject#(#)#,#"dummy2"#)#)#;#FileList#f2#=#new#FileList#(#)#;#project#.#addReference#(#"dummy2"#,#f2#)#;#f2#.#setRefid#(#new#Reference#(#getProject#(#)#,#"dummy3"#)#)#;#FileList#f3#=#new#FileList#(#)#;#project#.#addReference#(#"dummy3"#,#f3#)#;#f3#.#setRefid#(#new#Reference#(#getProject#(#)#,#"dummy1"#)#)#;##try#{#f1#.#getDir#(#project#)#;#fail#(#"Can make circular reference."#)#;#}##catch#(#BuildException#be#)#{#assertEquals#(#"This data type contains a circular reference."#,#be#.#getMessage#(#)#)#;#}##try#{#f1#.#getFiles#(#project#)#;#fail#(#"Can make circular reference."#)#;#}##catch#(#BuildException#be#)#{#assertEquals#(#"This data type contains a circular reference."#,#be#.#getMessage#(#)#)#;#}##// dummy1 --> dummy2 --> dummy3##// (which has the Project's basedir as root).#f1#=#new#FileList#(#)#;#project#.#addReference#(#"dummy1"#,#f1#)#;#f1#.#setRefid#(#new#Reference#(#getProject#(#)#,#"dummy2"#)#)#;#f2#=#new#FileList#(#)#;#project#.#addReference#(#"dummy2"#,#f2#)#;#f2#.#setRefid#(#new#Reference#(#getProject#(#)#,#"dummy3"#)#)#;#f3#=#new#FileList#(#)#;#project#.#addReference#(#"dummy3"#,#f3#)#;#f3#.#setDir#(#project#.#resolveFile#(#"."#)#)#;#File#dir#=#f1#.#getDir#(#project#)#;#assertEquals#(#"Dir is basedir"#,#dir#,#project#.#getBaseDir#(#)#)#;#}