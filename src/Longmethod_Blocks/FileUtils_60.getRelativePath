String#getRelativePath#(#File#fromFile#,#File#toFile#)#throws#Exception#{#String#fromPath#=#fromFile#.#getCanonicalPath#(#)#;#String#toPath#=#toFile#.#getCanonicalPath#(#)#;##// build the path stack info to compare#String#[#]#fromPathStack#=#getPathStack#(#fromPath#)#;#String#[#]#toPathStack#=#getPathStack#(#toPath#)#;##if#(#0#<#toPathStack#.#length#&&#0#<#fromPathStack#.#length#)#{##if#(#!#fromPathStack#[#0#]#.#equals#(#toPathStack#[#0#]#)#)#{##// not the same device (would be "" on Linux/Unix)##return#getPath#(#Arrays#.#asList#(#toPathStack#)#)#;#}#}#else#{##// no comparison possible##return#getPath#(#Arrays#.#asList#(#toPathStack#)#)#;#}##int#minLength#=#Math#.#min#(#fromPathStack#.#length#,#toPathStack#.#length#)#;#int#same#=#1#;##// Used outside the for loop##// get index of parts which are equal#for#(#;##same#<#minLength#&&#fromPathStack#[#same#]#.#equals#(#toPathStack#[#same#]#)#;#same#++#)#{##// Do nothing#}##List#relativePathStack#=#new#ArrayList#(#)#;##// if "from" part is longer, fill it up with ".."##// to reach path which is equal to both paths#for#(#int#i#=#same#;##i#<#fromPathStack#.#length#;#i#++#)#{#relativePathStack#.#add#(#".."#)#;#}##// fill it up path with parts which were not equal#for#(#int#i#=#same#;##i#<#toPathStack#.#length#;#i#++#)#{#relativePathStack#.#add#(#toPathStack#[#i#]#)#;#}##return#getPath#(#relativePathStack#)#;#}