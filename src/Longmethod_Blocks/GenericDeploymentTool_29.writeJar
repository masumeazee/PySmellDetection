void#writeJar#(#String#baseName#,#File#jarfile#,#Hashtable#files#,#String#publicId#)#throws#BuildException#{#JarOutputStream#jarStream#=#null#;##try#{##// clean the addedfiles set##if#(#addedfiles#==#null#)#{#addedfiles#=#new#HashSet#(#)#;#}#else#{#addedfiles#.#clear#(#)#;#}##/* If the jarfile already exists then whack it and recreate it.
             * Should probably think of a more elegant way to handle this
             * so that in case of errors we don't leave people worse off
             * than when we started =)
             */##if#(#jarfile#.#exists#(#)#)#{#jarfile#.#delete#(#)#;#}##jarfile#.#getParentFile#(#)#.#mkdirs#(#)#;#jarfile#.#createNewFile#(#)#;#InputStream#in#=#null#;#Manifest#manifest#=#null#;##try#{#File#manifestFile#=#(#File#)#files#.#get#(#MANIFEST#)#;##if#(#manifestFile#!=#null#&&#manifestFile#.#exists#(#)#)#{#in#=#new#FileInputStream#(#manifestFile#)#;#}#else#{#String#defaultManifest#=#"/org/apache/tools/ant/defaultManifest.mf"#;#in#=#this#.#getClass#(#)#.#getResourceAsStream#(#defaultManifest#)#;##if#(#in#==#null#)#{#throw#new#BuildException#(#"Could not find "#+#"default manifest: "#+#defaultManifest#)#;#}#}##manifest#=#new#Manifest#(#in#)#;#}##catch#(#IOException#e#)#{#throw#new#BuildException#(#"Unable to read manifest"#,#e#,#getLocation#(#)#)#;#}##finally#{##if#(#in#!=#null#)#{#in#.#close#(#)#;#}#}##// Create the streams necessary to write the jarfile#jarStream#=#new#JarOutputStream#(#new#FileOutputStream#(#jarfile#)#,#manifest#)#;#jarStream#.#setMethod#(#JarOutputStream#.#DEFLATED#)#;##// Loop through all the class files found and add them to the jar#for#(#Iterator#entryIterator#=#files#.#keySet#(#)#.#iterator#(#)#;##entryIterator#.#hasNext#(#)#;#)#{#String#entryName#=#(#String#)#entryIterator#.#next#(#)#;##if#(#entryName#.#equals#(#MANIFEST#)#)#{#continue#;#}##File#entryFile#=#(#File#)#files#.#get#(#entryName#)#;#log#(#"adding file '"#+#entryName#+#"'"#,#Project#.#MSG_VERBOSE#)#;#addFileToJar#(#jarStream#,#entryFile#,#entryName#)#;##// See if there are any inner classes for this class and add them in if there are#InnerClassFilenameFilter#flt#=#new#InnerClassFilenameFilter#(#entryFile#.#getName#(#)#)#;#File#entryDir#=#entryFile#.#getParentFile#(#)#;#String#[#]#innerfiles#=#entryDir#.#list#(#flt#)#;##if#(#innerfiles#!=#null#)#{#for#(#int#i#=#0#,#n#=#innerfiles#.#length#;##i#<#n#;#i#++#)#{##//get and clean up innerclass name#int#entryIndex#=#entryName#.#lastIndexOf#(#entryFile#.#getName#(#)#)#-#1#;##if#(#entryIndex#<#0#)#{#entryName#=#innerfiles#[#i#]#;#}#else#{#entryName#=#entryName#.#substring#(#0#,#entryIndex#)#+#File#.#separatorChar#+#innerfiles#[#i#]#;#}##// link the file#entryFile#=#new#File#(#config#.#srcDir#,#entryName#)#;#log#(#"adding innerclass file '"#+#entryName#+#"'"#,#Project#.#MSG_VERBOSE#)#;#addFileToJar#(#jarStream#,#entryFile#,#entryName#)#;#}#}#}#}##catch#(#IOException#ioe#)#{#String#msg#=#"IOException while processing ejb-jar file '"#+#jarfile#.#toString#(#)#+#"'. Details: "#+#ioe#.#getMessage#(#)#;#throw#new#BuildException#(#msg#,#ioe#)#;#}##finally#{##if#(#jarStream#!=#null#)#{#try#{#jarStream#.#close#(#)#;#}##catch#(#IOException#closeException#)#{##// ignore#}#}#}#}