AttributeSetter#createAttributeSetter#(#final#Method#m#,#Class#arg#,#final#String#attrName#)#{##// use wrappers for primitive classes, e.g. int and##// Integer are treated identically#final#Class#reflectedArg#=#PRIMITIVE_TYPE_MAP#.#containsKey#(#arg#)#?#(#Class#)#PRIMITIVE_TYPE_MAP#.#get#(#arg#)#:#arg#;##// Object.class - it gets handled differently by AttributeSetter##if#(#java#.#lang#.#Object#.#class#==#reflectedArg#)#{##return#new#AttributeSetter#(#m#,#arg#)#{#public#void#set#(#Project#p#,#Object#parent#,#String#value#)#throws#InvocationTargetException#,#IllegalAccessException#{#throw#new#BuildException#(#"Internal ant problem - this should not get called"#)#;#}#}#;#}##// simplest case - setAttribute expects String##if#(#java#.#lang#.#String#.#class#.#equals#(#reflectedArg#)#)#{##return#new#AttributeSetter#(#m#,#arg#)#{#public#void#set#(#Project#p#,#Object#parent#,#String#value#)#throws#InvocationTargetException#,#IllegalAccessException#{#m#.#invoke#(#parent#,#(#Object#[#]#)#new#String#[#]#{#value#}#)#;#}#}#;#}##// char and Character get special treatment - take the first character##if#(#java#.#lang#.#Character#.#class#.#equals#(#reflectedArg#)#)#{##return#new#AttributeSetter#(#m#,#arg#)#{#public#void#set#(#Project#p#,#Object#parent#,#String#value#)#throws#InvocationTargetException#,#IllegalAccessException#{##if#(#value#.#length#(#)#==#0#)#{#throw#new#BuildException#(#"The value \"\" is not a "#+#"legal value for attribute \""#+#attrName#+#"\""#)#;#}##m#.#invoke#(#parent#,#(#Object#[#]#)#new#Character#[#]#{#new#Character#(#value#.#charAt#(#0#)#)#}#)#;#}#}#;#}##// boolean and Boolean get special treatment because we have a nice method in Project##if#(#java#.#lang#.#Boolean#.#class#.#equals#(#reflectedArg#)#)#{##return#new#AttributeSetter#(#m#,#arg#)#{#public#void#set#(#Project#p#,#Object#parent#,#String#value#)#throws#InvocationTargetException#,#IllegalAccessException#{#m#.#invoke#(#parent#,#(#Object#[#]#)#new#Boolean#[#]#{#Project#.#toBoolean#(#value#)#?#Boolean#.#TRUE#:#Boolean#.#FALSE#}#)#;#}#}#;#}##// Class doesn't have a String constructor but a decent factory method##if#(#java#.#lang#.#Class#.#class#.#equals#(#reflectedArg#)#)#{##return#new#AttributeSetter#(#m#,#arg#)#{#public#void#set#(#Project#p#,#Object#parent#,#String#value#)#throws#InvocationTargetException#,#IllegalAccessException#,#BuildException#{#try#{#m#.#invoke#(#parent#,#new#Object#[#]#{#Class#.#forName#(#value#)#}#)#;#}##catch#(#ClassNotFoundException#ce#)#{#throw#new#BuildException#(#ce#)#;#}#}#}#;#}##// resolve relative paths through Project##if#(#java#.#io#.#File#.#class#.#equals#(#reflectedArg#)#)#{##return#new#AttributeSetter#(#m#,#arg#)#{#public#void#set#(#Project#p#,#Object#parent#,#String#value#)#throws#InvocationTargetException#,#IllegalAccessException#{#m#.#invoke#(#parent#,#new#Object#[#]#{#p#.#resolveFile#(#value#)#}#)#;#}#}#;#}##// resolve Resources/FileProviders as FileResources relative to Project:##if#(#Resource#.#class#.#equals#(#reflectedArg#)#||#FileProvider#.#class#.#equals#(#reflectedArg#)#)#{##return#new#AttributeSetter#(#m#,#arg#)#{#void#set#(#Project#p#,#Object#parent#,#String#value#)#throws#InvocationTargetException#,#IllegalAccessException#,#BuildException#{#m#.#invoke#(#parent#,#new#Object#[#]#{#new#FileResource#(#p#,#p#.#resolveFile#(#value#)#)#}#)#;#}#;#}#;#}##// EnumeratedAttributes have their own helper class##if#(#EnumeratedAttribute#.#class#.#isAssignableFrom#(#reflectedArg#)#)#{##return#new#AttributeSetter#(#m#,#arg#)#{#public#void#set#(#Project#p#,#Object#parent#,#String#value#)#throws#InvocationTargetException#,#IllegalAccessException#,#BuildException#{#try#{#EnumeratedAttribute#ea#=#(#EnumeratedAttribute#)#reflectedArg#.#newInstance#(#)#;#ea#.#setValue#(#value#)#;#m#.#invoke#(#parent#,#new#Object#[#]#{#ea#}#)#;#}##catch#(#InstantiationException#ie#)#{#throw#new#BuildException#(#ie#)#;#}#}#}#;#}##AttributeSetter#setter#=#getEnumSetter#(#reflectedArg#,#m#,#arg#)#;##if#(#setter#!=#null#)#{##return#setter#;#}##if#(#java#.#lang#.#Long#.#class#.#equals#(#reflectedArg#)#)#{##return#new#AttributeSetter#(#m#,#arg#)#{#public#void#set#(#Project#p#,#Object#parent#,#String#value#)#throws#InvocationTargetException#,#IllegalAccessException#,#BuildException#{#try#{#m#.#invoke#(#parent#,#new#Object#[#]#{#new#Long#(#StringUtils#.#parseHumanSizes#(#value#)#)#}#)#;#}##catch#(#NumberFormatException#e#)#{#throw#new#BuildException#(#"Can't assign non-numeric"#+#" value '"#+#value#+#"' to"#+#" attribute "#+#attrName#)#;#}##catch#(#InvocationTargetException#e#)#{#throw#e#;#}##catch#(#IllegalAccessException#e#)#{#throw#e#;#}##catch#(#Exception#e#)#{#throw#new#BuildException#(#e#)#;#}#}#}#;#}##// worst case. look for a public String constructor and use it##// also supports new Whatever(Project, String) as for Path or Reference##// This is used (deliberately) for all primitives/wrappers other than##// char, boolean, and long.#boolean#includeProject#;#Constructor#c#;##try#{##// First try with Project.#c#=#reflectedArg#.#getConstructor#(#new#Class#[#]#{#Project#.#class#,#String#.#class#}#)#;#includeProject#=#true#;#}##catch#(#NoSuchMethodException#nme#)#{##// OK, try without.#try#{#c#=#reflectedArg#.#getConstructor#(#new#Class#[#]#{#String#.#class#}#)#;#includeProject#=#false#;#}##catch#(#NoSuchMethodException#nme2#)#{##// Well, no matching constructor.##return#null#;#}#}##final#boolean#finalIncludeProject#=#includeProject#;#final#Constructor#finalConstructor#=#c#;##return#new#AttributeSetter#(#m#,#arg#)#{#public#void#set#(#Project#p#,#Object#parent#,#String#value#)#throws#InvocationTargetException#,#IllegalAccessException#,#BuildException#{#try#{#Object#[#]#args#=#finalIncludeProject#?#new#Object#[#]#{#p#,#value#}##:#new#Object#[#]#{#value#}#;#Object#attribute#=#finalConstructor#.#newInstance#(#args#)#;##if#(#p#!=#null#)#{#p#.#setProjectReference#(#attribute#)#;#}##m#.#invoke#(#parent#,#new#Object#[#]#{#attribute#}#)#;#}##catch#(#InvocationTargetException#e#)#{#Throwable#cause#=#e#.#getCause#(#)#;##if#(#cause#instanceof#IllegalArgumentException#)#{#throw#new#BuildException#(#"Can't assign value '"#+#value#+#"' to attribute "#+#attrName#+#", reason: "#+#cause#.#getClass#(#)#+#" with message '"#+#cause#.#getMessage#(#)#+#"'"#)#;#}##throw#e#;#}##catch#(#InstantiationException#ie#)#{#throw#new#BuildException#(#ie#)#;#}#}#}#;#}