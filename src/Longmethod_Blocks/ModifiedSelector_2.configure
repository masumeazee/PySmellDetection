void#configure#(#)#{##//##// -----  The "Singleton"  -----##//##if#(#isConfigured#)#{##return#;#}##isConfigured#=#true#;##//##// -----  Set default values  -----##//#Project#p#=#getProject#(#)#;#String#filename#=#"cache.properties"#;#File#cachefile#=#null#;##if#(#p#!=#null#)#{##// normal use inside Ant#cachefile#=#new#File#(#p#.#getBaseDir#(#)#,#filename#)#;##// set self as a BuildListener to delay cachefile saves#getProject#(#)#.#addBuildListener#(#this#)#;#}#else#{##// no reference to project - e.g. during normal JUnit tests#cachefile#=#new#File#(#filename#)#;#setDelayUpdate#(#false#)#;#}##Cache#defaultCache#=#new#PropertiesfileCache#(#cachefile#)#;#Algorithm#defaultAlgorithm#=#new#DigestAlgorithm#(#)#;#Comparator#defaultComparator#=#new#EqualComparator#(#)#;##//##// -----  Set the main attributes, pattern '*'  -----##//#for#(#Iterator#itConfig#=#configParameter#.#iterator#(#)#;##itConfig#.#hasNext#(#)#;#)#{#Parameter#par#=#(#Parameter#)#itConfig#.#next#(#)#;##if#(#par#.#getName#(#)#.#indexOf#(#"."#)#>#0#)#{##// this is a *.* parameter for later use#specialParameter#.#add#(#par#)#;#}#else#{#useParameter#(#par#)#;#}#}##configParameter#=#new#Vector#(#)#;##// specify the algorithm classname##if#(#algoName#!=#null#)#{##// use Algorithm defined via name##if#(#"hashvalue"#.#equals#(#algoName#.#getValue#(#)#)#)#{#algorithm#=#new#HashvalueAlgorithm#(#)#;#}#else##if#(#"digest"#.#equals#(#algoName#.#getValue#(#)#)#)#{#algorithm#=#new#DigestAlgorithm#(#)#;#}#else##if#(#"checksum"#.#equals#(#algoName#.#getValue#(#)#)#)#{#algorithm#=#new#ChecksumAlgorithm#(#)#;#}#}#else#{##if#(#algorithmClass#!=#null#)#{##// use Algorithm specified by classname#algorithm#=#(#Algorithm#)#loadClass#(#algorithmClass#,#"is not an Algorithm."#,#Algorithm#.#class#)#;#}#else#{##// nothing specified - use default#algorithm#=#defaultAlgorithm#;#}#}##// specify the cache classname##if#(#cacheName#!=#null#)#{##// use Cache defined via name##if#(#"propertyfile"#.#equals#(#cacheName#.#getValue#(#)#)#)#{#cache#=#new#PropertiesfileCache#(#)#;#}#}#else#{##if#(#cacheClass#!=#null#)#{##// use Cache specified by classname#cache#=#(#Cache#)#loadClass#(#cacheClass#,#"is not a Cache."#,#Cache#.#class#)#;#}#else#{##// nothing specified - use default#cache#=#defaultCache#;#}#}##// specify the comparator classname##if#(#compName#!=#null#)#{##// use Algorithm defined via name##if#(#"equal"#.#equals#(#compName#.#getValue#(#)#)#)#{#comparator#=#new#EqualComparator#(#)#;#}#else##if#(#"rule"#.#equals#(#compName#.#getValue#(#)#)#)#{##// TODO there is a problem with the constructor for the RBC.##// you have to provide the rules in the constructors - no setters##// available.#throw#new#BuildException#(#"RuleBasedCollator not yet supported."#)#;##// Have to think about lazy initialization here...  JHM##// comparator = new java.text.RuleBasedCollator();#}#}#else#{##if#(#comparatorClass#!=#null#)#{##// use Algorithm specified by classname#comparator#=#(#Comparator#)#loadClass#(#comparatorClass#,#"is not a Comparator."#,#Comparator#.#class#)#;#}#else#{##// nothing specified - use default#comparator#=#defaultComparator#;#}#}##//##// -----  Set the special attributes, pattern '*.*'  -----##//#for#(#Iterator#itSpecial#=#specialParameter#.#iterator#(#)#;##itSpecial#.#hasNext#(#)#;#)#{#Parameter#par#=#(#Parameter#)#itSpecial#.#next#(#)#;#useParameter#(#par#)#;#}##specialParameter#=#new#Vector#(#)#;#}