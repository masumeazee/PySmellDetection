void#process#(#String#line#)#throws#BuildException#{##if#(#parent#.#util#.#match#(#"/^exit/"#,#line#)#)#{##return#;#}##//Throw exception on errors (except up-to-date)##//##//When a server is down, the code expects :##//Perforce client error:##//Connect to server failed; check $P4PORT.##//TCP connect to localhost:1666 failed.##//connect: localhost:1666: Connection refused##//Some forms producing commands (p4 -s change -o) do tag the output##//others don't.....##//Others mark errors as info, for example edit a file##//which is already open for edit.....##//Just look for error: - catches most things....##if#(#parent#.#util#.#match#(#"/^error:/"#,#line#)#||#parent#.#util#.#match#(#"/^Perforce client error:/"#,#line#)#)#{##//when running labelsync, if view elements are in sync,##//Perforce produces a line of output##//looking like this one :##//error: //depot/file2 - label in sync.##if#(#!#parent#.#util#.#match#(#"/label in sync/"#,#line#)#&&#!#parent#.#util#.#match#(#"/up-to-date/"#,#line#)#)#{#parent#.#setInError#(#true#)#;#}#else#{##//sync says "error:" when a file is up-to-date#line#=#parent#.#util#.#substitute#(#"s/^[^:]*: //"#,#line#)#;#}#}#else##if#(#parent#.#util#.#match#(#"/^info.*?:/"#,#line#)#)#{##//sometimes there's "info1:#line#=#parent#.#util#.#substitute#(#"s/^[^:]*: //"#,#line#)#;#}##parent#.#log#(#line#,#parent#.#getInError#(#)#?#Project#.#MSG_ERR#:#Project#.#MSG_INFO#)#;##if#(#parent#.#getInError#(#)#)#{#parent#.#setErrorMessage#(#parent#.#getErrorMessage#(#)#+#line#+#StringUtils#.#LINE_SEP#)#;#}#}