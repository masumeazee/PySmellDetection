void#testCircularReferenceCheck#(#)#{##// catalog <--> catalog#project#.#addReference#(#"catalog"#,#catalog#)#;#catalog#.#setRefid#(#new#Reference#(#project#,#"catalog"#)#)#;##try#{#InputSource#result#=#catalog#.#resolveEntity#(#"PUBLIC ID ONE"#,#"i/dont/exist.dtd"#)#;#fail#(#"Can make XMLCatalog a Reference to itself."#)#;#}##catch#(#BuildException#be#)#{#assertEquals#(#"This data type contains a circular reference."#,#be#.#getMessage#(#)#)#;#}##catch#(#Exception#e#)#{#fail#(#"resolveEntity() failed!"#+#e#.#toString#(#)#)#;#}##// catalog1 --> catalog2 --> catalog3 --> catalog1#XMLCatalog#catalog1#=#newCatalog#(#)#;#project#.#addReference#(#"catalog1"#,#catalog1#)#;#XMLCatalog#catalog2#=#newCatalog#(#)#;#project#.#addReference#(#"catalog2"#,#catalog2#)#;#XMLCatalog#catalog3#=#newCatalog#(#)#;#project#.#addReference#(#"catalog3"#,#catalog3#)#;#catalog3#.#setRefid#(#new#Reference#(#project#,#"catalog1"#)#)#;#catalog2#.#setRefid#(#new#Reference#(#project#,#"catalog3"#)#)#;#catalog1#.#setRefid#(#new#Reference#(#project#,#"catalog2"#)#)#;##try#{#InputSource#result#=#catalog1#.#resolveEntity#(#"PUBLIC ID ONE"#,#"i/dont/exist.dtd"#)#;#fail#(#"Can make circular reference"#)#;#}##catch#(#BuildException#be#)#{#assertEquals#(#"This data type contains a circular reference."#,#be#.#getMessage#(#)#)#;#}##catch#(#Exception#e#)#{#fail#(#"resolveEntity() failed!"#+#e#.#toString#(#)#)#;#}#}