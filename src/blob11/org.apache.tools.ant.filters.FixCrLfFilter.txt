Reader#chain#(#final#Reader#rdr#)#{#try#{#FixCrLfFilter#newFilter#=#new#FixCrLfFilter#(#rdr#)#;#newFilter#.#setJavafiles#(#getJavafiles#(#)#)#;#newFilter#.#setEol#(#getEol#(#)#)#;#newFilter#.#setTab#(#getTab#(#)#)#;#newFilter#.#setTablength#(#getTablength#(#)#)#;#newFilter#.#setEof#(#getEof#(#)#)#;#newFilter#.#setFixlast#(#getFixlast#(#)#)#;#newFilter#.#initInternalFilters#(#)#;#return#newFilter#;#}#catch#(#IOException#e#)#{#throw#new#BuildException#(#e#)#;#}#}##AddAsisRemove#getEof#(#)#{#// Return copy so that the call must call setEof() to change the state#// of fixCRLF#return#ctrlz#.#newInstance#(#)#;#}##CrLf#getEol#(#)#{#// Return copy so that the call must call setEol() to change the state#// of fixCRLF#return#eol#.#newInstance#(#)#;#}##boolean#getFixlast#(#)#{#return#fixlast#;#}##boolean#getJavafiles#(#)#{#return#javafiles#;#}##AddAsisRemove#getTab#(#)#{#// Return copy so that the caller must call setTab() to change the state#// of fixCRLF.#return#tabs#.#newInstance#(#)#;#}##int#getTablength#(#)#{#return#tabLength#;#}##String#calculateEolString#(#CrLf#eol#)#{#// Calculate the EOL string per the current config#if#(#eol#==#CrLf#.#ASIS#)#{#return#System#.#getProperty#(#"line.separator"#)#;#}#if#(#eol#==#CrLf#.#CR#||#eol#==#CrLf#.#MAC#)#{#return#"\r"#;#}#if#(#eol#==#CrLf#.#CRLF#||#eol#==#CrLf#.#DOS#)#{#return#"\r\n"#;#}#// assume (eol == CrLf.LF || eol == CrLf.UNIX)#return#"\n"#;#}##void#initInternalFilters#(#)#{#// If I'm removing an EOF character, do so first so that the other#// filters don't see that character.#in#=#(#ctrlz#==#AddAsisRemove#.#REMOVE#)#?#new#RemoveEofFilter#(#in#)#:#in#;#// Change all EOL characters to match the calculated EOL string. If#// configured to do so, append a trailing EOL so that the file ends on#// a EOL.#in#=#new#NormalizeEolFilter#(#in#,#calculateEolString#(#eol#)#,#getFixlast#(#)#)#;#if#(#tabs#!=#AddAsisRemove#.#ASIS#)#{#// If filtering Java source, prevent changes to whitespace in#// character and string literals.#if#(#getJavafiles#(#)#)#{#in#=#new#MaskJavaTabLiteralsFilter#(#in#)#;#}#// Add/Remove tabs#in#=#(#tabs#==#AddAsisRemove#.#ADD#)#?#(#Reader#)#new#AddTabFilter#(#in#,#getTablength#(#)#)#:#(#Reader#)#new#RemoveTabFilter#(#in#,#getTablength#(#)#)#;#}#// Add missing EOF character#in#=#(#ctrlz#==#AddAsisRemove#.#ADD#)#?#new#AddEofFilter#(#in#)#:#in#;#initialized#=#true#;#}##int#read#(#)#throws#IOException#{#if#(#!#initialized#)#{#initInternalFilters#(#)#;#}#return#in#.#read#(#)#;#}##void#setEof#(#AddAsisRemove#attr#)#{#ctrlz#=#attr#.#resolve#(#)#;#}##void#setEol#(#CrLf#attr#)#{#eol#=#attr#.#resolve#(#)#;#}##void#setFixlast#(#boolean#fixlast#)#{#this#.#fixlast#=#fixlast#;#}##void#setJavafiles#(#boolean#javafiles#)#{#this#.#javafiles#=#javafiles#;#}##void#setTab#(#AddAsisRemove#attr#)#{#tabs#=#attr#.#resolve#(#)#;#}##void#setTablength#(#int#tabLength#)#throws#IOException#{#if#(#tabLength#<#MIN_TAB_LENGTH#||#tabLength#>#MAX_TAB_LENGTH#)#{#throw#new#IOException#(#"tablength must be between "#+#MIN_TAB_LENGTH#+#" and "#+#MAX_TAB_LENGTH#)#;#}#this#.#tabLength#=#tabLength#;#}##void#push#(#char#c#)#{#push#(#(#int#)#c#)#;#}##void#push#(#int#c#)#{#try#{#preempt#[#preemptIndex#++#]#=#c#;#}#catch#(#ArrayIndexOutOfBoundsException#e#)#{#int#[#]#p2#=#new#int#[#preempt#.#length#*#2#]#;#System#.#arraycopy#(#preempt#,#0#,#p2#,#0#,#preempt#.#length#)#;#preempt#=#p2#;#push#(#c#)#;#}#}##void#push#(#char#[#]#cs#,#int#start#,#int#length#)#{#for#(#int#i#=#start#+#length#-#1#;#i#>=#start#;#)#{#push#(#cs#[#i#--#]#)#;#}#}##void#push#(#char#[#]#cs#)#{#push#(#cs#,#0#,#cs#.#length#)#;#}##void#push#(#String#s#)#{#push#(#s#.#toCharArray#(#)#)#;#}##boolean#editsBlocked#(#)#{#return#in#instanceof#SimpleFilterReader#&&#(#(#SimpleFilterReader#)#in#)#.#editsBlocked#(#)#;#}##int#read#(#)#throws#java#.#io#.#IOException#{#return#preemptIndex#>#0#?#preempt#[#--#preemptIndex#]#:#in#.#read#(#)#;#}##void#close#(#)#throws#java#.#io#.#IOException#{#in#.#close#(#)#;#}##void#reset#(#)#throws#IOException#{#in#.#reset#(#)#;#}##boolean#markSupported#(#)#{#return#in#.#markSupported#(#)#;#}##boolean#ready#(#)#throws#java#.#io#.#IOException#{#return#in#.#ready#(#)#;#}##void#mark#(#int#i#)#throws#java#.#io#.#IOException#{#in#.#mark#(#i#)#;#}##long#skip#(#long#i#)#throws#java#.#io#.#IOException#{#return#in#.#skip#(#i#)#;#}##int#read#(#char#[#]#buf#)#throws#java#.#io#.#IOException#{#return#read#(#buf#,#0#,#buf#.#length#)#;#}##int#read#(#char#[#]#buf#,#int#start#,#int#length#)#throws#java#.#io#.#IOException#{#int#count#=#0#;#int#c#=#0#;#// CheckStyle:InnerAssignment OFF - leave alone#while#(#length#--#>#0#&&#(#c#=#this#.#read#(#)#)#!=#-#1#)#{#buf#[#start#++#]#=#(#char#)#c#;#count#++#;#}#// if at EOF with no characters in the buffer, return EOF#return#(#count#==#0#&&#c#==#-#1#)#?#-#1#:#count#;#}##boolean#editsBlocked#(#)#{#return#editsBlocked#||#super#.#editsBlocked#(#)#;#}##int#read#(#)#throws#IOException#{#int#thisChar#=#super#.#read#(#)#;#// Mask, block from being edited, all characters in constants.#editsBlocked#=#(#state#==#IN_CHAR_CONST#||#state#==#IN_STR_CONST#)#;#switch#(#state#)#{#case#JAVA#:#// The current character is always emitted.#switch#(#thisChar#)#{#case#'\''#:#state#=#IN_CHAR_CONST#;#break#;#case#'"'#:#state#=#IN_STR_CONST#;#break#;#case#'/'#:#state#=#TRANS_TO_COMMENT#;#break#;#default#:#// Fall tru#}#break#;#case#IN_CHAR_CONST#:#switch#(#thisChar#)#{#case#'\''#:#state#=#JAVA#;#break#;#default#:#// Fall tru#}#break#;#case#IN_STR_CONST#:#switch#(#thisChar#)#{#case#'"'#:#state#=#JAVA#;#break#;#default#:#// Fall tru#}#break#;#case#IN_SINGLE_COMMENT#:#// The current character is always emitted.#switch#(#thisChar#)#{#case#'\n'#:#case#'\r'#:#// EOL#state#=#JAVA#;#break#;#default#:#// Fall tru#}#break#;#case#IN_MULTI_COMMENT#:#// The current character is always emitted.#switch#(#thisChar#)#{#case#'*'#:#state#=#TRANS_FROM_MULTI#;#break#;#default#:#// Fall tru#}#break#;#case#TRANS_TO_COMMENT#:#// The current character is always emitted.#switch#(#thisChar#)#{#case#'*'#:#state#=#IN_MULTI_COMMENT#;#break#;#case#'/'#:#state#=#IN_SINGLE_COMMENT#;#break#;#case#'\''#:#state#=#IN_CHAR_CONST#;#break#;#case#'"'#:#state#=#IN_STR_CONST#;#break#;#default#:#state#=#JAVA#;#}#break#;#case#TRANS_FROM_MULTI#:#// The current character is always emitted.#switch#(#thisChar#)#{#case#'/'#:#state#=#JAVA#;#break#;#default#:#// Fall tru#}#break#;#default#:#// Fall tru#}#return#thisChar#;#}##int#read#(#)#throws#IOException#{#int#thisChar#=#super#.#read#(#)#;#if#(#normalizedEOL#==#0#)#{#int#numEOL#=#0#;#boolean#atEnd#=#false#;#switch#(#thisChar#)#{#case#CTRLZ#:#int#c#=#super#.#read#(#)#;#if#(#c#==#-#1#)#{#atEnd#=#true#;#if#(#fixLast#&&#!#previousWasEOL#)#{#numEOL#=#1#;#push#(#thisChar#)#;#}#}#else#{#push#(#c#)#;#}#break#;#case#-#1#:#atEnd#=#true#;#if#(#fixLast#&&#!#previousWasEOL#)#{#numEOL#=#1#;#}#break#;#case#'\n'#:#// EOL was "\n"#numEOL#=#1#;#break#;#case#'\r'#:#numEOL#=#1#;#int#c1#=#super#.#read#(#)#;#int#c2#=#super#.#read#(#)#;#if#(#c1#==#'\r'#&&#c2#==#'\n'#)#{#// EOL was "\r\r\n"#}#else#if#(#c1#==#'\r'#)#{#// EOL was "\r\r" - handle as two consecutive "\r" and#// "\r"#numEOL#=#2#;#push#(#c2#)#;#}#else#if#(#c1#==#'\n'#)#{#// EOL was "\r\n"#push#(#c2#)#;#}#else#{#// EOL was "\r"#push#(#c2#)#;#push#(#c1#)#;#}#default#:#// Fall tru#}#if#(#numEOL#>#0#)#{#while#(#numEOL#--#>#0#)#{#push#(#eol#)#;#normalizedEOL#+=#eol#.#length#;#}#previousWasEOL#=#true#;#thisChar#=#read#(#)#;#}#else#if#(#!#atEnd#)#{#previousWasEOL#=#false#;#}#}#else#{#normalizedEOL#--#;#}#return#thisChar#;#}##int#read#(#)#throws#IOException#{#int#thisChar#=#super#.#read#(#)#;#// if source is EOF but last character was NOT ctrl-z, return ctrl-z#if#(#thisChar#==#-#1#)#{#if#(#lastChar#!=#CTRLZ#)#{#lastChar#=#CTRLZ#;#return#lastChar#;#}#}#else#{#lastChar#=#thisChar#;#}#return#thisChar#;#}##int#read#(#)#throws#IOException#{#int#lookAhead2#=#super#.#read#(#)#;#// If source at EOF and lookAhead is ctrl-z, return EOF (NOT ctrl-z)#if#(#lookAhead2#==#-#1#&&#lookAhead#==#CTRLZ#)#{#return#-#1#;#}#// Return current look-ahead#int#i#=#lookAhead#;#lookAhead#=#lookAhead2#;#return#i#;#}##int#read#(#)#throws#IOException#{#int#c#=#super#.#read#(#)#;#switch#(#c#)#{#case#'\r'#:#case#'\n'#:#columnNumber#=#0#;#break#;#case#' '#:#columnNumber#++#;#if#(#!#editsBlocked#(#)#)#{#int#colNextTab#=#(#(#columnNumber#+#tabLength#-#1#)#/#tabLength#)#*#tabLength#;#int#countSpaces#=#1#;#int#numTabs#=#0#;#scanWhitespace#:#while#(#(#c#=#super#.#read#(#)#)#!=#-#1#)#{#switch#(#c#)#{#case#' '#:#if#(#++#columnNumber#==#colNextTab#)#{#numTabs#++#;#countSpaces#=#0#;#colNextTab#+=#tabLength#;#}#else#{#countSpaces#++#;#}#break#;#case#'\t'#:#columnNumber#=#colNextTab#;#numTabs#++#;#countSpaces#=#0#;#colNextTab#+=#tabLength#;#break#;#default#:#push#(#c#)#;#break#scanWhitespace#;#}#}#while#(#countSpaces#--#>#0#)#{#push#(#' '#)#;#columnNumber#--#;#}#while#(#numTabs#--#>#0#)#{#push#(#'\t'#)#;#columnNumber#-=#tabLength#;#}#c#=#super#.#read#(#)#;#switch#(#c#)#{#case#' '#:#columnNumber#++#;#break#;#case#'\t'#:#columnNumber#+=#tabLength#;#break#;#default#:#// Fall tru#}#}#break#;#case#'\t'#:#columnNumber#=#(#(#columnNumber#+#tabLength#-#1#)#/#tabLength#)#*#tabLength#;#break#;#default#:#columnNumber#++#;#}#return#c#;#}##int#read#(#)#throws#IOException#{#int#c#=#super#.#read#(#)#;#switch#(#c#)#{#case#'\r'#:#case#'\n'#:#columnNumber#=#0#;#break#;#case#'\t'#:#int#width#=#tabLength#-#columnNumber#%#tabLength#;#if#(#!#editsBlocked#(#)#)#{#for#(#;#width#>#1#;#width#--#)#{#push#(#' '#)#;#}#c#=#' '#;#}#columnNumber#+=#width#;#break#;#default#:#columnNumber#++#;#}#return#c#;#}##String#[#]#getValues#(#)#{#return#new#String#[#]#{#"add"#,#"asis"#,#"remove"#}#;#}##boolean#equals#(#Object#other#)#{#return#other#instanceof#AddAsisRemove#&&#getIndex#(#)#==#(#(#AddAsisRemove#)#other#)#.#getIndex#(#)#;#}##int#hashCode#(#)#{#return#getIndex#(#)#;#}##AddAsisRemove#resolve#(#)#throws#IllegalStateException#{#if#(#this#.#equals#(#ASIS#)#)#{#return#ASIS#;#}#if#(#this#.#equals#(#ADD#)#)#{#return#ADD#;#}#if#(#this#.#equals#(#REMOVE#)#)#{#return#REMOVE#;#}#throw#new#IllegalStateException#(#"No replacement for "#+#this#)#;#}##AddAsisRemove#newInstance#(#)#{#return#newInstance#(#getValue#(#)#)#;#}##AddAsisRemove#newInstance#(#String#value#)#{#AddAsisRemove#a#=#new#AddAsisRemove#(#)#;#a#.#setValue#(#value#)#;#return#a#;#}##String#[#]#getValues#(#)#{#return#new#String#[#]#{#"asis"#,#"cr"#,#"lf"#,#"crlf"#,#"mac"#,#"unix"#,#"dos"#}#;#}##boolean#equals#(#Object#other#)#{#return#other#instanceof#CrLf#&&#getIndex#(#)#==#(#(#CrLf#)#other#)#.#getIndex#(#)#;#}##int#hashCode#(#)#{#return#getIndex#(#)#;#}##CrLf#resolve#(#)#{#if#(#this#.#equals#(#ASIS#)#)#{#return#ASIS#;#}#if#(#this#.#equals#(#CR#)#||#this#.#equals#(#MAC#)#)#{#return#CR#;#}#if#(#this#.#equals#(#CRLF#)#||#this#.#equals#(#DOS#)#)#{#return#CRLF#;#}#if#(#this#.#equals#(#LF#)#||#this#.#equals#(#UNIX#)#)#{#return#LF#;#}#throw#new#IllegalStateException#(#"No replacement for "#+#this#)#;#}##CrLf#newInstance#(#)#{#return#newInstance#(#getValue#(#)#)#;#}##CrLf#newInstance#(#String#value#)#{#CrLf#c#=#new#CrLf#(#)#;#c#.#setValue#(#value#)#;#return#c#;#}##