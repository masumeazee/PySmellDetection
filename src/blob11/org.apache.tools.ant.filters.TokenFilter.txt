int#read#(#)#throws#IOException#{#if#(#tokenizer#==#null#)#{#tokenizer#=#new#LineTokenizer#(#)#;#}#while#(#line#==#null#||#line#.#length#(#)#==#0#)#{#line#=#tokenizer#.#getToken#(#in#)#;#if#(#line#==#null#)#{#return#-#1#;#}#for#(#Enumeration#e#=#filters#.#elements#(#)#;#e#.#hasMoreElements#(#)#;#)#{#Filter#filter#=#(#Filter#)#e#.#nextElement#(#)#;#line#=#filter#.#filter#(#line#)#;#if#(#line#==#null#)#{#break#;#}#}#linePos#=#0#;#if#(#line#!=#null#)#{#if#(#tokenizer#.#getPostToken#(#)#.#length#(#)#!=#0#)#{#if#(#delimOutput#!=#null#)#{#line#=#line#+#delimOutput#;#}#else#{#line#=#line#+#tokenizer#.#getPostToken#(#)#;#}#}#}#}#int#ch#=#line#.#charAt#(#linePos#)#;#linePos#++#;#if#(#linePos#==#line#.#length#(#)#)#{#line#=#null#;#}#return#ch#;#}##Reader#chain#(#final#Reader#reader#)#{#TokenFilter#newFilter#=#new#TokenFilter#(#reader#)#;#newFilter#.#filters#=#filters#;#newFilter#.#tokenizer#=#tokenizer#;#newFilter#.#delimOutput#=#delimOutput#;#newFilter#.#setProject#(#getProject#(#)#)#;#return#newFilter#;#}##void#setDelimOutput#(#String#delimOutput#)#{#this#.#delimOutput#=#resolveBackSlash#(#delimOutput#)#;#}##void#addLineTokenizer#(#LineTokenizer#tokenizer#)#{#add#(#tokenizer#)#;#}##void#addStringTokenizer#(#StringTokenizer#tokenizer#)#{#add#(#tokenizer#)#;#}##void#addFileTokenizer#(#FileTokenizer#tokenizer#)#{#add#(#tokenizer#)#;#}##void#add#(#Tokenizer#tokenizer#)#{#if#(#this#.#tokenizer#!=#null#)#{#throw#new#BuildException#(#"Only one tokenizer allowed"#)#;#}#this#.#tokenizer#=#tokenizer#;#}##void#addReplaceString#(#ReplaceString#filter#)#{#filters#.#addElement#(#filter#)#;#}##void#addContainsString#(#ContainsString#filter#)#{#filters#.#addElement#(#filter#)#;#}##void#addReplaceRegex#(#ReplaceRegex#filter#)#{#filters#.#addElement#(#filter#)#;#}##void#addContainsRegex#(#ContainsRegex#filter#)#{#filters#.#addElement#(#filter#)#;#}##void#addTrim#(#Trim#filter#)#{#filters#.#addElement#(#filter#)#;#}##void#addIgnoreBlank#(#IgnoreBlank#filter#)#{#filters#.#addElement#(#filter#)#;#}##void#addDeleteCharacters#(#DeleteCharacters#filter#)#{#filters#.#addElement#(#filter#)#;#}##void#add#(#Filter#filter#)#{#filters#.#addElement#(#filter#)#;#}##void#setByLine#(#boolean#byLine#)#{#this#.#byLine#=#byLine#;#}##Reader#chain#(#Reader#reader#)#{#TokenFilter#tokenFilter#=#new#TokenFilter#(#reader#)#;#if#(#!#byLine#)#{#tokenFilter#.#add#(#new#FileTokenizer#(#)#)#;#}#tokenFilter#.#add#(#this#)#;#return#tokenFilter#;#}##void#setFrom#(#String#from#)#{#this#.#from#=#from#;#}##void#setTo#(#String#to#)#{#this#.#to#=#to#;#}##String#filter#(#String#line#)#{#if#(#from#==#null#)#{#throw#new#BuildException#(#"Missing from in stringreplace"#)#;#}#StringBuffer#ret#=#new#StringBuffer#(#)#;#int#start#=#0#;#int#found#=#line#.#indexOf#(#from#)#;#while#(#found#>=#0#)#{#// write everything up to the from#if#(#found#>#start#)#{#ret#.#append#(#line#.#substring#(#start#,#found#)#)#;#}#// write the replacement to#if#(#to#!=#null#)#{#ret#.#append#(#to#)#;#}#// search again#start#=#found#+#from#.#length#(#)#;#found#=#line#.#indexOf#(#from#,#start#)#;#}#// write the remaining characters#if#(#line#.#length#(#)#>#start#)#{#ret#.#append#(#line#.#substring#(#start#,#line#.#length#(#)#)#)#;#}#return#ret#.#toString#(#)#;#}##void#setContains#(#String#contains#)#{#this#.#contains#=#contains#;#}##String#filter#(#String#string#)#{#if#(#contains#==#null#)#{#throw#new#BuildException#(#"Missing contains in containsstring"#)#;#}#if#(#string#.#indexOf#(#contains#)#>#-#1#)#{#return#string#;#}#return#null#;#}##void#setPattern#(#String#from#)#{#this#.#from#=#from#;#}##void#setReplace#(#String#to#)#{#this#.#to#=#to#;#}##void#setFlags#(#String#flags#)#{#this#.#flags#=#flags#;#}##void#initialize#(#)#{#if#(#initialized#)#{#return#;#}#options#=#convertRegexOptions#(#flags#)#;#if#(#from#==#null#)#{#throw#new#BuildException#(#"Missing pattern in replaceregex"#)#;#}#regularExpression#=#new#RegularExpression#(#)#;#regularExpression#.#setPattern#(#from#)#;#regexp#=#regularExpression#.#getRegexp#(#getProject#(#)#)#;#if#(#to#==#null#)#{#to#=#""#;#}#substitution#=#new#Substitution#(#)#;#substitution#.#setExpression#(#to#)#;#}##String#filter#(#String#line#)#{#initialize#(#)#;#if#(#!#regexp#.#matches#(#line#,#options#)#)#{#return#line#;#}#return#regexp#.#substitute#(#line#,#substitution#.#getExpression#(#getProject#(#)#)#,#options#)#;#}##void#setPattern#(#String#from#)#{#this#.#from#=#from#;#}##void#setReplace#(#String#to#)#{#this#.#to#=#to#;#}##void#setFlags#(#String#flags#)#{#this#.#flags#=#flags#;#}##void#initialize#(#)#{#if#(#initialized#)#{#return#;#}#options#=#convertRegexOptions#(#flags#)#;#if#(#from#==#null#)#{#throw#new#BuildException#(#"Missing from in containsregex"#)#;#}#regularExpression#=#new#RegularExpression#(#)#;#regularExpression#.#setPattern#(#from#)#;#regexp#=#regularExpression#.#getRegexp#(#getProject#(#)#)#;#if#(#to#==#null#)#{#return#;#}#substitution#=#new#Substitution#(#)#;#substitution#.#setExpression#(#to#)#;#}##String#filter#(#String#string#)#{#initialize#(#)#;#if#(#!#regexp#.#matches#(#string#,#options#)#)#{#return#null#;#}#if#(#substitution#==#null#)#{#return#string#;#}#return#regexp#.#substitute#(#string#,#substitution#.#getExpression#(#getProject#(#)#)#,#options#)#;#}##String#filter#(#String#line#)#{#return#line#.#trim#(#)#;#}##String#filter#(#String#line#)#{#if#(#line#.#trim#(#)#.#length#(#)#==#0#)#{#return#null#;#}#return#line#;#}##void#setChars#(#String#deleteChars#)#{#this#.#deleteChars#=#resolveBackSlash#(#deleteChars#)#;#}##String#filter#(#String#string#)#{#StringBuffer#output#=#new#StringBuffer#(#string#.#length#(#)#)#;#for#(#int#i#=#0#;#i#<#string#.#length#(#)#;#++#i#)#{#char#ch#=#string#.#charAt#(#i#)#;#if#(#!#(#isDeleteCharacter#(#ch#)#)#)#{#output#.#append#(#ch#)#;#}#}#return#output#.#toString#(#)#;#}##Reader#chain#(#Reader#reader#)#{#return#new#BaseFilterReader#(#reader#)#{#/**
                 * @return the next non delete character
                 */#public#int#read#(#)#throws#IOException#{#while#(#true#)#{#int#c#=#in#.#read#(#)#;#if#(#c#==#-#1#)#{#return#c#;#}#if#(#!#(#isDeleteCharacter#(#(#char#)#c#)#)#)#{#return#c#;#}#}#}#}#;#}##int#read#(#)#throws#IOException#{#while#(#true#)#{#int#c#=#in#.#read#(#)#;#if#(#c#==#-#1#)#{#return#c#;#}#if#(#!#(#isDeleteCharacter#(#(#char#)#c#)#)#)#{#return#c#;#}#}#}##boolean#isDeleteCharacter#(#char#c#)#{#for#(#int#d#=#0#;#d#<#deleteChars#.#length#(#)#;#++#d#)#{#if#(#deleteChars#.#charAt#(#d#)#==#c#)#{#return#true#;#}#}#return#false#;#}##String#resolveBackSlash#(#String#input#)#{#return#StringUtils#.#resolveBackSlash#(#input#)#;#}##int#convertRegexOptions#(#String#flags#)#{#if#(#flags#==#null#)#{#return#0#;#}#int#options#=#0#;#if#(#flags#.#indexOf#(#'g'#)#!=#-#1#)#{#options#|=#Regexp#.#REPLACE_ALL#;#}#if#(#flags#.#indexOf#(#'i'#)#!=#-#1#)#{#options#|=#Regexp#.#MATCH_CASE_INSENSITIVE#;#}#if#(#flags#.#indexOf#(#'m'#)#!=#-#1#)#{#options#|=#Regexp#.#MATCH_MULTILINE#;#}#if#(#flags#.#indexOf#(#'s'#)#!=#-#1#)#{#options#|=#Regexp#.#MATCH_SINGLELINE#;#}#return#options#;#}##