void#setFiltering#(#boolean#filtering#)#{#this#.#filtering#=#filtering#;#}##boolean#getFiltering#(#)#{#return#filtering#;#}##void#setEncoding#(#String#encoding#)#{#this#.#encoding#=#encoding#;#}##void#setFile#(#File#file#)#throws#BuildException#{#// non-existing files are not allowed#if#(#!#file#.#exists#(#)#)#{#throw#new#BuildException#(#"File "#+#file#+#" does not exist."#)#;#}#BufferedReader#reader#=#null#;#try#{#if#(#this#.#encoding#==#null#)#{#reader#=#new#BufferedReader#(#new#FileReader#(#file#)#)#;#}#else#{#reader#=#new#BufferedReader#(#new#InputStreamReader#(#new#FileInputStream#(#file#)#,#this#.#encoding#)#)#;#}#value#=#FileUtils#.#safeReadFully#(#reader#)#;#}#catch#(#IOException#ex#)#{#throw#new#BuildException#(#ex#)#;#}#finally#{#FileUtils#.#close#(#reader#)#;#}#}##void#addText#(#String#value#)#{#this#.#value#+=#getProject#(#)#.#replaceProperties#(#value#)#;#}##void#setTrimLeading#(#boolean#strip#)#{#this#.#trimLeading#=#strip#;#}##void#setTrim#(#boolean#trim#)#{#this#.#trim#=#trim#;#}##String#getValue#(#)#{#if#(#value#==#null#)#{#value#=#""#;#}#if#(#value#.#trim#(#)#.#length#(#)#==#0#)#{#value#=#""#;#}#if#(#trimLeading#)#{#char#[#]#current#=#value#.#toCharArray#(#)#;#StringBuffer#b#=#new#StringBuffer#(#current#.#length#)#;#boolean#startOfLine#=#true#;#int#pos#=#0#;#while#(#pos#<#current#.#length#)#{#char#ch#=#current#[#pos#++#]#;#if#(#startOfLine#)#{#if#(#ch#==#' '#||#ch#==#'\t'#)#{#continue#;#}#startOfLine#=#false#;#}#b#.#append#(#ch#)#;#if#(#ch#==#'\n'#||#ch#==#'\r'#)#{#startOfLine#=#true#;#}#}#value#=#b#.#toString#(#)#;#}#if#(#trim#)#{#value#=#value#.#trim#(#)#;#}#return#value#;#}##Reader#getReader#(#)#throws#IOException#{#if#(#reader#==#null#&&#readerSources#.#hasNext#(#)#)#{#reader#=#factory#.#getReader#(#readerSources#.#next#(#)#)#;#Arrays#.#fill#(#lastChars#,#(#char#)#0#)#;#}#return#reader#;#}##void#nextReader#(#)#throws#IOException#{#close#(#)#;#reader#=#null#;#}##int#read#(#)#throws#IOException#{#if#(#needAddSeparator#)#{#int#ret#=#eolString#.#charAt#(#lastPos#++#)#;#if#(#lastPos#>=#eolString#.#length#(#)#)#{#lastPos#=#0#;#needAddSeparator#=#false#;#}#return#ret#;#}#while#(#getReader#(#)#!=#null#)#{#int#ch#=#getReader#(#)#.#read#(#)#;#if#(#ch#==#-#1#)#{#nextReader#(#)#;#if#(#isFixLastLine#(#)#&&#isMissingEndOfLine#(#)#)#{#needAddSeparator#=#true#;#lastPos#=#0#;#}#}#else#{#addLastChar#(#(#char#)#ch#)#;#return#ch#;#}#}#return#-#1#;#}##int#read#(#char#[#]#cbuf#,#int#off#,#int#len#)#throws#IOException#{#int#amountRead#=#0#;#while#(#getReader#(#)#!=#null#||#needAddSeparator#)#{#if#(#needAddSeparator#)#{#cbuf#[#off#]#=#eolString#.#charAt#(#lastPos#++#)#;#if#(#lastPos#>=#eolString#.#length#(#)#)#{#lastPos#=#0#;#needAddSeparator#=#false#;#}#len#--#;#off#++#;#amountRead#++#;#if#(#len#==#0#)#{#return#amountRead#;#}#continue#;#}#int#nRead#=#getReader#(#)#.#read#(#cbuf#,#off#,#len#)#;#if#(#nRead#==#-#1#||#nRead#==#0#)#{#nextReader#(#)#;#if#(#isFixLastLine#(#)#&&#isMissingEndOfLine#(#)#)#{#needAddSeparator#=#true#;#lastPos#=#0#;#}#}#else#{#if#(#isFixLastLine#(#)#)#{#for#(#int#i#=#nRead#;#i#>#(#nRead#-#lastChars#.#length#)#;#--#i#)#{#if#(#i#<=#0#)#{#break#;#}#addLastChar#(#cbuf#[#off#+#i#-#1#]#)#;#}#}#len#-=#nRead#;#off#+=#nRead#;#amountRead#+=#nRead#;#if#(#len#==#0#)#{#return#amountRead#;#}#}#}#if#(#amountRead#==#0#)#{#return#-#1#;#}#else#{#return#amountRead#;#}#}##void#close#(#)#throws#IOException#{#if#(#reader#!=#null#)#{#reader#.#close#(#)#;#}#}##void#addLastChar#(#char#ch#)#{#for#(#int#i#=#lastChars#.#length#-#2#;#i#>=#0#;#--#i#)#{#lastChars#[#i#]#=#lastChars#[#i#+#1#]#;#}#lastChars#[#lastChars#.#length#-#1#]#=#ch#;#}##boolean#isMissingEndOfLine#(#)#{#for#(#int#i#=#0#;#i#<#lastChars#.#length#;#++#i#)#{#if#(#lastChars#[#i#]#!=#eolString#.#charAt#(#i#)#)#{#return#true#;#}#}#return#false#;#}##boolean#isFixLastLine#(#)#{#return#fixLastLine#&&#textBuffer#==#null#;#}##InputStream#getInputStream#(#)#throws#IOException#{#if#(#binary#)#{#ConcatResourceInputStream#result#=#new#ConcatResourceInputStream#(#c#)#;#result#.#setManagingComponent#(#this#)#;#return#result#;#}#Reader#resourceReader#=#getFilteredReader#(#new#MultiReader#(#c#.#iterator#(#)#,#resourceReaderFactory#)#)#;#Reader#rdr#;#if#(#header#==#null#&&#footer#==#null#)#{#rdr#=#resourceReader#;#}#else#{#int#readerCount#=#1#;#if#(#header#!=#null#)#{#readerCount#++#;#}#if#(#footer#!=#null#)#{#readerCount#++#;#}#Reader#[#]#readers#=#new#Reader#[#readerCount#]#;#int#pos#=#0#;#if#(#header#!=#null#)#{#readers#[#pos#]#=#new#StringReader#(#header#.#getValue#(#)#)#;#if#(#header#.#getFiltering#(#)#)#{#readers#[#pos#]#=#getFilteredReader#(#readers#[#pos#]#)#;#}#pos#++#;#}#readers#[#pos#++#]#=#resourceReader#;#if#(#footer#!=#null#)#{#readers#[#pos#]#=#new#StringReader#(#footer#.#getValue#(#)#)#;#if#(#footer#.#getFiltering#(#)#)#{#readers#[#pos#]#=#getFilteredReader#(#readers#[#pos#]#)#;#}#}#rdr#=#new#MultiReader#(#Arrays#.#asList#(#readers#)#.#iterator#(#)#,#identityReaderFactory#)#;#}#return#outputEncoding#==#null#?#new#ReaderInputStream#(#rdr#)#:#new#ReaderInputStream#(#rdr#,#outputEncoding#)#;#}##String#getName#(#)#{#return#"concat ("#+#String#.#valueOf#(#c#)#+#")"#;#}##Reader#getReader#(#Object#o#)#throws#IOException#{#InputStream#is#=#(#(#Resource#)#o#)#.#getInputStream#(#)#;#return#new#BufferedReader#(#encoding#==#null#?#new#InputStreamReader#(#is#)#:#new#InputStreamReader#(#is#,#encoding#)#)#;#}##Reader#getReader#(#Object#o#)#{#return#(#Reader#)#o#;#}##void#reset#(#)#{#append#=#false#;#forceOverwrite#=#true#;#dest#=#null#;#encoding#=#null#;#outputEncoding#=#null#;#fixLastLine#=#false#;#filterChains#=#null#;#footer#=#null#;#header#=#null#;#binary#=#false#;#outputWriter#=#null#;#textBuffer#=#null#;#eolString#=#StringUtils#.#LINE_SEP#;#rc#=#null#;#ignoreEmpty#=#true#;#}##void#setDestfile#(#File#destinationFile#)#{#setDest#(#new#FileResource#(#destinationFile#)#)#;#}##void#setDest#(#Resource#dest#)#{#this#.#dest#=#dest#;#}##void#setAppend#(#boolean#append#)#{#this#.#append#=#append#;#}##void#setEncoding#(#String#encoding#)#{#this#.#encoding#=#encoding#;#if#(#outputEncoding#==#null#)#{#outputEncoding#=#encoding#;#}#}##void#setOutputEncoding#(#String#outputEncoding#)#{#this#.#outputEncoding#=#outputEncoding#;#}##void#setForce#(#boolean#force#)#{#this#.#forceOverwrite#=#force#;#}##void#setIgnoreEmpty#(#boolean#ignoreEmpty#)#{#this#.#ignoreEmpty#=#ignoreEmpty#;#}##Path#createPath#(#)#{#Path#path#=#new#Path#(#getProject#(#)#)#;#add#(#path#)#;#return#path#;#}##void#addFileset#(#FileSet#set#)#{#add#(#set#)#;#}##void#addFilelist#(#FileList#list#)#{#add#(#list#)#;#}##void#add#(#ResourceCollection#c#)#{#if#(#rc#==#null#)#{#rc#=#c#;#return#;#}#if#(#!#(#rc#instanceof#Resources#)#)#{#Resources#newRc#=#new#Resources#(#)#;#newRc#.#setProject#(#getProject#(#)#)#;#newRc#.#setCache#(#true#)#;#newRc#.#add#(#rc#)#;#rc#=#newRc#;#}#(#(#Resources#)#rc#)#.#add#(#c#)#;#}##void#addFilterChain#(#FilterChain#filterChain#)#{#if#(#filterChains#==#null#)#{#filterChains#=#new#Vector#(#)#;#}#filterChains#.#addElement#(#filterChain#)#;#}##void#addText#(#String#text#)#{#if#(#textBuffer#==#null#)#{#// Initialize to the size of the first text fragment, with#// the hopes that it's the only one.#textBuffer#=#new#StringBuffer#(#text#.#length#(#)#)#;#}#// Append the fragment -- we defer property replacement until#// later just in case we get a partial property in a fragment.#textBuffer#.#append#(#text#)#;#}##void#addHeader#(#TextElement#headerToAdd#)#{#this#.#header#=#headerToAdd#;#}##void#addFooter#(#TextElement#footerToAdd#)#{#this#.#footer#=#footerToAdd#;#}##void#setFixLastLine#(#boolean#fixLastLine#)#{#this#.#fixLastLine#=#fixLastLine#;#}##void#setEol#(#FixCRLF#.#CrLf#crlf#)#{#String#s#=#crlf#.#getValue#(#)#;#if#(#s#.#equals#(#"cr"#)#||#s#.#equals#(#"mac"#)#)#{#eolString#=#"\r"#;#}#else#if#(#s#.#equals#(#"lf"#)#||#s#.#equals#(#"unix"#)#)#{#eolString#=#"\n"#;#}#else#if#(#s#.#equals#(#"crlf"#)#||#s#.#equals#(#"dos"#)#)#{#eolString#=#"\r\n"#;#}#}##void#setWriter#(#Writer#outputWriter#)#{#this#.#outputWriter#=#outputWriter#;#}##void#setBinary#(#boolean#binary#)#{#this#.#binary#=#binary#;#}##void#execute#(#)#{#validate#(#)#;#if#(#binary#&&#dest#==#null#)#{#throw#new#BuildException#(#"dest|destfile attribute is required for binary concatenation"#)#;#}#ResourceCollection#c#=#getResources#(#)#;#if#(#isUpToDate#(#c#)#)#{#log#(#dest#+#" is up-to-date."#,#Project#.#MSG_VERBOSE#)#;#return#;#}#if#(#c#.#size#(#)#==#0#&&#ignoreEmpty#)#{#return#;#}#try#{#//most of these are defaulted because the concat-as-a-resource code hijacks a lot:#ResourceUtils#.#copyResource#(#new#ConcatResource#(#c#)#,#dest#==#null#?#new#LogOutputResource#(#this#,#Project#.#MSG_WARN#)#:#dest#,#null#,#null#,#true#,#false#,#append#,#null#,#null#,#getProject#(#)#)#;#}#catch#(#IOException#e#)#{#throw#new#BuildException#(#"error concatenating content to "#+#dest#,#e#)#;#}#}##Iterator#iterator#(#)#{#validate#(#)#;#return#Collections#.#singletonList#(#new#ConcatResource#(#getResources#(#)#)#)#.#iterator#(#)#;#}##int#size#(#)#{#return#1#;#}##boolean#isFilesystemOnly#(#)#{#return#false#;#}##void#validate#(#)#{#// treat empty nested text as no text#sanitizeText#(#)#;#// if binary check if incompatible attributes are used#if#(#binary#)#{#if#(#textBuffer#!=#null#)#{#throw#new#BuildException#(#"Nested text is incompatible with binary concatenation"#)#;#}#if#(#encoding#!=#null#||#outputEncoding#!=#null#)#{#throw#new#BuildException#(#"Setting input or output encoding is incompatible with binary"#+#" concatenation"#)#;#}#if#(#filterChains#!=#null#)#{#throw#new#BuildException#(#"Setting filters is incompatible with binary concatenation"#)#;#}#if#(#fixLastLine#)#{#throw#new#BuildException#(#"Setting fixlastline is incompatible with binary concatenation"#)#;#}#if#(#header#!=#null#||#footer#!=#null#)#{#throw#new#BuildException#(#"Nested header or footer is incompatible with binary concatenation"#)#;#}#}#if#(#dest#!=#null#&&#outputWriter#!=#null#)#{#throw#new#BuildException#(#"Cannot specify both a destination resource and an output writer"#)#;#}#// Sanity check our inputs.#if#(#rc#==#null#&&#textBuffer#==#null#)#{#// Nothing to concatenate!#throw#new#BuildException#(#"At least one resource must be provided, or some text."#)#;#}#if#(#rc#!=#null#&&#textBuffer#!=#null#)#{#// If using resources, disallow inline text. This is similar to#// using GNU 'cat' with file arguments--stdin is simply ignored.#throw#new#BuildException#(#"Cannot include inline text when using resources."#)#;#}#}##ResourceCollection#getResources#(#)#{#if#(#rc#==#null#)#{#return#new#StringResource#(#getProject#(#)#,#textBuffer#.#toString#(#)#)#;#}#if#(#dest#!=#null#)#{#Intersect#checkDestNotInSources#=#new#Intersect#(#)#;#checkDestNotInSources#.#setProject#(#getProject#(#)#)#;#checkDestNotInSources#.#add#(#rc#)#;#checkDestNotInSources#.#add#(#dest#)#;#if#(#checkDestNotInSources#.#size#(#)#>#0#)#{#throw#new#BuildException#(#"Destination resource "#+#dest#+#" was specified as an input resource."#)#;#}#}#Restrict#noexistRc#=#new#Restrict#(#)#;#noexistRc#.#add#(#NOT_EXISTS#)#;#noexistRc#.#add#(#rc#)#;#for#(#Iterator#i#=#noexistRc#.#iterator#(#)#;#i#.#hasNext#(#)#;#)#{#log#(#i#.#next#(#)#+#" does not exist."#,#Project#.#MSG_ERR#)#;#}#Restrict#result#=#new#Restrict#(#)#;#result#.#add#(#EXISTS#)#;#result#.#add#(#rc#)#;#return#result#;#}##boolean#isUpToDate#(#ResourceCollection#c#)#{#if#(#dest#==#null#||#forceOverwrite#)#{#return#false#;#}#for#(#Iterator#i#=#c#.#iterator#(#)#;#i#.#hasNext#(#)#;#)#{#Resource#r#=#(#Resource#)#i#.#next#(#)#;#if#(#SelectorUtils#.#isOutOfDate#(#r#,#dest#,#FILE_UTILS#.#getFileTimestampGranularity#(#)#)#)#{#return#false#;#}#}#return#true#;#}##void#sanitizeText#(#)#{#if#(#textBuffer#!=#null#&&#""#.#equals#(#textBuffer#.#toString#(#)#.#trim#(#)#)#)#{#textBuffer#=#null#;#}#}##Reader#getFilteredReader#(#Reader#r#)#{#if#(#filterChains#==#null#)#{#return#r#;#}#ChainReaderHelper#helper#=#new#ChainReaderHelper#(#)#;#helper#.#setBufferSize#(#BUFFER_SIZE#)#;#helper#.#setPrimaryReader#(#r#)#;#helper#.#setFilterChains#(#filterChains#)#;#helper#.#setProject#(#getProject#(#)#)#;#//used to be a BufferedReader here, but we should be buffering lower:#return#helper#.#getAssembledReader#(#)#;#}##