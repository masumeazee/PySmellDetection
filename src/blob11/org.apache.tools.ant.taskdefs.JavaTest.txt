void#setUp#(#)#{#configureProject#(#"src/etc/testcases/taskdefs/java.xml"#)#;#//final String propname="tests-classpath.value";#//String testClasspath=System.getProperty(propname);#//System.out.println("Test cp="+testClasspath);#String#propname#=#"tests-classpath.value"#;#String#runFatal#=#System#.#getProperty#(#"junit.run.fatal.tests"#)#;#if#(#runFatal#!=#null#)#runFatalTests#=#true#;#}##void#tearDown#(#)#{#// remove log file from testSpawn#project#.#executeTarget#(#"cleanup"#)#;#}##void#testNoJarNoClassname#(#)#{#expectBuildExceptionContaining#(#"testNoJarNoClassname"#,#"parameter validation"#,#"Classname must not be null."#)#;#}##void#testJarNoFork#(#)#{#expectBuildExceptionContaining#(#"testJarNoFork"#,#"parameter validation"#,#"Cannot execute a jar in non-forked mode. "#+#"Please set fork='true'. "#)#;#}##void#testJarAndClassName#(#)#{#expectBuildException#(#"testJarAndClassName"#,#"Should not be able to set both classname AND jar"#)#;#}##void#testClassnameAndJar#(#)#{#expectBuildException#(#"testClassnameAndJar"#,#"Should not be able to set both classname AND jar"#)#;#}##void#testRun#(#)#{#executeTarget#(#"testRun"#)#;#}##void#testRunFail#(#)#{#if#(#runFatalTests#)#{#executeTarget#(#"testRunFail"#)#;#}#}##void#testRunFailFoe#(#)#{#if#(#runFatalTests#)#{#expectBuildExceptionContaining#(#"testRunFailFoe"#,#"java failures being propagated"#,#"Java returned:"#)#;#}#}##void#testRunFailFoeFork#(#)#{#expectBuildExceptionContaining#(#"testRunFailFoeFork"#,#"java failures being propagated"#,#"Java returned:"#)#;#}##void#testExcepting#(#)#{#expectLogContaining#(#"testExcepting"#,#"Exception raised inside called program"#)#;#}##void#testExceptingFork#(#)#{#expectLogContaining#(#"testExceptingFork"#,#"Java Result:"#)#;#}##void#testExceptingFoe#(#)#{#expectBuildExceptionContaining#(#"testExceptingFoe"#,#"passes exception through"#,#"Exception raised inside called program"#)#;#}##void#testExceptingFoeFork#(#)#{#expectBuildExceptionContaining#(#"testExceptingFoeFork"#,#"exceptions turned into error codes"#,#"Java returned:"#)#;#}##void#testResultPropertyZero#(#)#{#executeTarget#(#"testResultPropertyZero"#)#;#assertEquals#(#"0"#,#project#.#getProperty#(#"exitcode"#)#)#;#}##void#testResultPropertyNonZero#(#)#{#executeTarget#(#"testResultPropertyNonZero"#)#;#assertEquals#(#"2"#,#project#.#getProperty#(#"exitcode"#)#)#;#}##void#testResultPropertyZeroNoFork#(#)#{#executeTarget#(#"testResultPropertyZeroNoFork"#)#;#assertEquals#(#"0"#,#project#.#getProperty#(#"exitcode"#)#)#;#}##void#testResultPropertyNonZeroNoFork#(#)#{#executeTarget#(#"testResultPropertyNonZeroNoFork"#)#;#assertEquals#(#"-1"#,#project#.#getProperty#(#"exitcode"#)#)#;#}##void#testRunFailWithFailOnError#(#)#{#expectBuildExceptionContaining#(#"testRunFailWithFailOnError"#,#"non zero return code"#,#"Java returned:"#)#;#}##void#testRunSuccessWithFailOnError#(#)#{#executeTarget#(#"testRunSuccessWithFailOnError"#)#;#}##void#testSpawn#(#)#{#File#logFile#=#FILE_UTILS#.#createTempFile#(#"spawn"#,#"log"#,#project#.#getBaseDir#(#)#,#false#,#false#)#;#// this is guaranteed by FileUtils#createTempFile#assertTrue#(#"log file not existing"#,#!#logFile#.#exists#(#)#)#;#project#.#setProperty#(#"logFile"#,#logFile#.#getAbsolutePath#(#)#)#;#project#.#setProperty#(#"timeToWait"#,#Long#.#toString#(#TIME_TO_WAIT#)#)#;#project#.#executeTarget#(#"testSpawn"#)#;#try#{#Thread#.#sleep#(#TIME_TO_WAIT#*#1000#+#SECURITY_MARGIN#)#;#}#catch#(#Exception#ex#)#{#System#.#out#.#println#(#"my sleep was interrupted"#)#;#}#// let's be nice with the next generation of developers#if#(#!#logFile#.#exists#(#)#)#{#System#.#out#.#println#(#"suggestion: increase the constant"#+#" SECURITY_MARGIN to give more time for java to start."#)#;#}#assertTrue#(#"log file exists"#,#logFile#.#exists#(#)#)#;#}##void#testRedirect1#(#)#{#executeTarget#(#"redirect1"#)#;#}##void#testRedirect2#(#)#{#executeTarget#(#"redirect2"#)#;#}##void#testRedirect3#(#)#{#executeTarget#(#"redirect3"#)#;#}##void#testRedirector1#(#)#{#executeTarget#(#"redirector1"#)#;#}##void#testRedirector2#(#)#{#executeTarget#(#"redirector2"#)#;#}##void#main#(#String#[#]#argv#)#{#int#exitCode#=#0#;#if#(#argv#.#length#>#0#)#{#try#{#exitCode#=#Integer#.#parseInt#(#argv#[#0#]#)#;#}#catch#(#NumberFormatException#nfe#)#{#exitCode#=#-#1#;#}#}#if#(#argv#.#length#>#1#)#{#System#.#out#.#println#(#argv#[#1#]#)#;#}#if#(#argv#.#length#>#2#)#{#System#.#err#.#println#(#argv#[#2#]#)#;#}#if#(#exitCode#!=#0#)#{#System#.#exit#(#exitCode#)#;#}#}##void#main#(#String#[#]#argv#)#{#throw#new#NullPointerException#(#"Exception raised inside called program"#)#;#}##void#main#(#String#[#]#argv#)#{#int#sleepTime#=#10#;#String#logFile#=#"spawn.log"#;#if#(#argv#.#length#>=#1#)#{#sleepTime#=#Integer#.#parseInt#(#argv#[#0#]#)#;#}#if#(#argv#.#length#>=#2#)#{#logFile#=#argv#[#1#]#;#}#OutputStreamWriter#out#=#null#;#try#{#Thread#.#sleep#(#sleepTime#*#1000#)#;#}#catch#(#InterruptedException#ex#)#{#System#.#out#.#println#(#"my sleep was interrupted"#)#;#}#try#{#File#dest#=#new#File#(#logFile#)#;#FileOutputStream#fos#=#new#FileOutputStream#(#dest#)#;#out#=#new#OutputStreamWriter#(#fos#)#;#out#.#write#(#"bye bye\n"#)#;#}#catch#(#Exception#ex#)#{#}#finally#{#try#{#out#.#close#(#)#;#}#catch#(#IOException#ioe#)#{#}#}#}##void#main#(#String#[#]#args#)#{#OutputStream#os#=#null#;#if#(#args#.#length#>#0#)#{#if#(#"out"#.#equalsIgnoreCase#(#args#[#0#]#)#)#{#os#=#System#.#out#;#}#else#if#(#"err"#.#equalsIgnoreCase#(#args#[#0#]#)#)#{#os#=#System#.#err#;#}#else#if#(#"both"#.#equalsIgnoreCase#(#args#[#0#]#)#)#{#os#=#new#TeeOutputStream#(#System#.#out#,#System#.#err#)#;#}#}#if#(#os#!=#null#)#{#Thread#t#=#new#Thread#(#new#StreamPumper#(#System#.#in#,#os#,#true#)#)#;#t#.#start#(#)#;#try#{#t#.#join#(#)#;#}#catch#(#InterruptedException#eyeEx#)#{#}#}#}##