void#setProcessInputStream#(#OutputStream#os#)#{#}##void#setProcessErrorStream#(#InputStream#is#)#{#}##void#setProcessOutputStream#(#InputStream#is#)#throws#IOException#{#br#=#new#BufferedReader#(#new#InputStreamReader#(#is#)#)#;#}##void#start#(#)#throws#IOException#{#parseOutput#(#br#)#;#}##void#stop#(#)#{#}##void#parseOutput#(#BufferedReader#reader#)#throws#IOException#{#if#(#emacsMode#)#{#parseEmacsOutput#(#reader#)#;#}#else#{#parseStandardOutput#(#reader#)#;#}#}##void#parseStandardOutput#(#BufferedReader#reader#)#throws#IOException#{#String#line#;#String#lower#;#// We assume, that every output, jikes does, stands for an error/warning#// XXX#// Is this correct?#// TODO:#// A warning line, that shows code, which contains a variable#// error will cause some trouble. The parser should definitely#// be much better.#while#(#(#line#=#reader#.#readLine#(#)#)#!=#null#)#{#lower#=#line#.#toLowerCase#(#)#;#if#(#line#.#trim#(#)#.#equals#(#""#)#)#{#continue#;#}#if#(#lower#.#indexOf#(#"error"#)#!=#-#1#)#{#setError#(#true#)#;#}#else#if#(#lower#.#indexOf#(#"warning"#)#!=#-#1#)#{#setError#(#false#)#;#}#else#{#// If we don't know the type of the line#// and we are in emacs mode, it will be#// an error, because in this mode, jikes won't#// always print "error", but sometimes other#// keywords like "Syntax". We should look for#// all those keywords.#if#(#emacsMode#)#{#setError#(#true#)#;#}#}#log#(#line#)#;#}#}##void#parseEmacsOutput#(#BufferedReader#reader#)#throws#IOException#{#// This may change, if we add advanced parsing capabilities.#parseStandardOutput#(#reader#)#;#}##void#setError#(#boolean#err#)#{#error#=#err#;#if#(#error#)#{#errorFlag#=#true#;#}#}##void#log#(#String#line#)#{#if#(#!#emacsMode#)#{#task#.#log#(#""#,#(#error#?#Project#.#MSG_ERR#:#Project#.#MSG_WARN#)#)#;#}#task#.#log#(#line#,#(#error#?#Project#.#MSG_ERR#:#Project#.#MSG_WARN#)#)#;#}##boolean#getErrorFlag#(#)#{#return#errorFlag#;#}##