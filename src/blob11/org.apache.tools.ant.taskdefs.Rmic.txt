void#setBase#(#File#base#)#{#this#.#baseDir#=#base#;#}##void#setDestdir#(#File#destdir#)#{#this#.#destDir#=#destdir#;#}##File#getDestdir#(#)#{#return#this#.#destDir#;#}##File#getOutputDir#(#)#{#if#(#getDestdir#(#)#!=#null#)#{#return#getDestdir#(#)#;#}#return#getBase#(#)#;#}##File#getBase#(#)#{#return#this#.#baseDir#;#}##void#setClassname#(#String#classname#)#{#this#.#classname#=#classname#;#}##String#getClassname#(#)#{#return#classname#;#}##void#setSourceBase#(#File#sourceBase#)#{#this#.#sourceBase#=#sourceBase#;#}##File#getSourceBase#(#)#{#return#sourceBase#;#}##void#setStubVersion#(#String#stubVersion#)#{#this#.#stubVersion#=#stubVersion#;#}##String#getStubVersion#(#)#{#return#stubVersion#;#}##void#setFiltering#(#boolean#filter#)#{#this#.#filtering#=#filter#;#}##boolean#getFiltering#(#)#{#return#filtering#;#}##void#setDebug#(#boolean#debug#)#{#this#.#debug#=#debug#;#}##boolean#getDebug#(#)#{#return#debug#;#}##void#setClasspath#(#Path#classpath#)#{#if#(#compileClasspath#==#null#)#{#compileClasspath#=#classpath#;#}#else#{#compileClasspath#.#append#(#classpath#)#;#}#}##Path#createClasspath#(#)#{#if#(#compileClasspath#==#null#)#{#compileClasspath#=#new#Path#(#getProject#(#)#)#;#}#return#compileClasspath#.#createPath#(#)#;#}##void#setClasspathRef#(#Reference#pathRef#)#{#createClasspath#(#)#.#setRefid#(#pathRef#)#;#}##Path#getClasspath#(#)#{#return#compileClasspath#;#}##void#setVerify#(#boolean#verify#)#{#this#.#verify#=#verify#;#}##boolean#getVerify#(#)#{#return#verify#;#}##void#setIiop#(#boolean#iiop#)#{#this#.#iiop#=#iiop#;#}##boolean#getIiop#(#)#{#return#iiop#;#}##void#setIiopopts#(#String#iiopOpts#)#{#this#.#iiopOpts#=#iiopOpts#;#}##String#getIiopopts#(#)#{#return#iiopOpts#;#}##void#setIdl#(#boolean#idl#)#{#this#.#idl#=#idl#;#}##boolean#getIdl#(#)#{#return#idl#;#}##void#setIdlopts#(#String#idlOpts#)#{#this#.#idlOpts#=#idlOpts#;#}##String#getIdlopts#(#)#{#return#idlOpts#;#}##Vector#getFileList#(#)#{#return#compileList#;#}##void#setIncludeantruntime#(#boolean#include#)#{#includeAntRuntime#=#include#;#}##boolean#getIncludeantruntime#(#)#{#return#includeAntRuntime#;#}##void#setIncludejavaruntime#(#boolean#include#)#{#includeJavaRuntime#=#include#;#}##boolean#getIncludejavaruntime#(#)#{#return#includeJavaRuntime#;#}##void#setExtdirs#(#Path#extDirs#)#{#if#(#this#.#extDirs#==#null#)#{#this#.#extDirs#=#extDirs#;#}#else#{#this#.#extDirs#.#append#(#extDirs#)#;#}#}##Path#createExtdirs#(#)#{#if#(#extDirs#==#null#)#{#extDirs#=#new#Path#(#getProject#(#)#)#;#}#return#extDirs#.#createPath#(#)#;#}##Path#getExtdirs#(#)#{#return#extDirs#;#}##Vector#getCompileList#(#)#{#return#compileList#;#}##void#setCompiler#(#String#compiler#)#{#if#(#compiler#.#length#(#)#>#0#)#{#facade#.#setImplementation#(#compiler#)#;#}#}##String#getCompiler#(#)#{#facade#.#setMagicValue#(#getProject#(#)#.#getProperty#(#"build.rmic"#)#)#;#return#facade#.#getImplementation#(#)#;#}##ImplementationSpecificArgument#createCompilerArg#(#)#{#ImplementationSpecificArgument#arg#=#new#ImplementationSpecificArgument#(#)#;#facade#.#addImplementationArgument#(#arg#)#;#return#arg#;#}##String#[#]#getCurrentCompilerArgs#(#)#{#getCompiler#(#)#;#return#facade#.#getArgs#(#)#;#}##void#setExecutable#(#String#ex#)#{#executable#=#ex#;#}##String#getExecutable#(#)#{#return#executable#;#}##Path#createCompilerClasspath#(#)#{#return#facade#.#getImplementationClasspath#(#getProject#(#)#)#;#}##void#setListfiles#(#boolean#list#)#{#listFiles#=#list#;#}##void#add#(#RmicAdapter#adapter#)#{#if#(#nestedAdapter#!=#null#)#{#throw#new#BuildException#(#"Can't have more than one rmic adapter"#)#;#}#nestedAdapter#=#adapter#;#}##void#execute#(#)#throws#BuildException#{#try#{#compileList#.#clear#(#)#;#File#outputDir#=#getOutputDir#(#)#;#if#(#outputDir#==#null#)#{#throw#new#BuildException#(#ERROR_BASE_NOT_SET#,#getLocation#(#)#)#;#}#if#(#!#outputDir#.#exists#(#)#)#{#throw#new#BuildException#(#ERROR_NO_BASE_EXISTS#+#outputDir#,#getLocation#(#)#)#;#}#if#(#!#outputDir#.#isDirectory#(#)#)#{#throw#new#BuildException#(#ERROR_NOT_A_DIR#+#outputDir#,#getLocation#(#)#)#;#}#if#(#verify#)#{#log#(#"Verify has been turned on."#,#Project#.#MSG_VERBOSE#)#;#}#RmicAdapter#adapter#=#nestedAdapter#!=#null#?#nestedAdapter#:#RmicAdapterFactory#.#getRmic#(#getCompiler#(#)#,#this#,#createCompilerClasspath#(#)#)#;#// now we need to populate the compiler adapter#adapter#.#setRmic#(#this#)#;#Path#classpath#=#adapter#.#getClasspath#(#)#;#loader#=#getProject#(#)#.#createClassLoader#(#classpath#)#;#// scan base dirs to build up compile lists only if a#// specific classname is not given#if#(#classname#==#null#)#{#DirectoryScanner#ds#=#this#.#getDirectoryScanner#(#baseDir#)#;#String#[#]#files#=#ds#.#getIncludedFiles#(#)#;#scanDir#(#baseDir#,#files#,#adapter#.#getMapper#(#)#)#;#}#else#{#// otherwise perform a timestamp comparison - at least#String#path#=#classname#.#replace#(#'.'#,#File#.#separatorChar#)#+#".class"#;#File#f#=#new#File#(#baseDir#,#path#)#;#if#(#f#.#isFile#(#)#)#{#scanDir#(#baseDir#,#new#String#[#]#{#path#}#,#adapter#.#getMapper#(#)#)#;#}#else#{#// Does not exist, so checking whether it is up to#// date makes no sense.  Compilation will fail#// later anyway, but tests expect a certain#// output.#compileList#.#add#(#classname#)#;#}#}#int#fileCount#=#compileList#.#size#(#)#;#if#(#fileCount#>#0#)#{#log#(#"RMI Compiling "#+#fileCount#+#" class"#+#(#fileCount#>#1#?#"es"#:#""#)#+#" to "#+#outputDir#,#Project#.#MSG_INFO#)#;#if#(#listFiles#)#{#for#(#int#i#=#0#;#i#<#fileCount#;#i#++#)#{#log#(#compileList#.#get#(#i#)#.#toString#(#)#)#;#}#}#// finally, lets execute the compiler!!#if#(#!#adapter#.#execute#(#)#)#{#throw#new#BuildException#(#ERROR_RMIC_FAILED#,#getLocation#(#)#)#;#}#}#/*
             * Move the generated source file to the base directory.  If
             * base directory and sourcebase are the same, the generated
             * sources are already in place.
             */#if#(#null#!=#sourceBase#&&#!#outputDir#.#equals#(#sourceBase#)#&&#fileCount#>#0#)#{#if#(#idl#)#{#log#(#"Cannot determine sourcefiles in idl mode, "#,#Project#.#MSG_WARN#)#;#log#(#"sourcebase attribute will be ignored."#,#Project#.#MSG_WARN#)#;#}#else#{#for#(#int#j#=#0#;#j#<#fileCount#;#j#++#)#{#moveGeneratedFile#(#outputDir#,#sourceBase#,#(#String#)#compileList#.#elementAt#(#j#)#,#adapter#)#;#}#}#}#}#finally#{#cleanup#(#)#;#}#}##void#cleanup#(#)#{#if#(#loader#!=#null#)#{#loader#.#cleanup#(#)#;#loader#=#null#;#}#}##void#moveGeneratedFile#(#File#baseDir#,#File#sourceBaseFile#,#String#classname#,#RmicAdapter#adapter#)#throws#BuildException#{#String#classFileName#=#classname#.#replace#(#'.'#,#File#.#separatorChar#)#+#".class"#;#String#[#]#generatedFiles#=#adapter#.#getMapper#(#)#.#mapFileName#(#classFileName#)#;#for#(#int#i#=#0#;#i#<#generatedFiles#.#length#;#i#++#)#{#final#String#generatedFile#=#generatedFiles#[#i#]#;#if#(#!#generatedFile#.#endsWith#(#".class"#)#)#{#// don't know how to handle that - a IDL file doesn't#// have a corresponding Java source for example.#continue#;#}#String#sourceFileName#=#StringUtils#.#removeSuffix#(#generatedFile#,#".class"#)#;#File#oldFile#=#new#File#(#baseDir#,#sourceFileName#)#;#if#(#!#oldFile#.#exists#(#)#)#{#// no source file generated, nothing to move#continue#;#}#File#newFile#=#new#File#(#sourceBaseFile#,#sourceFileName#)#;#try#{#if#(#filtering#)#{#FILE_UTILS#.#copyFile#(#oldFile#,#newFile#,#new#FilterSetCollection#(#getProject#(#)#.#getGlobalFilterSet#(#)#)#)#;#}#else#{#FILE_UTILS#.#copyFile#(#oldFile#,#newFile#)#;#}#oldFile#.#delete#(#)#;#}#catch#(#IOException#ioe#)#{#String#msg#=#"Failed to copy "#+#oldFile#+#" to "#+#newFile#+#" due to "#+#ioe#.#getMessage#(#)#;#throw#new#BuildException#(#msg#,#ioe#,#getLocation#(#)#)#;#}#}#}##void#scanDir#(#File#baseDir#,#String#[#]#files#,#FileNameMapper#mapper#)#{#String#[#]#newFiles#=#files#;#if#(#idl#)#{#log#(#"will leave uptodate test to rmic implementation in idl mode."#,#Project#.#MSG_VERBOSE#)#;#}#else#if#(#iiop#&&#iiopOpts#!=#null#&&#iiopOpts#.#indexOf#(#"-always"#)#>#-#1#)#{#log#(#"no uptodate test as -always option has been specified"#,#Project#.#MSG_VERBOSE#)#;#}#else#{#SourceFileScanner#sfs#=#new#SourceFileScanner#(#this#)#;#newFiles#=#sfs#.#restrict#(#files#,#baseDir#,#getOutputDir#(#)#,#mapper#)#;#}#for#(#int#i#=#0#;#i#<#newFiles#.#length#;#i#++#)#{#String#name#=#newFiles#[#i#]#.#replace#(#File#.#separatorChar#,#'.'#)#;#name#=#name#.#substring#(#0#,#name#.#lastIndexOf#(#".class"#)#)#;#compileList#.#addElement#(#name#)#;#}#}##boolean#isValidRmiRemote#(#String#classname#)#{#try#{#Class#testClass#=#loader#.#loadClass#(#classname#)#;#// One cannot RMIC an interface for "classic" RMI (JRMP)#if#(#testClass#.#isInterface#(#)#&&#!#iiop#&&#!#idl#)#{#return#false#;#}#return#isValidRmiRemote#(#testClass#)#;#}#catch#(#ClassNotFoundException#e#)#{#log#(#ERROR_UNABLE_TO_VERIFY_CLASS#+#classname#+#ERROR_NOT_FOUND#,#Project#.#MSG_WARN#)#;#}#catch#(#NoClassDefFoundError#e#)#{#log#(#ERROR_UNABLE_TO_VERIFY_CLASS#+#classname#+#ERROR_NOT_DEFINED#,#Project#.#MSG_WARN#)#;#}#catch#(#Throwable#t#)#{#log#(#ERROR_UNABLE_TO_VERIFY_CLASS#+#classname#+#ERROR_LOADING_CAUSED_EXCEPTION#+#t#.#getMessage#(#)#,#Project#.#MSG_WARN#)#;#}#// we only get here if an exception has been thrown#return#false#;#}##Class#getRemoteInterface#(#Class#testClass#)#{#if#(#Remote#.#class#.#isAssignableFrom#(#testClass#)#)#{#Class#[#]#interfaces#=#testClass#.#getInterfaces#(#)#;#if#(#interfaces#!=#null#)#{#for#(#int#i#=#0#;#i#<#interfaces#.#length#;#i#++#)#{#if#(#Remote#.#class#.#isAssignableFrom#(#interfaces#[#i#]#)#)#{#return#interfaces#[#i#]#;#}#}#}#}#return#null#;#}##boolean#isValidRmiRemote#(#Class#testClass#)#{#return#getRemoteInterface#(#testClass#)#!=#null#;#}##ClassLoader#getLoader#(#)#{#return#loader#;#}##void#setCompiler#(#String#impl#)#{#super#.#setImplementation#(#impl#)#;#}##