void#setCabfile#(#File#cabFile#)#{#this#.#cabFile#=#cabFile#;#}##void#setBasedir#(#File#baseDir#)#{#this#.#baseDir#=#baseDir#;#}##void#setCompress#(#boolean#compress#)#{#doCompress#=#compress#;#}##void#setVerbose#(#boolean#verbose#)#{#doVerbose#=#verbose#;#}##void#setOptions#(#String#options#)#{#cmdOptions#=#options#;#}##void#addFileset#(#FileSet#set#)#{#if#(#filesets#.#size#(#)#>#0#)#{#throw#new#BuildException#(#"Only one nested fileset allowed"#)#;#}#filesets#.#addElement#(#set#)#;#}##void#checkConfiguration#(#)#throws#BuildException#{#if#(#baseDir#==#null#&&#filesets#.#size#(#)#==#0#)#{#throw#new#BuildException#(#"basedir attribute or one "#+#"nested fileset is required!"#,#getLocation#(#)#)#;#}#if#(#baseDir#!=#null#&&#!#baseDir#.#exists#(#)#)#{#throw#new#BuildException#(#"basedir does not exist!"#,#getLocation#(#)#)#;#}#if#(#baseDir#!=#null#&&#filesets#.#size#(#)#>#0#)#{#throw#new#BuildException#(#"Both basedir attribute and a nested fileset is not allowed"#)#;#}#if#(#cabFile#==#null#)#{#throw#new#BuildException#(#"cabfile attribute must be set!"#,#getLocation#(#)#)#;#}#}##ExecTask#createExec#(#)#throws#BuildException#{#ExecTask#exec#=#new#ExecTask#(#this#)#;#return#exec#;#}##boolean#isUpToDate#(#Vector#files#)#{#boolean#upToDate#=#true#;#for#(#int#i#=#0#;#i#<#files#.#size#(#)#&&#upToDate#;#i#++#)#{#String#file#=#files#.#elementAt#(#i#)#.#toString#(#)#;#if#(#FILE_UTILS#.#resolveFile#(#baseDir#,#file#)#.#lastModified#(#)#>#cabFile#.#lastModified#(#)#)#{#upToDate#=#false#;#}#}#return#upToDate#;#}##File#createListFile#(#Vector#files#)#throws#IOException#{#File#listFile#=#FILE_UTILS#.#createTempFile#(#"ant"#,#""#,#null#,#true#,#true#)#;#BufferedWriter#writer#=#null#;#try#{#writer#=#new#BufferedWriter#(#new#FileWriter#(#listFile#)#)#;#int#size#=#files#.#size#(#)#;#for#(#int#i#=#0#;#i#<#size#;#i#++#)#{#writer#.#write#(#'\"'#+#files#.#elementAt#(#i#)#.#toString#(#)#+#'\"'#)#;#writer#.#newLine#(#)#;#}#}#finally#{#FileUtils#.#close#(#writer#)#;#}#return#listFile#;#}##void#appendFiles#(#Vector#files#,#DirectoryScanner#ds#)#{#String#[#]#dsfiles#=#ds#.#getIncludedFiles#(#)#;#for#(#int#i#=#0#;#i#<#dsfiles#.#length#;#i#++#)#{#files#.#addElement#(#dsfiles#[#i#]#)#;#}#}##Vector#getFileList#(#)#throws#BuildException#{#Vector#files#=#new#Vector#(#)#;#if#(#baseDir#!=#null#)#{#// get files from old methods - includes and nested include#appendFiles#(#files#,#super#.#getDirectoryScanner#(#baseDir#)#)#;#}#else#{#FileSet#fs#=#(#FileSet#)#filesets#.#elementAt#(#0#)#;#baseDir#=#fs#.#getDir#(#)#;#appendFiles#(#files#,#fs#.#getDirectoryScanner#(#getProject#(#)#)#)#;#}#return#files#;#}##void#execute#(#)#throws#BuildException#{#checkConfiguration#(#)#;#Vector#files#=#getFileList#(#)#;#// quick exit if the target is up to date#if#(#isUpToDate#(#files#)#)#{#return#;#}#log#(#"Building "#+#archiveType#+#": "#+#cabFile#.#getAbsolutePath#(#)#)#;#if#(#!#Os#.#isFamily#(#"windows"#)#)#{#log#(#"Using listcab/libcabinet"#,#Project#.#MSG_VERBOSE#)#;#StringBuffer#sb#=#new#StringBuffer#(#)#;#Enumeration#fileEnum#=#files#.#elements#(#)#;#while#(#fileEnum#.#hasMoreElements#(#)#)#{#sb#.#append#(#fileEnum#.#nextElement#(#)#)#.#append#(#"\n"#)#;#}#sb#.#append#(#"\n"#)#.#append#(#cabFile#.#getAbsolutePath#(#)#)#.#append#(#"\n"#)#;#try#{#Process#p#=#Execute#.#launch#(#getProject#(#)#,#new#String#[#]#{#"listcab"#}#,#null#,#baseDir#!=#null#?#baseDir#:#getProject#(#)#.#getBaseDir#(#)#,#true#)#;#OutputStream#out#=#p#.#getOutputStream#(#)#;#// Create the stream pumpers to forward listcab's stdout and stderr to the log#// note: listcab is an interactive program, and issues prompts for every new line.#//       Therefore, make it show only with verbose logging turned on.#LogOutputStream#outLog#=#new#LogOutputStream#(#this#,#Project#.#MSG_VERBOSE#)#;#LogOutputStream#errLog#=#new#LogOutputStream#(#this#,#Project#.#MSG_ERR#)#;#StreamPumper#outPump#=#new#StreamPumper#(#p#.#getInputStream#(#)#,#outLog#)#;#StreamPumper#errPump#=#new#StreamPumper#(#p#.#getErrorStream#(#)#,#errLog#)#;#// Pump streams asynchronously#(#new#Thread#(#outPump#)#)#.#start#(#)#;#(#new#Thread#(#errPump#)#)#.#start#(#)#;#out#.#write#(#sb#.#toString#(#)#.#getBytes#(#)#)#;#out#.#flush#(#)#;#out#.#close#(#)#;#// A wild default for when the thread is interrupted#int#result#=#DEFAULT_RESULT#;#try#{#// Wait for the process to finish#result#=#p#.#waitFor#(#)#;#// Wait for the end of output and error streams#outPump#.#waitFor#(#)#;#outLog#.#close#(#)#;#errPump#.#waitFor#(#)#;#errLog#.#close#(#)#;#}#catch#(#InterruptedException#ie#)#{#log#(#"Thread interrupted: "#+#ie#)#;#}#// Informative summary message in case of errors#if#(#Execute#.#isFailure#(#result#)#)#{#log#(#"Error executing listcab; error code: "#+#result#)#;#}#}#catch#(#IOException#ex#)#{#String#msg#=#"Problem creating "#+#cabFile#+#" "#+#ex#.#getMessage#(#)#;#throw#new#BuildException#(#msg#,#getLocation#(#)#)#;#}#}#else#{#try#{#File#listFile#=#createListFile#(#files#)#;#ExecTask#exec#=#createExec#(#)#;#File#outFile#=#null#;#// die if cabarc fails#exec#.#setFailonerror#(#true#)#;#exec#.#setDir#(#baseDir#)#;#if#(#!#doVerbose#)#{#outFile#=#FILE_UTILS#.#createTempFile#(#"ant"#,#""#,#null#,#true#,#true#)#;#exec#.#setOutput#(#outFile#)#;#}#exec#.#setExecutable#(#"cabarc"#)#;#exec#.#createArg#(#)#.#setValue#(#"-r"#)#;#exec#.#createArg#(#)#.#setValue#(#"-p"#)#;#if#(#!#doCompress#)#{#exec#.#createArg#(#)#.#setValue#(#"-m"#)#;#exec#.#createArg#(#)#.#setValue#(#"none"#)#;#}#if#(#cmdOptions#!=#null#)#{#exec#.#createArg#(#)#.#setLine#(#cmdOptions#)#;#}#exec#.#createArg#(#)#.#setValue#(#"n"#)#;#exec#.#createArg#(#)#.#setFile#(#cabFile#)#;#exec#.#createArg#(#)#.#setValue#(#"@"#+#listFile#.#getAbsolutePath#(#)#)#;#exec#.#execute#(#)#;#if#(#outFile#!=#null#)#{#outFile#.#delete#(#)#;#}#listFile#.#delete#(#)#;#}#catch#(#IOException#ioe#)#{#String#msg#=#"Problem creating "#+#cabFile#+#" "#+#ioe#.#getMessage#(#)#;#throw#new#BuildException#(#msg#,#getLocation#(#)#)#;#}#}#}##