void#execute#(#)#throws#BuildException#{#Commandline#commandLine#=#new#Commandline#(#)#;#Project#aProj#=#getProject#(#)#;#int#result#=#0#;#// Default the viewpath to basedir if it is not specified#if#(#getViewPath#(#)#==#null#)#{#setViewPath#(#aProj#.#getBaseDir#(#)#.#getPath#(#)#)#;#}#// build the command line from what we got. the format is#// cleartool checkin [options...] [viewpath ...]#// as specified in the CLEARTOOL.EXE help#commandLine#.#setExecutable#(#getClearToolCommand#(#)#)#;#commandLine#.#createArgument#(#)#.#setValue#(#COMMAND_CHECKIN#)#;#checkOptions#(#commandLine#)#;#if#(#!#getFailOnErr#(#)#)#{#getProject#(#)#.#log#(#"Ignoring any errors that occur for: "#+#getViewPathBasename#(#)#,#Project#.#MSG_VERBOSE#)#;#}#result#=#run#(#commandLine#)#;#if#(#Execute#.#isFailure#(#result#)#&&#getFailOnErr#(#)#)#{#String#msg#=#"Failed executing: "#+#commandLine#.#toString#(#)#;#throw#new#BuildException#(#msg#,#getLocation#(#)#)#;#}#}##void#checkOptions#(#Commandline#cmd#)#{#if#(#getComment#(#)#!=#null#)#{#// -c#getCommentCommand#(#cmd#)#;#}#else#{#if#(#getCommentFile#(#)#!=#null#)#{#// -cfile#getCommentFileCommand#(#cmd#)#;#}#else#{#cmd#.#createArgument#(#)#.#setValue#(#FLAG_NOCOMMENT#)#;#}#}#if#(#getNoWarn#(#)#)#{#// -nwarn#cmd#.#createArgument#(#)#.#setValue#(#FLAG_NOWARN#)#;#}#if#(#getPreserveTime#(#)#)#{#// -ptime#cmd#.#createArgument#(#)#.#setValue#(#FLAG_PRESERVETIME#)#;#}#if#(#getKeepCopy#(#)#)#{#// -keep#cmd#.#createArgument#(#)#.#setValue#(#FLAG_KEEPCOPY#)#;#}#if#(#getIdentical#(#)#)#{#// -identical#cmd#.#createArgument#(#)#.#setValue#(#FLAG_IDENTICAL#)#;#}#// viewpath#cmd#.#createArgument#(#)#.#setValue#(#getViewPath#(#)#)#;#}##void#setComment#(#String#comment#)#{#mComment#=#comment#;#}##String#getComment#(#)#{#return#mComment#;#}##void#setCommentFile#(#String#cfile#)#{#mCfile#=#cfile#;#}##String#getCommentFile#(#)#{#return#mCfile#;#}##void#setNoWarn#(#boolean#nwarn#)#{#mNwarn#=#nwarn#;#}##boolean#getNoWarn#(#)#{#return#mNwarn#;#}##void#setPreserveTime#(#boolean#ptime#)#{#mPtime#=#ptime#;#}##boolean#getPreserveTime#(#)#{#return#mPtime#;#}##void#setKeepCopy#(#boolean#keep#)#{#mKeep#=#keep#;#}##boolean#getKeepCopy#(#)#{#return#mKeep#;#}##void#setIdentical#(#boolean#identical#)#{#mIdentical#=#identical#;#}##boolean#getIdentical#(#)#{#return#mIdentical#;#}##void#getCommentCommand#(#Commandline#cmd#)#{#if#(#getComment#(#)#!=#null#)#{#/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */#cmd#.#createArgument#(#)#.#setValue#(#FLAG_COMMENT#)#;#cmd#.#createArgument#(#)#.#setValue#(#getComment#(#)#)#;#}#}##void#getCommentFileCommand#(#Commandline#cmd#)#{#if#(#getCommentFile#(#)#!=#null#)#{#/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */#cmd#.#createArgument#(#)#.#setValue#(#FLAG_COMMENTFILE#)#;#cmd#.#createArgument#(#)#.#setValue#(#getCommentFile#(#)#)#;#}#}##