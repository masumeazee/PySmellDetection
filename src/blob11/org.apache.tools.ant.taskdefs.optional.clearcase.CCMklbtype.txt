void#execute#(#)#throws#BuildException#{#Commandline#commandLine#=#new#Commandline#(#)#;#int#result#=#0#;#// Check for required attributes#if#(#getTypeName#(#)#==#null#)#{#throw#new#BuildException#(#"Required attribute TypeName not specified"#)#;#}#// build the command line from what we got. the format is#// cleartool mklbtype [options...] type-selector...#// as specified in the CLEARTOOL help#commandLine#.#setExecutable#(#getClearToolCommand#(#)#)#;#commandLine#.#createArgument#(#)#.#setValue#(#COMMAND_MKLBTYPE#)#;#checkOptions#(#commandLine#)#;#if#(#!#getFailOnErr#(#)#)#{#getProject#(#)#.#log#(#"Ignoring any errors that occur for: "#+#getTypeSpecifier#(#)#,#Project#.#MSG_VERBOSE#)#;#}#result#=#run#(#commandLine#)#;#if#(#Execute#.#isFailure#(#result#)#&&#getFailOnErr#(#)#)#{#String#msg#=#"Failed executing: "#+#commandLine#.#toString#(#)#;#throw#new#BuildException#(#msg#,#getLocation#(#)#)#;#}#}##void#checkOptions#(#Commandline#cmd#)#{#if#(#getReplace#(#)#)#{#// -replace#cmd#.#createArgument#(#)#.#setValue#(#FLAG_REPLACE#)#;#}#if#(#getOrdinary#(#)#)#{#// -ordinary#cmd#.#createArgument#(#)#.#setValue#(#FLAG_ORDINARY#)#;#}#else#{#if#(#getGlobal#(#)#)#{#// -global#cmd#.#createArgument#(#)#.#setValue#(#FLAG_GLOBAL#)#;#}#}#if#(#getPbranch#(#)#)#{#// -pbranch#cmd#.#createArgument#(#)#.#setValue#(#FLAG_PBRANCH#)#;#}#if#(#getShared#(#)#)#{#// -shared#cmd#.#createArgument#(#)#.#setValue#(#FLAG_SHARED#)#;#}#if#(#getComment#(#)#!=#null#)#{#// -c#getCommentCommand#(#cmd#)#;#}#else#{#if#(#getCommentFile#(#)#!=#null#)#{#// -cfile#getCommentFileCommand#(#cmd#)#;#}#else#{#cmd#.#createArgument#(#)#.#setValue#(#FLAG_NOCOMMENT#)#;#}#}#// type-name@vob#cmd#.#createArgument#(#)#.#setValue#(#getTypeSpecifier#(#)#)#;#}##void#setTypeName#(#String#tn#)#{#mTypeName#=#tn#;#}##String#getTypeName#(#)#{#return#mTypeName#;#}##void#setVOB#(#String#vob#)#{#mVOB#=#vob#;#}##String#getVOB#(#)#{#return#mVOB#;#}##void#setReplace#(#boolean#repl#)#{#mReplace#=#repl#;#}##boolean#getReplace#(#)#{#return#mReplace#;#}##void#setGlobal#(#boolean#glob#)#{#mGlobal#=#glob#;#}##boolean#getGlobal#(#)#{#return#mGlobal#;#}##void#setOrdinary#(#boolean#ordinary#)#{#mOrdinary#=#ordinary#;#}##boolean#getOrdinary#(#)#{#return#mOrdinary#;#}##void#setPbranch#(#boolean#pbranch#)#{#mPbranch#=#pbranch#;#}##boolean#getPbranch#(#)#{#return#mPbranch#;#}##void#setShared#(#boolean#shared#)#{#mShared#=#shared#;#}##boolean#getShared#(#)#{#return#mShared#;#}##void#setComment#(#String#comment#)#{#mComment#=#comment#;#}##String#getComment#(#)#{#return#mComment#;#}##void#setCommentFile#(#String#cfile#)#{#mCfile#=#cfile#;#}##String#getCommentFile#(#)#{#return#mCfile#;#}##void#getCommentCommand#(#Commandline#cmd#)#{#if#(#getComment#(#)#!=#null#)#{#/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */#cmd#.#createArgument#(#)#.#setValue#(#FLAG_COMMENT#)#;#cmd#.#createArgument#(#)#.#setValue#(#getComment#(#)#)#;#}#}##void#getCommentFileCommand#(#Commandline#cmd#)#{#if#(#getCommentFile#(#)#!=#null#)#{#/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */#cmd#.#createArgument#(#)#.#setValue#(#FLAG_COMMENTFILE#)#;#cmd#.#createArgument#(#)#.#setValue#(#getCommentFile#(#)#)#;#}#}##String#getTypeSpecifier#(#)#{#String#typenm#=#null#;#typenm#=#getTypeName#(#)#;#if#(#getVOB#(#)#!=#null#)#{#typenm#+=#"@"#+#getVOB#(#)#;#}#return#typenm#;#}##