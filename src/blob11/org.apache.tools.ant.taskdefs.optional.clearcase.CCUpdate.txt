void#execute#(#)#throws#BuildException#{#Commandline#commandLine#=#new#Commandline#(#)#;#Project#aProj#=#getProject#(#)#;#int#result#=#0#;#// Default the viewpath to basedir if it is not specified#if#(#getViewPath#(#)#==#null#)#{#setViewPath#(#aProj#.#getBaseDir#(#)#.#getPath#(#)#)#;#}#// build the command line from what we got the format is#// cleartool update [options...] [viewpath ...]#// as specified in the CLEARTOOL.EXE help#commandLine#.#setExecutable#(#getClearToolCommand#(#)#)#;#commandLine#.#createArgument#(#)#.#setValue#(#COMMAND_UPDATE#)#;#// Check the command line options#checkOptions#(#commandLine#)#;#// For debugging#getProject#(#)#.#log#(#commandLine#.#toString#(#)#,#Project#.#MSG_DEBUG#)#;#if#(#!#getFailOnErr#(#)#)#{#getProject#(#)#.#log#(#"Ignoring any errors that occur for: "#+#getViewPathBasename#(#)#,#Project#.#MSG_VERBOSE#)#;#}#result#=#run#(#commandLine#)#;#if#(#Execute#.#isFailure#(#result#)#&&#getFailOnErr#(#)#)#{#String#msg#=#"Failed executing: "#+#commandLine#.#toString#(#)#;#throw#new#BuildException#(#msg#,#getLocation#(#)#)#;#}#}##void#checkOptions#(#Commandline#cmd#)#{#// ClearCase items#if#(#getGraphical#(#)#)#{#// -graphical#cmd#.#createArgument#(#)#.#setValue#(#FLAG_GRAPHICAL#)#;#}#else#{#if#(#getOverwrite#(#)#)#{#// -overwrite#cmd#.#createArgument#(#)#.#setValue#(#FLAG_OVERWRITE#)#;#}#else#{#if#(#getRename#(#)#)#{#// -rename#cmd#.#createArgument#(#)#.#setValue#(#FLAG_RENAME#)#;#}#else#{#// -noverwrite#cmd#.#createArgument#(#)#.#setValue#(#FLAG_NOVERWRITE#)#;#}#}#if#(#getCurrentTime#(#)#)#{#// -ctime#cmd#.#createArgument#(#)#.#setValue#(#FLAG_CURRENTTIME#)#;#}#else#{#if#(#getPreserveTime#(#)#)#{#// -ptime#cmd#.#createArgument#(#)#.#setValue#(#FLAG_PRESERVETIME#)#;#}#}#// -log logname#getLogCommand#(#cmd#)#;#}#// viewpath#cmd#.#createArgument#(#)#.#setValue#(#getViewPath#(#)#)#;#}##void#setGraphical#(#boolean#graphical#)#{#mGraphical#=#graphical#;#}##boolean#getGraphical#(#)#{#return#mGraphical#;#}##void#setOverwrite#(#boolean#ow#)#{#mOverwrite#=#ow#;#}##boolean#getOverwrite#(#)#{#return#mOverwrite#;#}##void#setRename#(#boolean#ren#)#{#mRename#=#ren#;#}##boolean#getRename#(#)#{#return#mRename#;#}##void#setCurrentTime#(#boolean#ct#)#{#mCtime#=#ct#;#}##boolean#getCurrentTime#(#)#{#return#mCtime#;#}##void#setPreserveTime#(#boolean#pt#)#{#mPtime#=#pt#;#}##boolean#getPreserveTime#(#)#{#return#mPtime#;#}##void#setLog#(#String#log#)#{#mLog#=#log#;#}##String#getLog#(#)#{#return#mLog#;#}##void#getLogCommand#(#Commandline#cmd#)#{#if#(#getLog#(#)#==#null#)#{#return#;#}#else#{#/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */#cmd#.#createArgument#(#)#.#setValue#(#FLAG_LOG#)#;#cmd#.#createArgument#(#)#.#setValue#(#getLog#(#)#)#;#}#}##