void#setType#(#TypeAttribute#type#)#{#if#(#"xml"#.#equals#(#type#.#getValue#(#)#)#)#{#setClassname#(#XML_FORMATTER_CLASS_NAME#)#;#}#else#{#if#(#"brief"#.#equals#(#type#.#getValue#(#)#)#)#{#setClassname#(#BRIEF_FORMATTER_CLASS_NAME#)#;#}#else#{#if#(#"failure"#.#equals#(#type#.#getValue#(#)#)#)#{#setClassname#(#FAILURE_RECORDER_CLASS_NAME#)#;#}#else#{#// must be plain, ensured by TypeAttribute#setClassname#(#PLAIN_FORMATTER_CLASS_NAME#)#;#}#}#}#}##void#setClassname#(#String#classname#)#{#this#.#classname#=#classname#;#if#(#XML_FORMATTER_CLASS_NAME#.#equals#(#classname#)#)#{#setExtension#(#".xml"#)#;#}#else#if#(#PLAIN_FORMATTER_CLASS_NAME#.#equals#(#classname#)#)#{#setExtension#(#".txt"#)#;#}#else#if#(#BRIEF_FORMATTER_CLASS_NAME#.#equals#(#classname#)#)#{#setExtension#(#".txt"#)#;#}#}##String#getClassname#(#)#{#return#classname#;#}##void#setExtension#(#String#ext#)#{#this#.#extension#=#ext#;#}##String#getExtension#(#)#{#return#extension#;#}##void#setOutfile#(#File#out#)#{#this#.#outFile#=#out#;#}##void#setOutput#(#OutputStream#out#)#{#if#(#out#==#System#.#out#||#out#==#System#.#err#)#{#out#=#new#KeepAliveOutputStream#(#out#)#;#}#this#.#out#=#out#;#}##void#setUseFile#(#boolean#useFile#)#{#this#.#useFile#=#useFile#;#}##boolean#getUseFile#(#)#{#return#useFile#;#}##void#setIf#(#Object#ifCond#)#{#this#.#ifCond#=#ifCond#;#}##void#setIf#(#String#ifCond#)#{#setIf#(#(#Object#)#ifCond#)#;#}##void#setUnless#(#Object#unlessCond#)#{#this#.#unlessCond#=#unlessCond#;#}##void#setUnless#(#String#unlessCond#)#{#setUnless#(#(#Object#)#unlessCond#)#;#}##boolean#shouldUse#(#Task#t#)#{#PropertyHelper#ph#=#PropertyHelper#.#getPropertyHelper#(#t#.#getProject#(#)#)#;#return#ph#.#testIfCondition#(#ifCond#)#&&#ph#.#testUnlessCondition#(#unlessCond#)#;#}##JUnitTaskMirror#.#JUnitResultFormatterMirror#createFormatter#(#)#throws#BuildException#{#return#createFormatter#(#null#)#;#}##void#setProject#(#Project#project#)#{#this#.#project#=#project#;#}##JUnitTaskMirror#.#JUnitResultFormatterMirror#createFormatter#(#ClassLoader#loader#)#throws#BuildException#{#if#(#classname#==#null#)#{#throw#new#BuildException#(#"you must specify type or classname"#)#;#}#//although this code appears to duplicate that of ClasspathUtils.newInstance,#//we cannot use that because this formatter may run in a forked process,#//without that class.#Class#f#=#null#;#try#{#if#(#loader#==#null#)#{#f#=#Class#.#forName#(#classname#)#;#}#else#{#f#=#Class#.#forName#(#classname#,#true#,#loader#)#;#}#}#catch#(#ClassNotFoundException#e#)#{#throw#new#BuildException#(#"Using loader "#+#loader#+#" on class "#+#classname#+#": "#+#e#,#e#)#;#}#catch#(#NoClassDefFoundError#e#)#{#throw#new#BuildException#(#"Using loader "#+#loader#+#" on class "#+#classname#+#": "#+#e#,#e#)#;#}#Object#o#=#null#;#try#{#o#=#f#.#newInstance#(#)#;#}#catch#(#InstantiationException#e#)#{#throw#new#BuildException#(#e#)#;#}#catch#(#IllegalAccessException#e#)#{#throw#new#BuildException#(#e#)#;#}#if#(#!#(#o#instanceof#JUnitTaskMirror#.#JUnitResultFormatterMirror#)#)#{#throw#new#BuildException#(#classname#+#" is not a JUnitResultFormatter"#)#;#}#JUnitTaskMirror#.#JUnitResultFormatterMirror#r#=#(#JUnitTaskMirror#.#JUnitResultFormatterMirror#)#o#;#if#(#useFile#&&#outFile#!=#null#)#{#try#{#out#=#new#BufferedOutputStream#(#new#FileOutputStream#(#outFile#)#)#;#}#catch#(#java#.#io#.#IOException#e#)#{#throw#new#BuildException#(#"Unable to open file "#+#outFile#,#e#)#;#}#}#r#.#setOutput#(#out#)#;#boolean#needToSetProjectReference#=#true#;#try#{#Field#field#=#r#.#getClass#(#)#.#getField#(#"project"#)#;#Object#value#=#field#.#get#(#r#)#;#if#(#value#instanceof#Project#)#{#// there is already a project reference so dont overwrite this#needToSetProjectReference#=#false#;#}#}#catch#(#Exception#e#)#{#// no field present, so no previous reference exists#}#if#(#needToSetProjectReference#)#{#Method#setter#;#try#{#setter#=#r#.#getClass#(#)#.#getMethod#(#"setProject"#,#new#Class#[#]#{#Project#.#class#}#)#;#setter#.#invoke#(#r#,#new#Object#[#]#{#project#}#)#;#}#catch#(#Exception#e#)#{#// no setProject to invoke; just ignore#}#}#return#r#;#}##String#[#]#getValues#(#)#{#return#new#String#[#]#{#"plain"#,#"xml"#,#"brief"#,#"failure"#}#;#}##