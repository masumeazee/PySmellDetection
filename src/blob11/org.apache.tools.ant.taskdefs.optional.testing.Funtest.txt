void#logOverride#(#String#name#,#Object#definition#)#{#if#(#definition#!=#null#)#{#log#(#WARN_OVERRIDING#+#'<'#+#name#+#'>'#,#Project#.#MSG_INFO#)#;#}#}##ConditionBase#createCondition#(#)#{#logOverride#(#"condition"#,#condition#)#;#condition#=#new#NestedCondition#(#)#;#return#condition#;#}##void#addApplication#(#Sequential#sequence#)#{#logOverride#(#"application"#,#application#)#;#application#=#sequence#;#}##void#addSetup#(#Sequential#sequence#)#{#logOverride#(#"setup"#,#setup#)#;#setup#=#sequence#;#}##void#addBlock#(#BlockFor#sequence#)#{#logOverride#(#"block"#,#block#)#;#block#=#sequence#;#}##void#addTests#(#Sequential#sequence#)#{#logOverride#(#"tests"#,#tests#)#;#tests#=#sequence#;#}##void#addReporting#(#Sequential#sequence#)#{#logOverride#(#"reporting"#,#reporting#)#;#reporting#=#sequence#;#}##void#addTeardown#(#Sequential#sequence#)#{#logOverride#(#"teardown"#,#teardown#)#;#teardown#=#sequence#;#}##void#setFailOnTeardownErrors#(#boolean#failOnTeardownErrors#)#{#this#.#failOnTeardownErrors#=#failOnTeardownErrors#;#}##void#setFailureMessage#(#String#failureMessage#)#{#this#.#failureMessage#=#failureMessage#;#}##void#setFailureProperty#(#String#failureProperty#)#{#this#.#failureProperty#=#failureProperty#;#}##void#setShutdownTime#(#long#shutdownTime#)#{#this#.#shutdownTime#=#shutdownTime#;#}##void#setTimeout#(#long#timeout#)#{#this#.#timeout#=#timeout#;#}##void#setTimeoutUnit#(#WaitFor#.#Unit#unit#)#{#timeoutUnitMultiplier#=#unit#.#getMultiplier#(#)#;#}##void#setShutdownUnit#(#WaitFor#.#Unit#unit#)#{#shutdownUnitMultiplier#=#unit#.#getMultiplier#(#)#;#}##BuildException#getApplicationException#(#)#{#return#applicationException#;#}##BuildException#getTeardownException#(#)#{#return#teardownException#;#}##BuildException#getTestException#(#)#{#return#testException#;#}##BuildException#getTaskException#(#)#{#return#taskException#;#}##void#bind#(#Task#task#)#{#task#.#bindToOwner#(#this#)#;#task#.#init#(#)#;#}##Parallel#newParallel#(#long#parallelTimeout#)#{#Parallel#par#=#new#Parallel#(#)#;#bind#(#par#)#;#par#.#setFailOnAny#(#true#)#;#par#.#setTimeout#(#parallelTimeout#)#;#return#par#;#}##Parallel#newParallel#(#long#parallelTimeout#,#Task#child#)#{#Parallel#par#=#newParallel#(#parallelTimeout#)#;#par#.#addTask#(#child#)#;#return#par#;#}##void#validateTask#(#Task#task#,#String#role#)#{#if#(#task#!=#null#&&#task#.#getProject#(#)#==#null#)#{#throw#new#BuildException#(#role#+#" task is not bound to the project"#+#task#)#;#}#}##void#execute#(#)#throws#BuildException#{#//validation#validateTask#(#setup#,#"setup"#)#;#validateTask#(#application#,#"application"#)#;#validateTask#(#tests#,#"tests"#)#;#validateTask#(#reporting#,#"reporting"#)#;#validateTask#(#teardown#,#"teardown"#)#;#//check the condition#//and bail out if it is defined but not true#if#(#condition#!=#null#&&#!#condition#.#eval#(#)#)#{#//we are skipping the test#log#(#SKIPPING_TESTS#)#;#return#;#}#long#timeoutMillis#=#timeout#*#timeoutUnitMultiplier#;#//set up the application to run in a separate thread#Parallel#applicationRun#=#newParallel#(#timeoutMillis#)#;#//with a worker which we can use to manage it#WorkerAnt#worker#=#new#WorkerAnt#(#applicationRun#,#null#)#;#if#(#application#!=#null#)#{#applicationRun#.#addTask#(#application#)#;#}#//The test run consists of the block followed by the tests.#long#testRunTimeout#=#0#;#Sequential#testRun#=#new#Sequential#(#)#;#bind#(#testRun#)#;#if#(#block#!=#null#)#{#//waitfor is not a task, it needs to be adapted#TaskAdapter#ta#=#new#TaskAdapter#(#block#)#;#ta#.#bindToOwner#(#this#)#;#validateTask#(#ta#,#"block"#)#;#testRun#.#addTask#(#ta#)#;#//add the block time to the total test run timeout#testRunTimeout#=#block#.#calculateMaxWaitMillis#(#)#;#}#//add the tests and more delay#if#(#tests#!=#null#)#{#testRun#.#addTask#(#tests#)#;#testRunTimeout#+=#timeoutMillis#;#}#//add the reporting and more delay#if#(#reporting#!=#null#)#{#testRun#.#addTask#(#reporting#)#;#testRunTimeout#+=#timeoutMillis#;#}#//wrap this in a parallel purely to set up timeouts for the#//test run#timedTests#=#newParallel#(#testRunTimeout#,#testRun#)#;#try#{#//run any setup task#if#(#setup#!=#null#)#{#Parallel#setupRun#=#newParallel#(#timeoutMillis#,#setup#)#;#setupRun#.#execute#(#)#;#}#//start the worker thread and leave it running#worker#.#start#(#)#;#//start the probe+test sequence#timedTests#.#execute#(#)#;#}#catch#(#BuildException#e#)#{#//Record the exception and continue#testException#=#e#;#}#finally#{#//teardown always runs; its faults are filed away#if#(#teardown#!=#null#)#{#try#{#Parallel#teardownRun#=#newParallel#(#timeoutMillis#,#teardown#)#;#teardownRun#.#execute#(#)#;#}#catch#(#BuildException#e#)#{#teardownException#=#e#;#}#}#}#//we get here whether or not the tests/teardown have thrown a BuildException.#//do a forced shutdown of the running application, before processing the faults#try#{#//wait for the worker to have finished#long#shutdownTimeMillis#=#shutdownTime#*#shutdownUnitMultiplier#;#worker#.#waitUntilFinished#(#shutdownTimeMillis#)#;#if#(#worker#.#isAlive#(#)#)#{#//then, if it is still running, interrupt it a second time.#log#(#APPLICATION_FORCIBLY_SHUT_DOWN#,#Project#.#MSG_WARN#)#;#worker#.#interrupt#(#)#;#worker#.#waitUntilFinished#(#shutdownTimeMillis#)#;#}#}#catch#(#InterruptedException#e#)#{#//success, something interrupted the shutdown. There may be a leaked#//worker;#log#(#SHUTDOWN_INTERRUPTED#,#e#,#Project#.#MSG_VERBOSE#)#;#}#applicationException#=#worker#.#getBuildException#(#)#;#//Now faults are analysed#processExceptions#(#)#;#}##void#processExceptions#(#)#{#taskException#=#testException#;#//look for an application fault#if#(#applicationException#!=#null#)#{#if#(#taskException#==#null#||#taskException#instanceof#BuildTimeoutException#)#{#taskException#=#applicationException#;#}#else#{#ignoringThrowable#(#APPLICATION_EXCEPTION#,#applicationException#)#;#}#}#//now look for teardown faults, which may be ignored#if#(#teardownException#!=#null#)#{#if#(#taskException#==#null#&&#failOnTeardownErrors#)#{#taskException#=#teardownException#;#}#else#{#//don't let the cleanup exception get in the way of any other failure#ignoringThrowable#(#TEARDOWN_EXCEPTION#,#teardownException#)#;#}#}#//now, analyse the tests#if#(#failureProperty#!=#null#&&#getProject#(#)#.#getProperty#(#failureProperty#)#!=#null#)#{#//we've failed#log#(#failureMessage#)#;#if#(#taskException#==#null#)#{#taskException#=#new#BuildException#(#failureMessage#)#;#}#}#//at this point taskException is null or not.#//if not, throw the exception#if#(#taskException#!=#null#)#{#throw#taskException#;#}#}##void#ignoringThrowable#(#String#type#,#Throwable#thrown#)#{#log#(#type#+#": "#+#thrown#.#toString#(#)#,#thrown#,#Project#.#MSG_WARN#)#;#}##boolean#eval#(#)#{#if#(#countConditions#(#)#!=#1#)#{#throw#new#BuildException#(#"A single nested condition is required."#)#;#}#return#(#(#Condition#)#(#getConditions#(#)#.#nextElement#(#)#)#)#.#eval#(#)#;#}##