void#setRmic#(#final#Rmic#attributes#)#{#this#.#attributes#=#attributes#;#mapper#=#new#RmicFileNameMapper#(#)#;#}##Rmic#getRmic#(#)#{#return#attributes#;#}##String#getStubClassSuffix#(#)#{#return#RMI_STUB_SUFFIX#;#}##String#getSkelClassSuffix#(#)#{#return#RMI_SKEL_SUFFIX#;#}##String#getTieClassSuffix#(#)#{#return#RMI_TIE_SUFFIX#;#}##FileNameMapper#getMapper#(#)#{#return#mapper#;#}##Path#getClasspath#(#)#{#return#getCompileClasspath#(#)#;#}##Path#getCompileClasspath#(#)#{#Path#classpath#=#new#Path#(#attributes#.#getProject#(#)#)#;#// add dest dir to classpath so that previously compiled and#// untouched classes are on classpath#classpath#.#setLocation#(#attributes#.#getBase#(#)#)#;#// Combine the build classpath with the system classpath, in an#// order determined by the value of build.sysclasspath#Path#cp#=#attributes#.#getClasspath#(#)#;#if#(#cp#==#null#)#{#cp#=#new#Path#(#attributes#.#getProject#(#)#)#;#}#if#(#attributes#.#getIncludeantruntime#(#)#)#{#classpath#.#addExisting#(#cp#.#concatSystemClasspath#(#"last"#)#)#;#}#else#{#classpath#.#addExisting#(#cp#.#concatSystemClasspath#(#"ignore"#)#)#;#}#if#(#attributes#.#getIncludejavaruntime#(#)#)#{#classpath#.#addJavaRuntime#(#)#;#}#return#classpath#;#}##Commandline#setupRmicCommand#(#)#{#return#setupRmicCommand#(#null#)#;#}##Commandline#setupRmicCommand#(#String#[#]#options#)#{#Commandline#cmd#=#new#Commandline#(#)#;#if#(#options#!=#null#)#{#for#(#int#i#=#0#;#i#<#options#.#length#;#i#++#)#{#cmd#.#createArgument#(#)#.#setValue#(#options#[#i#]#)#;#}#}#Path#classpath#=#getCompileClasspath#(#)#;#cmd#.#createArgument#(#)#.#setValue#(#"-d"#)#;#cmd#.#createArgument#(#)#.#setFile#(#attributes#.#getOutputDir#(#)#)#;#if#(#attributes#.#getExtdirs#(#)#!=#null#)#{#cmd#.#createArgument#(#)#.#setValue#(#"-extdirs"#)#;#cmd#.#createArgument#(#)#.#setPath#(#attributes#.#getExtdirs#(#)#)#;#}#cmd#.#createArgument#(#)#.#setValue#(#"-classpath"#)#;#cmd#.#createArgument#(#)#.#setPath#(#classpath#)#;#String#stubOption#=#addStubVersionOptions#(#)#;#if#(#stubOption#!=#null#)#{#//set the non-null stubOption#cmd#.#createArgument#(#)#.#setValue#(#stubOption#)#;#}#if#(#null#!=#attributes#.#getSourceBase#(#)#)#{#cmd#.#createArgument#(#)#.#setValue#(#"-keepgenerated"#)#;#}#if#(#attributes#.#getIiop#(#)#)#{#attributes#.#log#(#"IIOP has been turned on."#,#Project#.#MSG_INFO#)#;#cmd#.#createArgument#(#)#.#setValue#(#"-iiop"#)#;#if#(#attributes#.#getIiopopts#(#)#!=#null#)#{#attributes#.#log#(#"IIOP Options: "#+#attributes#.#getIiopopts#(#)#,#Project#.#MSG_INFO#)#;#cmd#.#createArgument#(#)#.#setValue#(#attributes#.#getIiopopts#(#)#)#;#}#}#if#(#attributes#.#getIdl#(#)#)#{#cmd#.#createArgument#(#)#.#setValue#(#"-idl"#)#;#attributes#.#log#(#"IDL has been turned on."#,#Project#.#MSG_INFO#)#;#if#(#attributes#.#getIdlopts#(#)#!=#null#)#{#cmd#.#createArgument#(#)#.#setValue#(#attributes#.#getIdlopts#(#)#)#;#attributes#.#log#(#"IDL Options: "#+#attributes#.#getIdlopts#(#)#,#Project#.#MSG_INFO#)#;#}#}#if#(#attributes#.#getDebug#(#)#)#{#cmd#.#createArgument#(#)#.#setValue#(#"-g"#)#;#}#String#[#]#compilerArgs#=#attributes#.#getCurrentCompilerArgs#(#)#;#compilerArgs#=#preprocessCompilerArgs#(#compilerArgs#)#;#cmd#.#addArguments#(#compilerArgs#)#;#logAndAddFilesToCompile#(#cmd#)#;#return#cmd#;#}##String#addStubVersionOptions#(#)#{#//handle the many different stub options.#String#stubVersion#=#attributes#.#getStubVersion#(#)#;#//default is compatibility#String#stubOption#=#null#;#if#(#null#!=#stubVersion#)#{#if#(#STUB_OPTION_1_1#.#equals#(#stubVersion#)#)#{#stubOption#=#STUB_1_1#;#}#else#if#(#STUB_OPTION_1_2#.#equals#(#stubVersion#)#)#{#stubOption#=#STUB_1_2#;#}#else#if#(#STUB_OPTION_COMPAT#.#equals#(#stubVersion#)#)#{#stubOption#=#STUB_COMPAT#;#}#else#{#//anything else#attributes#.#log#(#"Unknown stub option "#+#stubVersion#)#;#//do nothing with the value? or go -v+stubVersion??#}#}#//for java1.5+, we generate compatible stubs, that is, unless#//the caller asked for IDL or IIOP support.#if#(#stubOption#==#null#&&#!#attributes#.#getIiop#(#)#&&#!#attributes#.#getIdl#(#)#)#{#stubOption#=#STUB_COMPAT#;#}#return#stubOption#;#}##String#[#]#preprocessCompilerArgs#(#String#[#]#compilerArgs#)#{#return#compilerArgs#;#}##String#[#]#filterJvmCompilerArgs#(#String#[#]#compilerArgs#)#{#int#len#=#compilerArgs#.#length#;#List#args#=#new#ArrayList#(#len#)#;#for#(#int#i#=#0#;#i#<#len#;#i#++#)#{#String#arg#=#compilerArgs#[#i#]#;#if#(#!#arg#.#startsWith#(#"-J"#)#)#{#args#.#add#(#arg#)#;#}#else#{#attributes#.#log#(#"Dropping "#+#arg#+#" from compiler arguments"#)#;#}#}#int#count#=#args#.#size#(#)#;#return#(#String#[#]#)#args#.#toArray#(#new#String#[#count#]#)#;#}##void#logAndAddFilesToCompile#(#Commandline#cmd#)#{#Vector#compileList#=#attributes#.#getCompileList#(#)#;#attributes#.#log#(#"Compilation "#+#cmd#.#describeArguments#(#)#,#Project#.#MSG_VERBOSE#)#;#StringBuffer#niceSourceList#=#new#StringBuffer#(#"File"#)#;#int#cListSize#=#compileList#.#size#(#)#;#if#(#cListSize#!=#1#)#{#niceSourceList#.#append#(#"s"#)#;#}#niceSourceList#.#append#(#" to be compiled:"#)#;#for#(#int#i#=#0#;#i#<#cListSize#;#i#++#)#{#String#arg#=#(#String#)#compileList#.#elementAt#(#i#)#;#cmd#.#createArgument#(#)#.#setValue#(#arg#)#;#niceSourceList#.#append#(#"    "#)#;#niceSourceList#.#append#(#arg#)#;#}#attributes#.#log#(#niceSourceList#.#toString#(#)#,#Project#.#MSG_VERBOSE#)#;#}##void#setFrom#(#String#s#)#{#}##void#setTo#(#String#s#)#{#}##String#[#]#mapFileName#(#String#name#)#{#if#(#name#==#null#||#!#name#.#endsWith#(#".class"#)#||#name#.#endsWith#(#getStubClassSuffix#(#)#+#".class"#)#||#name#.#endsWith#(#getSkelClassSuffix#(#)#+#".class"#)#||#name#.#endsWith#(#getTieClassSuffix#(#)#+#".class"#)#)#{#// Not a .class file or the one we'd generate#return#null#;#}#// we know that name.endsWith(".class")#String#base#=#StringUtils#.#removeSuffix#(#name#,#".class"#)#;#String#classname#=#base#.#replace#(#File#.#separatorChar#,#'.'#)#;#if#(#attributes#.#getVerify#(#)#&&#!#attributes#.#isValidRmiRemote#(#classname#)#)#{#return#null#;#}#/*
             * fallback in case we have trouble loading the class or
             * don't know how to handle it (there is no easy way to
             * know what IDL mode would generate.
             *
             * This is supposed to make Ant always recompile the
             * class, as a file of that name should not exist.
             */#String#[#]#target#=#new#String#[#]#{#name#+#".tmp."#+#RAND#.#nextLong#(#)#}#;#if#(#!#attributes#.#getIiop#(#)#&&#!#attributes#.#getIdl#(#)#)#{#// JRMP with simple naming convention#if#(#STUB_OPTION_1_2#.#equals#(#attributes#.#getStubVersion#(#)#)#)#{#target#=#new#String#[#]#{#base#+#getStubClassSuffix#(#)#+#".class"#}#;#}#else#{#target#=#new#String#[#]#{#base#+#getStubClassSuffix#(#)#+#".class"#,#base#+#getSkelClassSuffix#(#)#+#".class"#,#}#;#}#}#else#if#(#!#attributes#.#getIdl#(#)#)#{#int#lastSlash#=#base#.#lastIndexOf#(#File#.#separatorChar#)#;#String#dirname#=#""#;#/*
                 * I know, this is not necessary, but I prefer it explicit (SB)
                 */#int#index#=#-#1#;#if#(#lastSlash#==#-#1#)#{#// no package#index#=#0#;#}#else#{#index#=#lastSlash#+#1#;#dirname#=#base#.#substring#(#0#,#index#)#;#}#String#filename#=#base#.#substring#(#index#)#;#try#{#Class#c#=#attributes#.#getLoader#(#)#.#loadClass#(#classname#)#;#if#(#c#.#isInterface#(#)#)#{#// only stub, no tie#target#=#new#String#[#]#{#dirname#+#"_"#+#filename#+#getStubClassSuffix#(#)#+#".class"#}#;#}#else#{#/*
                         * stub is derived from implementation,
                         * tie from interface name.
                         */#Class#interf#=#attributes#.#getRemoteInterface#(#c#)#;#String#iName#=#interf#.#getName#(#)#;#String#iDir#=#""#;#int#iIndex#=#-#1#;#int#lastDot#=#iName#.#lastIndexOf#(#"."#)#;#if#(#lastDot#==#-#1#)#{#// no package#iIndex#=#0#;#}#else#{#iIndex#=#lastDot#+#1#;#iDir#=#iName#.#substring#(#0#,#iIndex#)#;#iDir#=#iDir#.#replace#(#'.'#,#File#.#separatorChar#)#;#}#target#=#new#String#[#]#{#dirname#+#"_"#+#filename#+#getTieClassSuffix#(#)#+#".class"#,#iDir#+#"_"#+#iName#.#substring#(#iIndex#)#+#getStubClassSuffix#(#)#+#".class"#}#;#}#}#catch#(#ClassNotFoundException#e#)#{#attributes#.#log#(#"Unable to verify class "#+#classname#+#". It could not be found."#,#Project#.#MSG_WARN#)#;#}#catch#(#NoClassDefFoundError#e#)#{#attributes#.#log#(#"Unable to verify class "#+#classname#+#". It is not defined."#,#Project#.#MSG_WARN#)#;#}#catch#(#Throwable#t#)#{#attributes#.#log#(#"Unable to verify class "#+#classname#+#". Loading caused Exception: "#+#t#.#getMessage#(#)#,#Project#.#MSG_WARN#)#;#}#}#return#target#;#}##