void#setToken#(#String#token#)#{#this#.#token#=#token#;#}##void#setValue#(#String#value#)#{#this#.#value#=#value#;#}##String#getToken#(#)#{#return#token#;#}##String#getValue#(#)#{#return#value#;#}##void#setFile#(#File#file#)#{#filtersFiles#.#add#(#file#)#;#}##String#[#]#getValues#(#)#{#return#VALUES#;#}##Vector#getFilters#(#)#{#if#(#isReference#(#)#)#{#return#getRef#(#)#.#getFilters#(#)#;#}#dieOnCircularReference#(#)#;#//silly hack to avoid stack overflow...#if#(#!#readingFiles#)#{#readingFiles#=#true#;#for#(#int#i#=#0#,#sz#=#filtersFiles#.#size#(#)#;#i#<#sz#;#i#++#)#{#readFiltersFromFile#(#(#File#)#filtersFiles#.#get#(#i#)#)#;#}#filtersFiles#.#clear#(#)#;#readingFiles#=#false#;#}#return#filters#;#}##FilterSet#getRef#(#)#{#return#(#FilterSet#)#getCheckedRef#(#FilterSet#.#class#,#"filterset"#)#;#}##Hashtable#getFilterHash#(#)#{#if#(#isReference#(#)#)#{#return#getRef#(#)#.#getFilterHash#(#)#;#}#dieOnCircularReference#(#)#;#if#(#filterHash#==#null#)#{#filterHash#=#new#Hashtable#(#getFilters#(#)#.#size#(#)#)#;#for#(#Enumeration#e#=#getFilters#(#)#.#elements#(#)#;#e#.#hasMoreElements#(#)#;#)#{#Filter#filter#=#(#Filter#)#e#.#nextElement#(#)#;#filterHash#.#put#(#filter#.#getToken#(#)#,#filter#.#getValue#(#)#)#;#}#}#return#filterHash#;#}##void#setFiltersfile#(#File#filtersFile#)#throws#BuildException#{#if#(#isReference#(#)#)#{#throw#tooManyAttributes#(#)#;#}#filtersFiles#.#add#(#filtersFile#)#;#}##void#setBeginToken#(#String#startOfToken#)#{#if#(#isReference#(#)#)#{#throw#tooManyAttributes#(#)#;#}#if#(#startOfToken#==#null#||#""#.#equals#(#startOfToken#)#)#{#throw#new#BuildException#(#"beginToken must not be empty"#)#;#}#this#.#startOfToken#=#startOfToken#;#}##String#getBeginToken#(#)#{#if#(#isReference#(#)#)#{#return#getRef#(#)#.#getBeginToken#(#)#;#}#return#startOfToken#;#}##void#setEndToken#(#String#endOfToken#)#{#if#(#isReference#(#)#)#{#throw#tooManyAttributes#(#)#;#}#if#(#endOfToken#==#null#||#""#.#equals#(#endOfToken#)#)#{#throw#new#BuildException#(#"endToken must not be empty"#)#;#}#this#.#endOfToken#=#endOfToken#;#}##String#getEndToken#(#)#{#if#(#isReference#(#)#)#{#return#getRef#(#)#.#getEndToken#(#)#;#}#return#endOfToken#;#}##void#setRecurse#(#boolean#recurse#)#{#this#.#recurse#=#recurse#;#}##boolean#isRecurse#(#)#{#return#recurse#;#}##void#readFiltersFromFile#(#File#filtersFile#)#throws#BuildException#{#if#(#isReference#(#)#)#{#throw#tooManyAttributes#(#)#;#}#if#(#!#filtersFile#.#exists#(#)#)#{#handleMissingFile#(#"Could not read filters from file "#+#filtersFile#+#" as it doesn't exist."#)#;#}#if#(#filtersFile#.#isFile#(#)#)#{#log#(#"Reading filters from "#+#filtersFile#,#Project#.#MSG_VERBOSE#)#;#FileInputStream#in#=#null#;#try#{#Properties#props#=#new#Properties#(#)#;#in#=#new#FileInputStream#(#filtersFile#)#;#props#.#load#(#in#)#;#Enumeration#e#=#props#.#propertyNames#(#)#;#Vector#filts#=#getFilters#(#)#;#while#(#e#.#hasMoreElements#(#)#)#{#String#strPropName#=#(#String#)#e#.#nextElement#(#)#;#String#strValue#=#props#.#getProperty#(#strPropName#)#;#filts#.#addElement#(#new#Filter#(#strPropName#,#strValue#)#)#;#}#}#catch#(#Exception#ex#)#{#throw#new#BuildException#(#"Could not read filters from file: "#+#filtersFile#,#ex#)#;#}#finally#{#FileUtils#.#close#(#in#)#;#}#}#else#{#handleMissingFile#(#"Must specify a file rather than a directory in "#+#"the filtersfile attribute:"#+#filtersFile#)#;#}#filterHash#=#null#;#}##String#replaceTokens#(#String#line#)#{#return#iReplaceTokens#(#line#)#;#}##void#addFilter#(#Filter#filter#)#{#if#(#isReference#(#)#)#{#throw#noChildrenAllowed#(#)#;#}#filters#.#addElement#(#filter#)#;#filterHash#=#null#;#}##FiltersFile#createFiltersfile#(#)#{#if#(#isReference#(#)#)#{#throw#noChildrenAllowed#(#)#;#}#return#new#FiltersFile#(#)#;#}##void#addFilter#(#String#token#,#String#value#)#{#if#(#isReference#(#)#)#{#throw#noChildrenAllowed#(#)#;#}#addFilter#(#new#Filter#(#token#,#value#)#)#;#}##void#addConfiguredFilterSet#(#FilterSet#filterSet#)#{#if#(#isReference#(#)#)#{#throw#noChildrenAllowed#(#)#;#}#for#(#Enumeration#e#=#filterSet#.#getFilters#(#)#.#elements#(#)#;#e#.#hasMoreElements#(#)#;#)#{#addFilter#(#(#Filter#)#e#.#nextElement#(#)#)#;#}#}##boolean#hasFilters#(#)#{#return#getFilters#(#)#.#size#(#)#>#0#;#}##Object#clone#(#)#throws#BuildException#{#if#(#isReference#(#)#)#{#return#(#(#FilterSet#)#getRef#(#)#)#.#clone#(#)#;#}#try#{#FilterSet#fs#=#(#FilterSet#)#super#.#clone#(#)#;#fs#.#filters#=#(#Vector#)#getFilters#(#)#.#clone#(#)#;#fs#.#setProject#(#getProject#(#)#)#;#return#fs#;#}#catch#(#CloneNotSupportedException#e#)#{#throw#new#BuildException#(#e#)#;#}#}##void#setOnMissingFiltersFile#(#OnMissing#onMissingFiltersFile#)#{#this#.#onMissingFiltersFile#=#onMissingFiltersFile#;#}##OnMissing#getOnMissingFiltersFile#(#)#{#return#onMissingFiltersFile#;#}##String#iReplaceTokens#(#String#line#)#{#String#beginToken#=#getBeginToken#(#)#;#String#endToken#=#getEndToken#(#)#;#int#index#=#line#.#indexOf#(#beginToken#)#;#if#(#index#>#-#1#)#{#Hashtable#tokens#=#getFilterHash#(#)#;#try#{#StringBuffer#b#=#new#StringBuffer#(#)#;#int#i#=#0#;#String#token#=#null#;#String#value#=#null#;#while#(#index#>#-#1#)#{#//can't have zero-length token#int#endIndex#=#line#.#indexOf#(#endToken#,#index#+#beginToken#.#length#(#)#+#1#)#;#if#(#endIndex#==#-#1#)#{#break#;#}#token#=#line#.#substring#(#index#+#beginToken#.#length#(#)#,#endIndex#)#;#b#.#append#(#line#.#substring#(#i#,#index#)#)#;#if#(#tokens#.#containsKey#(#token#)#)#{#value#=#(#String#)#tokens#.#get#(#token#)#;#if#(#recurse#&&#!#value#.#equals#(#token#)#)#{#// we have another token, let's parse it.#value#=#replaceTokens#(#value#,#token#)#;#}#log#(#"Replacing: "#+#beginToken#+#token#+#endToken#+#" -> "#+#value#,#Project#.#MSG_VERBOSE#)#;#b#.#append#(#value#)#;#i#=#index#+#beginToken#.#length#(#)#+#token#.#length#(#)#+#endToken#.#length#(#)#;#}#else#{#// just append first character of beginToken#// and search further#// we can't skip the complete beginToken since#// it may contain the start of another#// candidate begin token (Bugzilla 45094)#b#.#append#(#beginToken#.#charAt#(#0#)#)#;#i#=#index#+#1#;#}#index#=#line#.#indexOf#(#beginToken#,#i#)#;#}#b#.#append#(#line#.#substring#(#i#)#)#;#return#b#.#toString#(#)#;#}#catch#(#StringIndexOutOfBoundsException#e#)#{#return#line#;#}#}#else#{#return#line#;#}#}##String#replaceTokens#(#String#line#,#String#parent#)#throws#BuildException#{#String#beginToken#=#getBeginToken#(#)#;#String#endToken#=#getEndToken#(#)#;#if#(#recurseDepth#==#0#)#{#passedTokens#=#new#Vector#(#)#;#}#recurseDepth#++#;#if#(#passedTokens#.#contains#(#parent#)#&&#!#duplicateToken#)#{#duplicateToken#=#true#;#System#.#out#.#println#(#"Infinite loop in tokens. Currently known tokens : "#+#passedTokens#.#toString#(#)#+#"\nProblem token : "#+#beginToken#+#parent#+#endToken#+#" called from "#+#beginToken#+#passedTokens#.#lastElement#(#)#.#toString#(#)#+#endToken#)#;#recurseDepth#--#;#return#parent#;#}#passedTokens#.#addElement#(#parent#)#;#String#value#=#iReplaceTokens#(#line#)#;#if#(#value#.#indexOf#(#beginToken#)#==#-#1#&&#!#duplicateToken#&&#recurseDepth#==#1#)#{#passedTokens#=#null#;#}#else#if#(#duplicateToken#)#{#// should always be the case...#if#(#passedTokens#.#size#(#)#>#0#)#{#value#=#(#String#)#passedTokens#.#remove#(#passedTokens#.#size#(#)#-#1#)#;#if#(#passedTokens#.#size#(#)#==#0#)#{#value#=#beginToken#+#value#+#endToken#;#duplicateToken#=#false#;#}#}#}#else#if#(#passedTokens#.#size#(#)#>#0#)#{#// remove last seen token when crawling out of recursion #passedTokens#.#remove#(#passedTokens#.#size#(#)#-#1#)#;#}#recurseDepth#--#;#return#value#;#}##void#handleMissingFile#(#String#message#)#{#switch#(#onMissingFiltersFile#.#getIndex#(#)#)#{#case#OnMissing#.#IGNORE_INDEX#:#return#;#case#OnMissing#.#FAIL_INDEX#:#throw#new#BuildException#(#message#)#;#case#OnMissing#.#WARN_INDEX#:#log#(#message#,#Project#.#MSG_WARN#)#;#return#;#default#:#throw#new#BuildException#(#"Invalid value for onMissingFiltersFile"#)#;#}#}##