void#setUp#(#)#{#configureProject#(#"src/etc/testcases/types/filterset.xml"#)#;#}##void#tearDown#(#)#{#executeTarget#(#"cleanup"#)#;#}##void#test1#(#)#{#executeTarget#(#"test1"#)#;#assertTrue#(#"Filterset 1 failed"#,#compareFiles#(#"src/etc/testcases/types/gold/filterset1.txt"#,#"src/etc/testcases/types/dest1.txt"#)#)#;#}##void#test2#(#)#{#executeTarget#(#"test2"#)#;#assertTrue#(#"Filterset 2 failed"#,#compareFiles#(#"src/etc/testcases/types/gold/filterset2.txt"#,#"src/etc/testcases/types/dest2.txt"#)#)#;#}##void#test3#(#)#{#executeTarget#(#"test3"#)#;#assertTrue#(#"Filterset 3 failed"#,#compareFiles#(#"src/etc/testcases/types/gold/filterset3.txt"#,#"src/etc/testcases/types/dest3.txt"#)#)#;#}##void#testRecursive#(#)#{#String#result#=#"it works line"#;#String#line#=#"@test@ line"#;#FilterSet#fs#=#new#FilterSet#(#)#;#fs#.#addFilter#(#"test"#,#"@test1@"#)#;#fs#.#addFilter#(#"test1"#,#"@test2@"#)#;#fs#.#addFilter#(#"test2"#,#"it works"#)#;#fs#.#setBeginToken#(#"@"#)#;#fs#.#setEndToken#(#"@"#)#;#assertEquals#(#result#,#fs#.#replaceTokens#(#line#)#)#;#}##void#testInfinite#(#)#{#String#result#=#"@test@ line testvalue"#;#String#line#=#"@test@ line @test3@"#;#FilterSet#fs#=#new#FilterSet#(#)#;#fs#.#addFilter#(#"test"#,#"@test1@"#)#;#fs#.#addFilter#(#"test1"#,#"@test2@"#)#;#fs#.#addFilter#(#"test2"#,#"@test@"#)#;#fs#.#addFilter#(#"test3"#,#"testvalue"#)#;#fs#.#setBeginToken#(#"@"#)#;#fs#.#setEndToken#(#"@"#)#;#assertEquals#(#result#,#fs#.#replaceTokens#(#line#)#)#;#}##void#testRecursionDisabled#(#)#{#String#result#=#"@test1@ line testvalue"#;#String#line#=#"@test@ line @test2@"#;#FilterSet#fs#=#new#FilterSet#(#)#;#fs#.#addFilter#(#"test"#,#"@test1@"#)#;#fs#.#addFilter#(#"test1"#,#"@test@"#)#;#fs#.#addFilter#(#"test2"#,#"testvalue"#)#;#fs#.#setBeginToken#(#"@"#)#;#fs#.#setEndToken#(#"@"#)#;#fs#.#setRecurse#(#false#)#;#assertEquals#(#result#,#fs#.#replaceTokens#(#line#)#)#;#}##void#testNonInfiniteRecursiveMultipleOnSingleLine#(#)#{#FilterSet#filters#=#new#FilterSet#(#)#;#filters#.#setBeginToken#(#"<"#)#;#filters#.#setEndToken#(#">"#)#;#filters#.#addFilter#(#"ul"#,#"<itemizedlist>"#)#;#filters#.#addFilter#(#"/ul"#,#"</itemizedList>"#)#;#filters#.#addFilter#(#"li"#,#"<listitem>"#)#;#filters#.#addFilter#(#"/li"#,#"</listitem>"#)#;#String#result#=#"<itemizedlist><listitem>Item 1</listitem> <listitem>Item 2</listitem></itemizedList>"#;#String#line#=#"<ul><li>Item 1</li> <li>Item 2</li></ul>"#;#assertEquals#(#result#,#filters#.#replaceTokens#(#line#)#)#;#}##void#testNestedFilterSets#(#)#{#executeTarget#(#"test-nested-filtersets"#)#;#FilterSet#fs#=#(#FilterSet#)#getProject#(#)#.#getReference#(#"1"#)#;#Hashtable#filters#=#fs#.#getFilterHash#(#)#;#assertEquals#(#1#,#filters#.#size#(#)#)#;#assertEquals#(#"value1"#,#filters#.#get#(#"token1"#)#)#;#fs#=#(#FilterSet#)#getProject#(#)#.#getReference#(#"2"#)#;#filters#=#fs#.#getFilterHash#(#)#;#assertEquals#(#2#,#filters#.#size#(#)#)#;#assertEquals#(#"1111"#,#filters#.#get#(#"aaaa"#)#)#;#assertEquals#(#"2222"#,#filters#.#get#(#"bbbb"#)#)#;#fs#=#(#FilterSet#)#getProject#(#)#.#getReference#(#"3"#)#;#filters#=#fs#.#getFilterHash#(#)#;#assertEquals#(#1#,#filters#.#size#(#)#)#;#assertEquals#(#"value4"#,#filters#.#get#(#"token4"#)#)#;#fs#=#(#FilterSet#)#getProject#(#)#.#getReference#(#"5"#)#;#filters#=#fs#.#getFilterHash#(#)#;#assertEquals#(#1#,#filters#.#size#(#)#)#;#assertEquals#(#"value1"#,#filters#.#get#(#"token1"#)#)#;#}##void#testFiltersFileElement#(#)#{#executeTarget#(#"testFiltersFileElement"#)#;#}##void#testFiltersFileAttribute#(#)#{#executeTarget#(#"testFiltersFileAttribute"#)#;#}##void#testMultipleFiltersFiles#(#)#{#executeTarget#(#"testMultipleFiltersFiles"#)#;#}##void#testMissingFiltersFile#(#)#{#expectBuildException#(#"testMissingFiltersFile"#,#"should fail due to missing filtersfile"#)#;#}##void#testAllowMissingFiltersFile#(#)#{#executeTarget#(#"testAllowMissingFiltersFile"#)#;#}##boolean#compareFiles#(#String#name1#,#String#name2#)#{#File#file1#=#new#File#(#System#.#getProperty#(#"root"#)#,#name1#)#;#File#file2#=#new#File#(#System#.#getProperty#(#"root"#)#,#name2#)#;#try#{#if#(#!#file1#.#exists#(#)#||#!#file2#.#exists#(#)#)#{#System#.#out#.#println#(#"One or both files do not exist:"#+#name1#+#", "#+#name2#)#;#return#false#;#}#if#(#file1#.#length#(#)#!=#file2#.#length#(#)#)#{#System#.#out#.#println#(#"File size mismatch:"#+#name1#+#"("#+#file1#.#length#(#)#+#"), "#+#name2#+#"("#+#file2#.#length#(#)#+#")"#)#;#return#false#;#}#// byte - byte compare#byte#[#]#buffer1#=#new#byte#[#BUF_SIZE#]#;#byte#[#]#buffer2#=#new#byte#[#BUF_SIZE#]#;#FileInputStream#fis1#=#new#FileInputStream#(#file1#)#;#FileInputStream#fis2#=#new#FileInputStream#(#file2#)#;#int#index#=#0#;#int#read#=#0#;#while#(#(#read#=#fis1#.#read#(#buffer1#)#)#!=#-#1#)#{#fis2#.#read#(#buffer2#)#;#for#(#int#i#=#0#;#i#<#read#;#++#i#,#++#index#)#{#if#(#buffer1#[#i#]#!=#buffer2#[#i#]#)#{#System#.#out#.#println#(#"Bytes mismatch:"#+#name1#+#", "#+#name2#+#" at byte "#+#index#)#;#return#false#;#}#}#}#return#true#;#}#catch#(#IOException#e#)#{#System#.#out#.#println#(#"IOException comparing files: "#+#name1#+#", "#+#name2#)#;#return#false#;#}#}##