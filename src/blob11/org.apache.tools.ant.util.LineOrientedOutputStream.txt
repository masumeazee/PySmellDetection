void#write#(#int#cc#)#throws#IOException#{#final#byte#c#=#(#byte#)#cc#;#if#(#(#c#==#LF#)#||#(#c#==#CR#)#)#{#if#(#!#skip#)#{#processBuffer#(#)#;#}#}#else#{#buffer#.#write#(#cc#)#;#}#skip#=#(#c#==#CR#)#;#}##void#flush#(#)#throws#IOException#{#if#(#buffer#.#size#(#)#>#0#)#{#processBuffer#(#)#;#}#}##void#processBuffer#(#)#throws#IOException#{#try#{#processLine#(#buffer#.#toString#(#)#)#;#}#finally#{#buffer#.#reset#(#)#;#}#}##void#processLine#(#String#line#)#throws#IOException#;##void#close#(#)#throws#IOException#{#if#(#buffer#.#size#(#)#>#0#)#{#processBuffer#(#)#;#}#super#.#close#(#)#;#}##void#write#(#byte#[#]#b#,#int#off#,#int#len#)#throws#IOException#{#// find the line breaks and pass other chars through in blocks#int#offset#=#off#;#int#blockStartOffset#=#offset#;#int#remaining#=#len#;#while#(#remaining#>#0#)#{#while#(#remaining#>#0#&&#b#[#offset#]#!=#LF#&&#b#[#offset#]#!=#CR#)#{#offset#++#;#remaining#--#;#}#// either end of buffer or a line separator char#int#blockLength#=#offset#-#blockStartOffset#;#if#(#blockLength#>#0#)#{#buffer#.#write#(#b#,#blockStartOffset#,#blockLength#)#;#}#while#(#remaining#>#0#&&#(#b#[#offset#]#==#LF#||#b#[#offset#]#==#CR#)#)#{#write#(#b#[#offset#]#)#;#offset#++#;#remaining#--#;#}#blockStartOffset#=#offset#;#}#}##