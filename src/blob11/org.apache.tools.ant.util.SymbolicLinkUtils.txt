SymbolicLinkUtils#getSymbolicLinkUtils#(#)#{#// keep the door open for Java X.Y specific subclass if symbolic#// links ever become supported in the classlib#return#PRIMARY_INSTANCE#;#}##boolean#isSymbolicLink#(#File#file#)#throws#IOException#{#return#isSymbolicLink#(#file#.#getParentFile#(#)#,#file#.#getName#(#)#)#;#}##boolean#isSymbolicLink#(#String#name#)#throws#IOException#{#return#isSymbolicLink#(#new#File#(#name#)#)#;#}##boolean#isSymbolicLink#(#File#parent#,#String#name#)#throws#IOException#{#File#toTest#=#new#File#(#parent#.#getCanonicalPath#(#)#,#name#)#;#return#!#toTest#.#getAbsolutePath#(#)#.#equals#(#toTest#.#getCanonicalPath#(#)#)#;#}##boolean#isDanglingSymbolicLink#(#String#name#)#throws#IOException#{#return#isDanglingSymbolicLink#(#new#File#(#name#)#)#;#}##boolean#isDanglingSymbolicLink#(#File#file#)#throws#IOException#{#return#isDanglingSymbolicLink#(#file#.#getParentFile#(#)#,#file#.#getName#(#)#)#;#}##boolean#isDanglingSymbolicLink#(#File#parent#,#String#name#)#throws#IOException#{#File#f#=#new#File#(#parent#,#name#)#;#if#(#!#f#.#exists#(#)#)#{#final#String#localName#=#f#.#getName#(#)#;#String#[#]#c#=#parent#.#list#(#new#FilenameFilter#(#)#{#public#boolean#accept#(#File#d#,#String#n#)#{#return#localName#.#equals#(#n#)#;#}#}#)#;#return#c#!=#null#&&#c#.#length#>#0#;#}#return#false#;#}##boolean#accept#(#File#d#,#String#n#)#{#return#localName#.#equals#(#n#)#;#}##void#deleteSymbolicLink#(#File#link#,#Task#task#)#throws#IOException#{#if#(#isDanglingSymbolicLink#(#link#)#)#{#if#(#!#link#.#delete#(#)#)#{#throw#new#IOException#(#"failed to remove dangling symbolic link "#+#link#)#;#}#return#;#}#if#(#!#isSymbolicLink#(#link#)#)#{#// plain file, not a link#return#;#}#if#(#!#link#.#exists#(#)#)#{#throw#new#FileNotFoundException#(#"No such symbolic link: "#+#link#)#;#}#// find the resource of the existing link:#File#target#=#link#.#getCanonicalFile#(#)#;#// no reason to try the renaming algorithm if we aren't allowed to#// write to the target's parent directory.  Let's hope that#// File.canWrite works on all platforms.#if#(#task#==#null#||#target#.#getParentFile#(#)#.#canWrite#(#)#)#{#// rename the resource, thus breaking the link:#File#temp#=#FILE_UTILS#.#createTempFile#(#"symlink"#,#".tmp"#,#target#.#getParentFile#(#)#,#false#,#false#)#;#if#(#FILE_UTILS#.#isLeadingPath#(#target#,#link#)#)#{#// link points to a parent directory, renaming the parent#// will rename the file#link#=#new#File#(#temp#,#FILE_UTILS#.#removeLeadingPath#(#target#,#link#)#)#;#}#boolean#renamedTarget#=#false#;#try#{#try#{#FILE_UTILS#.#rename#(#target#,#temp#)#;#renamedTarget#=#true#;#}#catch#(#IOException#e#)#{#throw#new#IOException#(#"Couldn't rename resource when "#+#"attempting to delete '"#+#link#+#"'.  Reason: "#+#e#.#getMessage#(#)#)#;#}#// delete the (now) broken link:#if#(#!#link#.#delete#(#)#)#{#throw#new#IOException#(#"Couldn't delete symlink: "#+#link#+#" (was it a real file? is this "#+#"not a UNIX system?)"#)#;#}#}#finally#{#if#(#renamedTarget#)#{#// return the resource to its original name:#try#{#FILE_UTILS#.#rename#(#temp#,#target#)#;#}#catch#(#IOException#e#)#{#throw#new#IOException#(#"Couldn't return resource "#+#temp#+#" to its original name: "#+#target#.#getAbsolutePath#(#)#+#". Reason: "#+#e#.#getMessage#(#)#+#"\n THE RESOURCE'S NAME ON DISK"#+#" HAS BEEN CHANGED BY THIS"#+#" ERROR!\n"#)#;#}#}#}#}#else#{#Execute#.#runCommand#(#task#,#new#String#[#]#{#"rm"#,#link#.#getAbsolutePath#(#)#}#)#;#}#}##