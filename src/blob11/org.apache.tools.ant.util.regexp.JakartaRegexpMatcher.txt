void#setPattern#(#String#pattern#)#{#this#.#pattern#=#pattern#;#}##String#getPattern#(#)#{#return#pattern#;#}##RE#getCompiledPattern#(#int#options#)#throws#BuildException#{#int#cOptions#=#getCompilerOptions#(#options#)#;#try#{#RE#reg#=#new#RE#(#pattern#)#;#reg#.#setMatchFlags#(#cOptions#)#;#return#reg#;#}#catch#(#RESyntaxException#e#)#{#throw#new#BuildException#(#e#)#;#}#}##boolean#matches#(#String#argument#)#throws#BuildException#{#return#matches#(#argument#,#MATCH_DEFAULT#)#;#}##boolean#matches#(#String#input#,#int#options#)#throws#BuildException#{#return#matches#(#input#,#getCompiledPattern#(#options#)#)#;#}##boolean#matches#(#String#input#,#RE#reg#)#{#return#reg#.#match#(#input#)#;#}##Vector#getGroups#(#String#argument#)#throws#BuildException#{#return#getGroups#(#argument#,#MATCH_DEFAULT#)#;#}##Vector#getGroups#(#String#input#,#int#options#)#throws#BuildException#{#RE#reg#=#getCompiledPattern#(#options#)#;#if#(#!#matches#(#input#,#reg#)#)#{#return#null#;#}#Vector#v#=#new#Vector#(#)#;#int#cnt#=#reg#.#getParenCount#(#)#;#for#(#int#i#=#0#;#i#<#cnt#;#i#++#)#{#String#match#=#reg#.#getParen#(#i#)#;#// treat non-matching groups as empty matches#if#(#match#==#null#)#{#match#=#""#;#}#v#.#addElement#(#match#)#;#}#return#v#;#}##int#getCompilerOptions#(#int#options#)#{#int#cOptions#=#RE#.#MATCH_NORMAL#;#if#(#RegexpUtil#.#hasFlag#(#options#,#MATCH_CASE_INSENSITIVE#)#)#{#cOptions#|=#RE#.#MATCH_CASEINDEPENDENT#;#}#if#(#RegexpUtil#.#hasFlag#(#options#,#MATCH_MULTILINE#)#)#{#cOptions#|=#RE#.#MATCH_MULTILINE#;#}#if#(#RegexpUtil#.#hasFlag#(#options#,#MATCH_SINGLELINE#)#)#{#cOptions#|=#RE#.#MATCH_SINGLELINE#;#}#return#cOptions#;#}##