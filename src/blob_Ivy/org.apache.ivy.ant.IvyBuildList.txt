void#addFileset#(#FileSet#buildFiles#)#{#buildFileSets#.#add#(#buildFiles#)#;#}##String#getReference#(#)#{#return#reference#;#}##void#setReference#(#String#reference#)#{#this#.#reference#=#reference#;#}##String#getRoot#(#)#{#return#root#;#}##void#setRoot#(#String#root#)#{#this#.#root#=#root#;#}##boolean#isExcludeRoot#(#)#{#return#excludeRoot#;#}##void#setExcludeRoot#(#boolean#root#)#{#excludeRoot#=#root#;#}##String#getLeaf#(#)#{#return#leaf#;#}##void#setLeaf#(#String#leaf#)#{#this#.#leaf#=#leaf#;#}##boolean#isExcludeLeaf#(#)#{#return#excludeLeaf#;#}##void#setExcludeLeaf#(#boolean#excludeLeaf#)#{#this#.#excludeLeaf#=#excludeLeaf#;#}##String#getDelimiter#(#)#{#return#delimiter#;#}##void#setDelimiter#(#String#delimiter#)#{#this#.#delimiter#=#delimiter#;#}##boolean#getOnlydirectdep#(#)#{#return#onlydirectdep#;#}##void#setOnlydirectdep#(#boolean#onlydirectdep#)#{#this#.#onlydirectdep#=#onlydirectdep#;#}##void#doExecute#(#)#throws#BuildException#{#if#(#reference#==#null#)#{#throw#new#BuildException#(#"reference should be provided in ivy build list"#)#;#}#if#(#buildFileSets#.#isEmpty#(#)#)#{#throw#new#BuildException#(#"at least one nested fileset should be provided in ivy build list"#)#;#}#Ivy#ivy#=#getIvyInstance#(#)#;#IvySettings#settings#=#ivy#.#getSettings#(#)#;#ivyFilePath#=#getProperty#(#ivyFilePath#,#settings#,#"ivy.buildlist.ivyfilepath"#)#;#Path#path#=#new#Path#(#getProject#(#)#)#;#Map#buildFiles#=#new#HashMap#(#)#;#// Map (ModuleDescriptor -> File buildFile)#List#independent#=#new#ArrayList#(#)#;#List#noDescriptor#=#new#ArrayList#(#)#;#Collection#mds#=#new#ArrayList#(#)#;#Set#rootModuleNames#=#new#LinkedHashSet#(#)#;#if#(#!#"*"#.#equals#(#root#)#)#{#StringTokenizer#st#=#new#StringTokenizer#(#root#,#delimiter#)#;#while#(#st#.#hasMoreTokens#(#)#)#{#rootModuleNames#.#add#(#st#.#nextToken#(#)#)#;#}#}#Set#leafModuleNames#=#new#LinkedHashSet#(#)#;#if#(#!#"*"#.#equals#(#leaf#)#)#{#StringTokenizer#st#=#new#StringTokenizer#(#leaf#,#delimiter#)#;#while#(#st#.#hasMoreTokens#(#)#)#{#leafModuleNames#.#add#(#st#.#nextToken#(#)#)#;#}#}#Set#restartFromModuleNames#=#new#LinkedHashSet#(#)#;#if#(#!#"*"#.#equals#(#restartFrom#)#)#{#StringTokenizer#st#=#new#StringTokenizer#(#restartFrom#,#delimiter#)#;#// Only accept one (first) module#restartFromModuleNames#.#add#(#st#.#nextToken#(#)#)#;#}#for#(#ListIterator#iter#=#buildFileSets#.#listIterator#(#)#;#iter#.#hasNext#(#)#;#)#{#FileSet#fs#=#(#FileSet#)#iter#.#next#(#)#;#DirectoryScanner#ds#=#fs#.#getDirectoryScanner#(#getProject#(#)#)#;#String#[#]#builds#=#ds#.#getIncludedFiles#(#)#;#for#(#int#i#=#0#;#i#<#builds#.#length#;#i#++#)#{#File#buildFile#=#new#File#(#ds#.#getBasedir#(#)#,#builds#[#i#]#)#;#File#ivyFile#=#getIvyFileFor#(#buildFile#)#;#if#(#!#ivyFile#.#exists#(#)#)#{#onMissingDescriptor#(#buildFile#,#ivyFile#,#noDescriptor#)#;#}#else#{#try#{#ModuleDescriptor#md#=#ModuleDescriptorParserRegistry#.#getInstance#(#)#.#parseDescriptor#(#settings#,#ivyFile#.#toURI#(#)#.#toURL#(#)#,#doValidate#(#settings#)#)#;#buildFiles#.#put#(#md#,#buildFile#)#;#mds#.#add#(#md#)#;#Message#.#debug#(#"Add "#+#md#.#getModuleRevisionId#(#)#.#getModuleId#(#)#)#;#}#catch#(#Exception#ex#)#{#if#(#haltOnError#)#{#throw#new#BuildException#(#"impossible to parse ivy file for "#+#buildFile#+#": ivyfile="#+#ivyFile#+#" exception="#+#ex#,#ex#)#;#}#else#{#Message#.#warn#(#"impossible to parse ivy file for "#+#buildFile#+#": ivyfile="#+#ivyFile#+#" exception="#+#ex#.#getMessage#(#)#)#;#Message#.#info#(#"\t=> adding it at the beginning of the path"#)#;#independent#.#add#(#buildFile#)#;#}#}#}#}#}#List#leafModuleDescriptors#=#convertModuleNamesToModuleDescriptors#(#mds#,#leafModuleNames#,#"leaf"#)#;#List#rootModuleDescriptors#=#convertModuleNamesToModuleDescriptors#(#mds#,#rootModuleNames#,#"root"#)#;#List#restartFromModuleDescriptors#=#convertModuleNamesToModuleDescriptors#(#mds#,#restartFromModuleNames#,#"restartFrom"#)#;#if#(#!#rootModuleDescriptors#.#isEmpty#(#)#)#{#Message#.#info#(#"Filtering modules based on roots "#+#rootModuleNames#)#;#mds#=#filterModulesFromRoot#(#mds#,#rootModuleDescriptors#)#;#}#if#(#!#leafModuleDescriptors#.#isEmpty#(#)#)#{#Message#.#info#(#"Filtering modules based on leafs "#+#leafModuleNames#)#;#mds#=#filterModulesFromLeaf#(#mds#,#leafModuleDescriptors#)#;#}#List#sortedModules#=#ivy#.#sortModuleDescriptors#(#mds#,#SortOptions#.#DEFAULT#)#;#if#(#!#OnMissingDescriptor#.#TAIL#.#equals#(#onMissingDescriptor#)#)#{#for#(#ListIterator#iter#=#noDescriptor#.#listIterator#(#)#;#iter#.#hasNext#(#)#;#)#{#File#buildFile#=#(#File#)#iter#.#next#(#)#;#addBuildFile#(#path#,#buildFile#)#;#}#}#for#(#ListIterator#iter#=#independent#.#listIterator#(#)#;#iter#.#hasNext#(#)#;#)#{#File#buildFile#=#(#File#)#iter#.#next#(#)#;#addBuildFile#(#path#,#buildFile#)#;#}#if#(#isReverse#(#)#)#{#Collections#.#reverse#(#sortedModules#)#;#}#// Remove modules that are before the restartFrom point#// Independent modules (without valid ivy file) can not be addressed#// so they are not removed from build path.#if#(#!#restartFromModuleDescriptors#.#isEmpty#(#)#)#{#boolean#foundRestartFrom#=#false#;#List#keptModules#=#new#ArrayList#(#)#;#ModuleDescriptor#restartFromModuleDescriptor#=#(#ModuleDescriptor#)#restartFromModuleDescriptors#.#get#(#0#)#;#for#(#ListIterator#iter#=#sortedModules#.#listIterator#(#)#;#iter#.#hasNext#(#)#;#)#{#ModuleDescriptor#md#=#(#ModuleDescriptor#)#iter#.#next#(#)#;#if#(#md#.#equals#(#restartFromModuleDescriptor#)#)#{#foundRestartFrom#=#true#;#}#if#(#foundRestartFrom#)#{#keptModules#.#add#(#md#)#;#}#}#sortedModules#=#keptModules#;#}#StringBuffer#order#=#new#StringBuffer#(#)#;#for#(#ListIterator#iter#=#sortedModules#.#listIterator#(#)#;#iter#.#hasNext#(#)#;#)#{#ModuleDescriptor#md#=#(#ModuleDescriptor#)#iter#.#next#(#)#;#order#.#append#(#md#.#getModuleRevisionId#(#)#.#getModuleId#(#)#)#;#if#(#iter#.#hasNext#(#)#)#{#order#.#append#(#", "#)#;#}#File#buildFile#=#(#File#)#buildFiles#.#get#(#md#)#;#addBuildFile#(#path#,#buildFile#)#;#}#if#(#OnMissingDescriptor#.#TAIL#.#equals#(#onMissingDescriptor#)#)#{#for#(#ListIterator#iter#=#noDescriptor#.#listIterator#(#)#;#iter#.#hasNext#(#)#;#)#{#File#buildFile#=#(#File#)#iter#.#next#(#)#;#addBuildFile#(#path#,#buildFile#)#;#}#}#getProject#(#)#.#addReference#(#getReference#(#)#,#path#)#;#getProject#(#)#.#setProperty#(#"ivy.sorted.modules"#,#order#.#toString#(#)#)#;#}##void#onMissingDescriptor#(#File#buildFile#,#File#ivyFile#,#List#noDescriptor#)#{#if#(#OnMissingDescriptor#.#SKIP#.#equals#(#onMissingDescriptor#)#)#{#Message#.#debug#(#"skipping "#+#buildFile#+#": descriptor "#+#ivyFile#+#" doesn't exist"#)#;#}#else#if#(#OnMissingDescriptor#.#FAIL#.#equals#(#onMissingDescriptor#)#)#{#throw#new#BuildException#(#"a module has no module descriptor and onMissingDescriptor=fail. "#+#"Build file: "#+#buildFile#+#". Expected descriptor: "#+#ivyFile#)#;#}#else#{#if#(#OnMissingDescriptor#.#WARN#.#equals#(#onMissingDescriptor#)#)#{#Message#.#warn#(#"a module has no module descriptor. "#+#"Build file: "#+#buildFile#+#". Expected descriptor: "#+#ivyFile#)#;#}#Message#.#verbose#(#"no descriptor for "#+#buildFile#+#": descriptor="#+#ivyFile#+#": adding it at the "#+#(#OnMissingDescriptor#.#TAIL#.#equals#(#onMissingDescriptor#)#?#"tail"#:#"head"#+#" of the path"#)#)#;#Message#.#verbose#(#"\t(change onMissingDescriptor if you want to take another action"#)#;#noDescriptor#.#add#(#buildFile#)#;#}#}##List#convertModuleNamesToModuleDescriptors#(#Collection#mds#,#Set#moduleNames#,#String#kind#)#{#List#result#=#new#ArrayList#(#)#;#Set#foundModuleNames#=#new#HashSet#(#)#;#for#(#Iterator#it#=#mds#.#iterator#(#)#;#it#.#hasNext#(#)#;#)#{#ModuleDescriptor#md#=#(#ModuleDescriptor#)#it#.#next#(#)#;#String#name#=#md#.#getModuleRevisionId#(#)#.#getModuleId#(#)#.#getName#(#)#;#if#(#moduleNames#.#contains#(#name#)#)#{#foundModuleNames#.#add#(#name#)#;#result#.#add#(#md#)#;#}#}#if#(#foundModuleNames#.#size#(#)#<#moduleNames#.#size#(#)#)#{#Set#missingModules#=#new#HashSet#(#moduleNames#)#;#missingModules#.#removeAll#(#foundModuleNames#)#;#StringBuffer#missingNames#=#new#StringBuffer#(#)#;#String#sep#=#""#;#for#(#Iterator#it#=#missingModules#.#iterator#(#)#;#it#.#hasNext#(#)#;#)#{#missingNames#.#append#(#sep#)#;#missingNames#.#append#(#it#.#next#(#)#)#;#sep#=#", "#;#}#throw#new#BuildException#(#"unable to find "#+#kind#+#" module(s) "#+#missingNames#.#toString#(#)#+#" in build fileset"#)#;#}#return#result#;#}##Collection#filterModulesFromRoot#(#Collection#mds#,#List#rootmds#)#{#// Make a map of ModuleId objects -> ModuleDescriptors#Map#moduleIdMap#=#new#HashMap#(#)#;#for#(#Iterator#iter#=#mds#.#iterator#(#)#;#iter#.#hasNext#(#)#;#)#{#ModuleDescriptor#md#=#(#(#ModuleDescriptor#)#iter#.#next#(#)#)#;#moduleIdMap#.#put#(#md#.#getModuleRevisionId#(#)#.#getModuleId#(#)#,#md#)#;#}#// recursively process the nodes#Set#toKeep#=#new#LinkedHashSet#(#)#;#Iterator#it#=#rootmds#.#iterator#(#)#;#while#(#it#.#hasNext#(#)#)#{#ModuleDescriptor#rootmd#=#(#ModuleDescriptor#)#it#.#next#(#)#;#processFilterNodeFromRoot#(#rootmd#,#toKeep#,#moduleIdMap#)#;#// With the excluderoot attribute set to true, take the rootmd out of the toKeep set.#if#(#excludeRoot#)#{#// Only for logging purposes#Message#.#verbose#(#"Excluded module "#+#rootmd#.#getModuleRevisionId#(#)#.#getModuleId#(#)#.#getName#(#)#)#;#}#else#{#toKeep#.#add#(#rootmd#)#;#}#}#// just for logging#for#(#Iterator#iter#=#toKeep#.#iterator#(#)#;#iter#.#hasNext#(#)#;#)#{#ModuleDescriptor#md#=#(#(#ModuleDescriptor#)#iter#.#next#(#)#)#;#Message#.#verbose#(#"Kept module "#+#md#.#getModuleRevisionId#(#)#.#getModuleId#(#)#.#getName#(#)#)#;#}#return#toKeep#;#}##void#processFilterNodeFromRoot#(#ModuleDescriptor#node#,#Set#toKeep#,#Map#moduleIdMap#)#{#//toKeep.add(node);#DependencyDescriptor#[#]#deps#=#node#.#getDependencies#(#)#;#for#(#int#i#=#0#;#i#<#deps#.#length#;#i#++#)#{#ModuleId#id#=#deps#[#i#]#.#getDependencyId#(#)#;#ModuleDescriptor#md#=#(#ModuleDescriptor#)#moduleIdMap#.#get#(#id#)#;#// we test if this module id has a module descriptor, and if it isn't already in the #// toKeep Set, in which there's probably a circular dependency#if#(#md#!=#null#&&#!#toKeep#.#contains#(#md#)#)#{#toKeep#.#add#(#md#)#;#if#(#!#getOnlydirectdep#(#)#)#{#processFilterNodeFromRoot#(#md#,#toKeep#,#moduleIdMap#)#;#}#}#}#}##Collection#filterModulesFromLeaf#(#Collection#mds#,#List#leafmds#)#{#// Make a map of ModuleId objects -> ModuleDescriptors#Map#moduleIdMap#=#new#HashMap#(#)#;#for#(#Iterator#iter#=#mds#.#iterator#(#)#;#iter#.#hasNext#(#)#;#)#{#ModuleDescriptor#md#=#(#(#ModuleDescriptor#)#iter#.#next#(#)#)#;#moduleIdMap#.#put#(#md#.#getModuleRevisionId#(#)#.#getModuleId#(#)#,#md#)#;#}#// recursively process the nodes#Set#toKeep#=#new#LinkedHashSet#(#)#;#Iterator#it#=#leafmds#.#iterator#(#)#;#while#(#it#.#hasNext#(#)#)#{#ModuleDescriptor#leafmd#=#(#ModuleDescriptor#)#it#.#next#(#)#;#// With the excludeleaf attribute set to true, take the rootmd out of the toKeep set.#if#(#excludeLeaf#)#{#Message#.#verbose#(#"Excluded module "#+#leafmd#.#getModuleRevisionId#(#)#.#getModuleId#(#)#.#getName#(#)#)#;#}#else#{#toKeep#.#add#(#leafmd#)#;#}#processFilterNodeFromLeaf#(#leafmd#,#toKeep#,#moduleIdMap#)#;#}#// just for logging#for#(#Iterator#iter#=#toKeep#.#iterator#(#)#;#iter#.#hasNext#(#)#;#)#{#ModuleDescriptor#md#=#(#(#ModuleDescriptor#)#iter#.#next#(#)#)#;#Message#.#verbose#(#"Kept module "#+#md#.#getModuleRevisionId#(#)#.#getModuleId#(#)#.#getName#(#)#)#;#}#return#toKeep#;#}##void#processFilterNodeFromLeaf#(#ModuleDescriptor#node#,#Set#toKeep#,#Map#moduleIdMap#)#{#for#(#Iterator#iter#=#moduleIdMap#.#values#(#)#.#iterator#(#)#;#iter#.#hasNext#(#)#;#)#{#ModuleDescriptor#md#=#(#ModuleDescriptor#)#iter#.#next#(#)#;#DependencyDescriptor#[#]#deps#=#md#.#getDependencies#(#)#;#for#(#int#i#=#0#;#i#<#deps#.#length#;#i#++#)#{#ModuleId#id#=#deps#[#i#]#.#getDependencyId#(#)#;#if#(#node#.#getModuleRevisionId#(#)#.#getModuleId#(#)#.#equals#(#id#)#&&#!#toKeep#.#contains#(#md#)#)#{#toKeep#.#add#(#md#)#;#if#(#!#getOnlydirectdep#(#)#)#{#processFilterNodeFromLeaf#(#md#,#toKeep#,#moduleIdMap#)#;#}#}#}#}#}##void#addBuildFile#(#Path#path#,#File#buildFile#)#{#FileSet#fs#=#new#FileSet#(#)#;#fs#.#setFile#(#buildFile#)#;#path#.#addFileset#(#fs#)#;#}##File#getIvyFileFor#(#File#buildFile#)#{#return#new#File#(#buildFile#.#getParentFile#(#)#,#ivyFilePath#)#;#}##boolean#isHaltonerror#(#)#{#return#haltOnError#;#}##void#setHaltonerror#(#boolean#haltOnError#)#{#this#.#haltOnError#=#haltOnError#;#}##String#getIvyfilepath#(#)#{#return#ivyFilePath#;#}##void#setIvyfilepath#(#String#ivyFilePath#)#{#this#.#ivyFilePath#=#ivyFilePath#;#}##String#getOnMissingDescriptor#(#)#{#return#onMissingDescriptor#;#}##void#setOnMissingDescriptor#(#String#onMissingDescriptor#)#{#this#.#onMissingDescriptor#=#onMissingDescriptor#;#}##boolean#isSkipbuildwithoutivy#(#)#{#return#onMissingDescriptor#==#OnMissingDescriptor#.#SKIP#;#}##void#setSkipbuildwithoutivy#(#boolean#skipBuildFilesWithoutIvy#)#{#Message#.#deprecated#(#"skipbuildwithoutivy is deprecated, use onMissingDescriptor instead."#)#;#this#.#onMissingDescriptor#=#skipBuildFilesWithoutIvy#?#OnMissingDescriptor#.#SKIP#:#OnMissingDescriptor#.#FAIL#;#}##boolean#isReverse#(#)#{#return#reverse#;#}##void#setReverse#(#boolean#reverse#)#{#this#.#reverse#=#reverse#;#}##String#getRestartFrom#(#)#{#return#restartFrom#;#}##void#setRestartFrom#(#String#restartFrom#)#{#this#.#restartFrom#=#restartFrom#;#}##