boolean#isUseOrigin#(#)#{#return#useOrigin#;#}##void#setUseOrigin#(#boolean#useOrigin#)#{#this#.#useOrigin#=#useOrigin#;#}##String#getLog#(#)#{#return#log#;#}##void#setLog#(#String#log#)#{#this#.#log#=#log#;#}##void#prepareAndCheck#(#)#{#Ivy#ivy#=#getIvyInstance#(#)#;#IvySettings#settings#=#ivy#.#getSettings#(#)#;#boolean#orgAndModSetManually#=#(#organisation#!=#null#)#&&#(#module#!=#null#)#;#organisation#=#getProperty#(#organisation#,#settings#,#"ivy.organisation"#)#;#module#=#getProperty#(#module#,#settings#,#"ivy.module"#)#;#if#(#file#==#null#)#{#String#fileName#=#getProperty#(#settings#,#"ivy.resolved.file"#,#resolveId#)#;#if#(#fileName#!=#null#)#{#file#=#getProject#(#)#.#resolveFile#(#fileName#)#;#}#}#if#(#isInline#(#)#)#{#conf#=#conf#==#null#?#"*"#:#conf#;#if#(#organisation#==#null#)#{#throw#new#BuildException#(#"no organisation provided for ivy cache task in inline mode: "#+#"It can either be set explicitely via the attribute 'organisation' "#+#"or via 'ivy.organisation' property"#)#;#}#if#(#module#==#null#)#{#throw#new#BuildException#(#"no module name provided for ivy cache task in inline mode: "#+#"It can either be set explicitely via the attribute 'module' "#+#"or via 'ivy.module' property"#)#;#}#String#[#]#toResolve#=#getConfsToResolve#(#getOrganisation#(#)#,#getModule#(#)#+#"-caller"#,#conf#,#true#)#;#//When we make an inline resolution, we can not resolve private confs.#for#(#int#i#=#0#;#i#<#toResolve#.#length#;#i#++#)#{#if#(#"*"#.#equals#(#toResolve#[#i#]#)#)#{#toResolve#[#i#]#=#"*(public)"#;#}#}#if#(#toResolve#.#length#>#0#)#{#Message#.#verbose#(#"using inline mode to resolve "#+#getOrganisation#(#)#+#" "#+#getModule#(#)#+#" "#+#getRevision#(#)#+#" ("#+#StringUtils#.#join#(#toResolve#,#", "#)#+#")"#)#;#IvyResolve#resolve#=#createResolve#(#isHaltonfailure#(#)#,#isUseOrigin#(#)#)#;#resolve#.#setOrganisation#(#getOrganisation#(#)#)#;#resolve#.#setModule#(#getModule#(#)#)#;#resolve#.#setBranch#(#getBranch#(#)#)#;#resolve#.#setRevision#(#getRevision#(#)#)#;#resolve#.#setInline#(#true#)#;#resolve#.#setConf#(#conf#)#;#resolve#.#setResolveId#(#resolveId#)#;#resolve#.#setTransitive#(#isTransitive#(#)#)#;#resolve#.#execute#(#)#;#}#else#{#Message#.#verbose#(#"inline resolve already done for "#+#getOrganisation#(#)#+#" "#+#getModule#(#)#+#" "#+#getRevision#(#)#+#" ("#+#conf#+#")"#)#;#}#if#(#"*"#.#equals#(#conf#)#)#{#conf#=#StringUtils#.#join#(#getResolvedConfigurations#(#getOrganisation#(#)#,#getModule#(#)#+#"-caller"#,#true#)#,#", "#)#;#}#}#else#{#Message#.#debug#(#"using standard ensure resolved"#)#;#// if the organization and module has been manually specified, we'll reuse the resolved#// data from another build (there is no way to know which configurations were resolved#// there (TODO: maybe we can check which reports exist and extract the configurations#// from these report names?)#if#(#!#orgAndModSetManually#)#{#ensureResolved#(#settings#)#;#}#conf#=#getProperty#(#conf#,#settings#,#"ivy.resolved.configurations"#)#;#if#(#"*"#.#equals#(#conf#)#)#{#conf#=#getProperty#(#settings#,#"ivy.resolved.configurations"#)#;#if#(#conf#==#null#)#{#throw#new#BuildException#(#"bad conf provided for ivy cache task: "#+#"'*' can only be used with a prior call to <resolve/>"#)#;#}#}#}#organisation#=#getProperty#(#organisation#,#settings#,#"ivy.organisation"#)#;#module#=#getProperty#(#module#,#settings#,#"ivy.module"#)#;#if#(#organisation#==#null#)#{#throw#new#BuildException#(#"no organisation provided for ivy cache task: "#+#"It can either be set explicitely via the attribute 'organisation' "#+#"or via 'ivy.organisation' property or a prior call to <resolve/>"#)#;#}#if#(#module#==#null#)#{#throw#new#BuildException#(#"no module name provided for ivy cache task: "#+#"It can either be set explicitely via the attribute 'module' "#+#"or via 'ivy.module' property or a prior call to <resolve/>"#)#;#}#if#(#conf#==#null#)#{#throw#new#BuildException#(#"no conf provided for ivy cache task: "#+#"It can either be set explicitely via the attribute 'conf' or "#+#"via 'ivy.resolved.configurations' property or a prior call to <resolve/>"#)#;#}#artifactFilter#=#FilterHelper#.#getArtifactTypeFilter#(#type#)#;#}##void#ensureResolved#(#IvySettings#settings#)#{#String#requestedConfigs#=#getProperty#(#getConf#(#)#,#settings#,#"ivy.resolved.configurations"#)#;#String#[#]#confs#=#null#;#if#(#getResolveId#(#)#!=#null#)#{#confs#=#getConfsToResolve#(#getResolveId#(#)#,#requestedConfigs#)#;#}#else#{#confs#=#getConfsToResolve#(#getOrganisation#(#)#,#getModule#(#)#,#requestedConfigs#,#false#)#;#}#if#(#confs#.#length#>#0#)#{#IvyResolve#resolve#=#createResolve#(#isHaltonfailure#(#)#,#isUseOrigin#(#)#)#;#resolve#.#setFile#(#getFile#(#)#)#;#resolve#.#setTransitive#(#isTransitive#(#)#)#;#resolve#.#setConf#(#StringUtils#.#join#(#confs#,#", "#)#)#;#resolve#.#setResolveId#(#getResolveId#(#)#)#;#resolve#.#execute#(#)#;#}#}##String#[#]#getConfsToResolve#(#String#org#,#String#module#,#String#conf#,#boolean#strict#)#{#ModuleDescriptor#reference#=#(#ModuleDescriptor#)#getResolvedDescriptor#(#org#,#module#,#strict#)#;#String#[#]#rconfs#=#getResolvedConfigurations#(#org#,#module#,#strict#)#;#return#getConfsToResolve#(#reference#,#conf#,#rconfs#)#;#}##String#[#]#getConfsToResolve#(#String#resolveId#,#String#conf#)#{#ModuleDescriptor#reference#=#(#ModuleDescriptor#)#getResolvedDescriptor#(#resolveId#,#false#)#;#if#(#reference#==#null#)#{#// assume the module has been resolved outside this build, resolve the required#// configurations again#// TODO: find a way to discover which confs were resolved by that previous resolve#if#(#conf#==#null#)#{#return#new#String#[#]#{#"*"#}#;#}#else#{#return#splitConfs#(#conf#)#;#}#}#String#[#]#rconfs#=#(#String#[#]#)#getProject#(#)#.#getReference#(#"ivy.resolved.configurations.ref."#+#resolveId#)#;#return#getConfsToResolve#(#reference#,#conf#,#rconfs#)#;#}##String#[#]#getConfsToResolve#(#ModuleDescriptor#reference#,#String#conf#,#String#[#]#rconfs#)#{#Message#.#debug#(#"calculating configurations to resolve"#)#;#if#(#reference#==#null#)#{#Message#.#debug#(#"module not yet resolved, all confs still need to be resolved"#)#;#if#(#conf#==#null#)#{#return#new#String#[#]#{#"*"#}#;#}#else#{#return#splitConfs#(#conf#)#;#}#}#else#if#(#conf#!=#null#)#{#String#[#]#confs#;#if#(#"*"#.#equals#(#conf#)#)#{#confs#=#reference#.#getConfigurationsNames#(#)#;#}#else#{#confs#=#splitConfs#(#conf#)#;#}#HashSet#rconfsSet#=#new#HashSet#(#Arrays#.#asList#(#rconfs#)#)#;#// for each resolved configuration, check if the report still exists#ResolutionCacheManager#cache#=#getSettings#(#)#.#getResolutionCacheManager#(#)#;#for#(#Iterator#it#=#rconfsSet#.#iterator#(#)#;#it#.#hasNext#(#)#;#)#{#String#resolvedConf#=#(#String#)#it#.#next#(#)#;#String#resolveId#=#getResolveId#(#)#;#if#(#resolveId#==#null#)#{#resolveId#=#ResolveOptions#.#getDefaultResolveId#(#reference#)#;#}#File#report#=#cache#.#getConfigurationResolveReportInCache#(#resolveId#,#resolvedConf#)#;#if#(#!#report#.#exists#(#)#)#{#// the report doesn't exist any longer, we have to recreate it...#it#.#remove#(#)#;#}#}#HashSet#confsSet#=#new#HashSet#(#Arrays#.#asList#(#confs#)#)#;#Message#.#debug#(#"resolved configurations:   "#+#rconfsSet#)#;#Message#.#debug#(#"asked configurations:      "#+#confsSet#)#;#confsSet#.#removeAll#(#rconfsSet#)#;#Message#.#debug#(#"to resolve configurations: "#+#confsSet#)#;#return#(#String#[#]#)#confsSet#.#toArray#(#new#String#[#confsSet#.#size#(#)#]#)#;#}#else#{#Message#.#debug#(#"module already resolved, no configuration to resolve"#)#;#return#new#String#[#0#]#;#}#}##IvyResolve#createResolve#(#boolean#haltOnFailure#,#boolean#useOrigin#)#{#Message#.#verbose#(#"no resolved descriptor found: launching default resolve"#)#;#IvyResolve#resolve#=#new#IvyResolve#(#)#;#resolve#.#setTaskName#(#getTaskName#(#)#)#;#resolve#.#setProject#(#getProject#(#)#)#;#resolve#.#setHaltonfailure#(#haltOnFailure#)#;#resolve#.#setUseOrigin#(#useOrigin#)#;#resolve#.#setValidate#(#doValidate#(#getSettings#(#)#)#)#;#resolve#.#setKeep#(#isKeep#(#)#)#;#resolve#.#setRefresh#(#isRefresh#(#)#)#;#resolve#.#setLog#(#getLog#(#)#)#;#resolve#.#setSettingsRef#(#getSettingsRef#(#)#)#;#resolve#.#setResolveMode#(#getResolveMode#(#)#)#;#return#resolve#;#}##ModuleRevisionId#getResolvedMrid#(#)#{#return#new#ModuleRevisionId#(#getResolvedModuleId#(#)#,#getRevision#(#)#==#null#?#Ivy#.#getWorkingRevision#(#)#:#getRevision#(#)#)#;#}##ModuleId#getResolvedModuleId#(#)#{#return#isInline#(#)#?#new#ModuleId#(#getOrganisation#(#)#,#getModule#(#)#+#"-caller"#)#:#new#ModuleId#(#getOrganisation#(#)#,#getModule#(#)#)#;#}##ResolveReport#getResolvedReport#(#)#{#return#getResolvedReport#(#getOrganisation#(#)#,#isInline#(#)#?#getModule#(#)#+#"-caller"#:#getModule#(#)#,#resolveId#)#;#}##String#getType#(#)#{#return#type#;#}##void#setType#(#String#type#)#{#this#.#type#=#type#;#}##String#getConf#(#)#{#return#conf#;#}##void#setConf#(#String#conf#)#{#this#.#conf#=#conf#;#}##String#getModule#(#)#{#return#module#;#}##void#setModule#(#String#module#)#{#this#.#module#=#module#;#}##String#getOrganisation#(#)#{#return#organisation#;#}##void#setOrganisation#(#String#organisation#)#{#this#.#organisation#=#organisation#;#}##String#getBranch#(#)#{#return#branch#;#}##void#setBranch#(#String#branch#)#{#this#.#branch#=#branch#;#}##boolean#isHaltonfailure#(#)#{#return#haltOnFailure#;#}##void#setHaltonfailure#(#boolean#haltOnFailure#)#{#this#.#haltOnFailure#=#haltOnFailure#;#}##void#setCache#(#File#cache#)#{#cacheAttributeNotSupported#(#)#;#}##String#getRevision#(#)#{#return#revision#;#}##void#setRevision#(#String#rev#)#{#revision#=#rev#;#}##Filter#getArtifactFilter#(#)#{#return#artifactFilter#;#}##boolean#isTransitive#(#)#{#return#transitive#;#}##void#setTransitive#(#boolean#transitive#)#{#this#.#transitive#=#transitive#;#}##boolean#isInline#(#)#{#return#inline#;#}##void#setInline#(#boolean#inline#)#{#this#.#inline#=#inline#;#}##void#setResolveId#(#String#resolveId#)#{#this#.#resolveId#=#resolveId#;#}##String#getResolveId#(#)#{#return#resolveId#;#}##void#setFile#(#File#file#)#{#this#.#file#=#file#;#}##File#getFile#(#)#{#return#file#;#}##void#setKeep#(#boolean#keep#)#{#this#.#keep#=#Boolean#.#valueOf#(#keep#)#;#}##boolean#isKeep#(#)#{#return#this#.#keep#==#null#?#!#isInline#(#)#:#this#.#keep#.#booleanValue#(#)#;#}##void#setRefresh#(#boolean#refresh#)#{#this#.#refresh#=#refresh#;#}##boolean#isRefresh#(#)#{#return#refresh#;#}##String#getResolveMode#(#)#{#return#resolveMode#;#}##void#setResolveMode#(#String#resolveMode#)#{#this#.#resolveMode#=#resolveMode#;#}##