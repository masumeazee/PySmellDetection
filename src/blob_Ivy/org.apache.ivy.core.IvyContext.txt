IvyContext#getContext#(#)#{#Stack#cur#=#getCurrentStack#(#)#;#if#(#cur#.#isEmpty#(#)#)#{#cur#.#push#(#new#IvyContext#(#)#)#;#}#return#(#IvyContext#)#cur#.#peek#(#)#;#}##Stack#/*<IvyContext>*/#getCurrentStack#(#)#{#Stack#cur#=#(#Stack#)#current#.#get#(#)#;#if#(#cur#==#null#)#{#cur#=#new#Stack#(#)#;#current#.#set#(#cur#)#;#}#return#cur#;#}##IvyContext#pushNewContext#(#)#{#return#pushContext#(#new#IvyContext#(#)#)#;#}##IvyContext#pushNewCopyContext#(#)#{#return#pushContext#(#new#IvyContext#(#getContext#(#)#)#)#;#}##IvyContext#pushContext#(#IvyContext#context#)#{#getCurrentStack#(#)#.#push#(#context#)#;#return#context#;#}##IvyContext#popContext#(#)#{#return#(#IvyContext#)#getCurrentStack#(#)#.#pop#(#)#;#}##Object#peekInContextStack#(#String#key#)#{#Object#value#=#null#;#Stack#contextStack#=#getCurrentStack#(#)#;#for#(#int#i#=#contextStack#.#size#(#)#-#1#;#i#>=#0#&&#value#==#null#;#i#--#)#{#IvyContext#ctx#=#(#IvyContext#)#contextStack#.#get#(#i#)#;#value#=#ctx#.#peek#(#key#)#;#}#return#value#;#}##Ivy#getIvy#(#)#{#Ivy#ivy#=#peekIvy#(#)#;#return#ivy#==#null#?#getDefaultIvy#(#)#:#ivy#;#}##Ivy#peekIvy#(#)#{#Ivy#ivy#=#(#Ivy#)#this#.#ivy#.#get#(#)#;#return#ivy#;#}##Ivy#getDefaultIvy#(#)#{#if#(#defaultIvy#==#null#)#{#defaultIvy#=#Ivy#.#newInstance#(#)#;#try#{#defaultIvy#.#configureDefault#(#)#;#}#catch#(#Exception#e#)#{#//???#}#}#return#defaultIvy#;#}##void#setIvy#(#Ivy#ivy#)#{#this#.#ivy#=#new#WeakReference#(#ivy#)#;#operatingThread#=#Thread#.#currentThread#(#)#;#}##IvySettings#getSettings#(#)#{#return#getIvy#(#)#.#getSettings#(#)#;#}##CircularDependencyStrategy#getCircularDependencyStrategy#(#)#{#return#getSettings#(#)#.#getCircularDependencyStrategy#(#)#;#}##Object#get#(#String#key#)#{#WeakReference#ref#=#(#WeakReference#)#contextMap#.#get#(#key#)#;#return#ref#==#null#?#null#:#ref#.#get#(#)#;#}##void#set#(#String#key#,#Object#value#)#{#contextMap#.#put#(#key#,#new#WeakReference#(#value#)#)#;#}##Object#peek#(#String#key#)#{#synchronized#(#contextMap#)#{#Object#o#=#contextMap#.#get#(#key#)#;#if#(#o#==#null#)#{#return#null#;#}#if#(#o#instanceof#List#)#{#if#(#(#(#List#)#o#)#.#size#(#)#==#0#)#{#return#null#;#}#Object#ret#=#(#(#List#)#o#)#.#get#(#0#)#;#return#ret#;#}#else#{#throw#new#RuntimeException#(#"Cannot top from non List object "#+#o#)#;#}#}#}##Object#pop#(#String#key#)#{#synchronized#(#contextMap#)#{#Object#o#=#contextMap#.#get#(#key#)#;#if#(#o#==#null#)#{#return#null#;#}#if#(#o#instanceof#List#)#{#if#(#(#(#List#)#o#)#.#size#(#)#==#0#)#{#return#null#;#}#Object#ret#=#(#(#List#)#o#)#.#remove#(#0#)#;#return#ret#;#}#else#{#throw#new#RuntimeException#(#"Cannot pop from non List object "#+#o#)#;#}#}#}##boolean#pop#(#String#key#,#Object#expectedValue#)#{#synchronized#(#contextMap#)#{#Object#o#=#contextMap#.#get#(#key#)#;#if#(#o#==#null#)#{#return#false#;#}#if#(#o#instanceof#List#)#{#if#(#(#(#List#)#o#)#.#size#(#)#==#0#)#{#return#false#;#}#Object#top#=#(#(#List#)#o#)#.#get#(#0#)#;#if#(#!#top#.#equals#(#expectedValue#)#)#{#return#false#;#}#(#(#List#)#o#)#.#remove#(#0#)#;#return#true#;#}#else#{#throw#new#RuntimeException#(#"Cannot pop from non List object "#+#o#)#;#}#}#}##void#push#(#String#key#,#Object#value#)#{#synchronized#(#contextMap#)#{#if#(#!#contextMap#.#containsKey#(#key#)#)#{#contextMap#.#put#(#key#,#new#LinkedList#(#)#)#;#}#Object#o#=#contextMap#.#get#(#key#)#;#if#(#o#instanceof#List#)#{#(#(#List#)#o#)#.#add#(#0#,#value#)#;#}#else#{#throw#new#RuntimeException#(#"Cannot push to non List object "#+#o#)#;#}#}#}##Thread#getOperatingThread#(#)#{#return#operatingThread#;#}##MessageLogger#getMessageLogger#(#)#{#// calling getIvy() instead of peekIvy() is not possible here: it will initialize a default#// Ivy instance, with default settings, but settings themselves may log messages and lead to#// a call to this method. So we use the current Ivy instance if any, or the default Ivy#// instance, or the default MessageLogger.#Ivy#ivy#=#peekIvy#(#)#;#if#(#ivy#==#null#)#{#if#(#defaultIvy#==#null#)#{#return#Message#.#getDefaultLogger#(#)#;#}#else#{#return#defaultIvy#.#getLoggerEngine#(#)#;#}#}#else#{#return#ivy#.#getLoggerEngine#(#)#;#}#}##EventManager#getEventManager#(#)#{#return#getIvy#(#)#.#getEventManager#(#)#;#}##void#checkInterrupted#(#)#{#getIvy#(#)#.#checkInterrupted#(#)#;#}##void#setResolveData#(#ResolveData#data#)#{#this#.#resolveData#=#data#;#}##ResolveData#getResolveData#(#)#{#return#resolveData#;#}##void#setDependencyDescriptor#(#DependencyDescriptor#dd#)#{#this#.#dd#=#dd#;#}##DependencyDescriptor#getDependencyDescriptor#(#)#{#return#dd#;#}##