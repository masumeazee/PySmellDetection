DependencyDescriptor#transformInstance#(#DependencyDescriptor#dd#,#Namespace#ns#)#{#NamespaceTransformer#t#=#ns#.#getToSystemTransformer#(#)#;#if#(#t#.#isIdentity#(#)#)#{#return#dd#;#}#DefaultDependencyDescriptor#newdd#=#transformInstance#(#dd#,#t#,#false#)#;#newdd#.#namespace#=#ns#;#return#newdd#;#}##DefaultDependencyDescriptor#transformInstance#(#DependencyDescriptor#dd#,#NamespaceTransformer#t#,#boolean#fromSystem#)#{#ModuleRevisionId#transformParentId#=#t#.#transform#(#dd#.#getParentRevisionId#(#)#)#;#ModuleRevisionId#transformMrid#=#t#.#transform#(#dd#.#getDependencyRevisionId#(#)#)#;#ModuleRevisionId#transformDynamicMrid#=#t#.#transform#(#dd#.#getDynamicConstraintDependencyRevisionId#(#)#)#;#DefaultDependencyDescriptor#newdd#=#new#DefaultDependencyDescriptor#(#null#,#transformMrid#,#transformDynamicMrid#,#dd#.#isForce#(#)#,#dd#.#isChanging#(#)#,#dd#.#isTransitive#(#)#)#;#newdd#.#parentId#=#transformParentId#;#String#[#]#moduleConfs#=#dd#.#getModuleConfigurations#(#)#;#if#(#moduleConfs#.#length#==#1#&&#"*"#.#equals#(#moduleConfs#[#0#]#)#)#{#if#(#dd#instanceof#DefaultDependencyDescriptor#)#{#DefaultDependencyDescriptor#ddd#=#(#DefaultDependencyDescriptor#)#dd#;#newdd#.#confs#=#new#LinkedHashMap#(#ddd#.#confs#)#;#newdd#.#setExcludeRules#(#new#LinkedHashMap#(#ddd#.#getExcludeRules#(#)#)#)#;#newdd#.#setIncludeRules#(#new#LinkedHashMap#(#ddd#.#getIncludeRules#(#)#)#)#;#newdd#.#setDependencyArtifacts#(#new#LinkedHashMap#(#ddd#.#getDependencyArtifacts#(#)#)#)#;#}#else#{#throw#new#IllegalArgumentException#(#"dependency descriptor transformation does not support * module confs "#+#"with descriptors which aren't DefaultDependencyDescriptor"#)#;#}#}#else#{#for#(#int#i#=#0#;#i#<#moduleConfs#.#length#;#i#++#)#{#newdd#.#confs#.#put#(#moduleConfs#[#i#]#,#new#ArrayList#(#Arrays#.#asList#(#dd#.#getDependencyConfigurations#(#moduleConfs#[#i#]#)#)#)#)#;#newdd#.#getExcludeRules#(#)#.#put#(#moduleConfs#[#i#]#,#new#ArrayList#(#Arrays#.#asList#(#dd#.#getExcludeRules#(#moduleConfs#[#i#]#)#)#)#)#;#newdd#.#getIncludeRules#(#)#.#put#(#moduleConfs#[#i#]#,#new#ArrayList#(#Arrays#.#asList#(#dd#.#getIncludeRules#(#moduleConfs#[#i#]#)#)#)#)#;#newdd#.#getDependencyArtifacts#(#)#.#put#(#moduleConfs#[#i#]#,#new#ArrayList#(#Arrays#.#asList#(#dd#.#getDependencyArtifacts#(#moduleConfs#[#i#]#)#)#)#)#;#}#}#if#(#fromSystem#)#{#newdd#.#asSystem#=#dd#;#}#return#newdd#;#}##ModuleId#getDependencyId#(#)#{#return#getDependencyRevisionId#(#)#.#getModuleId#(#)#;#}##ModuleRevisionId#getDependencyRevisionId#(#)#{#return#revId#;#}##ModuleRevisionId#getDynamicConstraintDependencyRevisionId#(#)#{#return#dynamicRevId#;#}##String#[#]#getModuleConfigurations#(#)#{#return#(#String#[#]#)#confs#.#keySet#(#)#.#toArray#(#new#String#[#confs#.#keySet#(#)#.#size#(#)#]#)#;#}##String#[#]#getDependencyConfigurations#(#String#moduleConfiguration#)#{#return#getDependencyConfigurations#(#moduleConfiguration#,#moduleConfiguration#)#;#}##String#[#]#getDependencyConfigurations#(#String#moduleConfiguration#,#String#requestedConfiguration#)#{#if#(#md#!=#null#)#{#Configuration#c#=#md#.#getConfiguration#(#moduleConfiguration#)#;#if#(#c#instanceof#ConfigurationIntersection#)#{#ConfigurationIntersection#intersection#=#(#ConfigurationIntersection#)#c#;#Set#/*<String>*/#intersectedDepConfs#=#new#HashSet#(#)#;#String#[#]#intersected#=#intersection#.#getIntersectedConfigurationNames#(#)#;#for#(#int#i#=#0#;#i#<#intersected#.#length#;#i#++#)#{#Collection#depConfs#=#getDependencyConfigurationsIncludingExtending#(#intersected#[#i#]#,#requestedConfiguration#)#;#if#(#intersectedDepConfs#.#isEmpty#(#)#)#{#intersectedDepConfs#.#addAll#(#depConfs#)#;#}#else#{#if#(#intersectedDepConfs#.#contains#(#"*"#)#)#{#intersectedDepConfs#.#remove#(#"*"#)#;#intersectedDepConfs#.#addAll#(#depConfs#)#;#}#else#if#(#depConfs#.#contains#(#"*"#)#)#{#// nothing to do, intersection of 'something' #// with 'everything' is 'something'                            #}#else#{#Set#/*<String>*/#intersectedDepConfsCopy#=#intersectedDepConfs#;#intersectedDepConfs#=#new#HashSet#(#)#;#for#(#Iterator#it#=#intersectedDepConfsCopy#.#iterator#(#)#;#it#.#hasNext#(#)#;#)#{#String#intersectedDepConf#=#(#String#)#it#.#next#(#)#;#if#(#depConfs#.#contains#(#intersectedDepConf#)#)#{#// the conf is present in both sets, #// so it is in the intersection#intersectedDepConfs#.#add#(#intersectedDepConf#)#;#continue#;#}#/*
                                we do not handle special confs like *!sg or [cond]* in right hand 
                                confs yet: it would require supporting parenthesis grouping in 
                                configurations intersection interpretation 
                                 
                                for (Iterator it2 = depConfs.iterator(); it2.hasNext();) {
                                    String depConf = (String) it2.next();
                                    if (depConf.startsWith("*")) {
                                        if (intersectedDepConf
                                                .indexOf("(" + depConf + ")") != -1) {
                                            intersectedDepConfs.add(intersectedDepConf);
                                        } else {
                                            intersectedDepConfs.add(
                                                "(" + intersectedDepConf + ")+(" + depConf + ")");
                                        }
                                    } else if (intersectedDepConf.startsWith("*")) {
                                        if (depConf
                                            .indexOf("(" + intersectedDepConf + ")") != -1) {
                                            intersectedDepConfs.add(depConf);
                                        } else {
                                            intersectedDepConfs.add(
                                                depConf + "+" + intersectedDepConf);
                                        }
                                    }
                                }
                                */#}#}#}#}#List#confsList#=#(#List#)#confs#.#get#(#moduleConfiguration#)#;#if#(#confsList#!=#null#)#{#intersectedDepConfs#.#addAll#(#confsList#)#;#}#if#(#intersectedDepConfs#.#isEmpty#(#)#)#{#List#defConfs#=#(#List#)#confs#.#get#(#"*"#)#;#if#(#defConfs#!=#null#)#{#for#(#Iterator#it#=#defConfs#.#iterator#(#)#;#it#.#hasNext#(#)#;#)#{#String#mappedConf#=#(#String#)#it#.#next#(#)#;#if#(#mappedConf#!=#null#&&#mappedConf#.#startsWith#(#"@+"#)#)#{#return#new#String#[#]#{#moduleConfiguration#+#mappedConf#.#substring#(#1#)#}#;#}#else#if#(#mappedConf#!=#null#&&#mappedConf#.#equals#(#"@"#)#)#{#return#new#String#[#]#{#moduleConfiguration#}#;#}#}#}#}#return#(#String#[#]#)#intersectedDepConfs#.#toArray#(#new#String#[#intersectedDepConfs#.#size#(#)#]#)#;#}#else#if#(#c#instanceof#ConfigurationGroup#)#{#ConfigurationGroup#group#=#(#ConfigurationGroup#)#c#;#Set#/*<String>*/#groupDepConfs#=#new#HashSet#(#)#;#String#[#]#members#=#group#.#getMembersConfigurationNames#(#)#;#for#(#int#i#=#0#;#i#<#members#.#length#;#i#++#)#{#Collection#depConfs#=#getDependencyConfigurationsIncludingExtending#(#members#[#i#]#,#requestedConfiguration#)#;#groupDepConfs#.#addAll#(#depConfs#)#;#}#return#(#String#[#]#)#groupDepConfs#.#toArray#(#new#String#[#groupDepConfs#.#size#(#)#]#)#;#}#}#List#confsList#=#(#List#)#confs#.#get#(#moduleConfiguration#)#;#if#(#confsList#==#null#)#{#// there is no mapping defined for this configuration, add the 'other' mappings.#confsList#=#(#List#)#confs#.#get#(#"%"#)#;#}#List#defConfs#=#(#List#)#confs#.#get#(#"*"#)#;#Collection#ret#=#new#LinkedHashSet#(#)#;#if#(#confsList#!=#null#)#{#ret#.#addAll#(#confsList#)#;#}#if#(#defConfs#!=#null#)#{#ret#.#addAll#(#defConfs#)#;#}#Collection#replacedRet#=#new#LinkedHashSet#(#)#;#for#(#Iterator#iter#=#ret#.#iterator#(#)#;#iter#.#hasNext#(#)#;#)#{#String#c#=#(#String#)#iter#.#next#(#)#;#String#replacedConf#=#replaceSelfFallbackPattern#(#c#,#moduleConfiguration#)#;#if#(#replacedConf#==#null#)#{#replacedConf#=#replaceThisFallbackPattern#(#c#,#requestedConfiguration#)#;#}#if#(#replacedConf#!=#null#)#{#c#=#replacedConf#;#}#replacedRet#.#add#(#c#)#;#}#ret#=#replacedRet#;#if#(#ret#.#remove#(#"*"#)#)#{#StringBuffer#r#=#new#StringBuffer#(#"*"#)#;#// merge excluded configurations as one conf like *!A!B#for#(#Iterator#iter#=#ret#.#iterator#(#)#;#iter#.#hasNext#(#)#;#)#{#String#c#=#(#String#)#iter#.#next#(#)#;#if#(#c#.#startsWith#(#"!"#)#)#{#r#.#append#(#c#)#;#}#}#return#new#String#[#]#{#r#.#toString#(#)#}#;#}#return#(#String#[#]#)#ret#.#toArray#(#new#String#[#ret#.#size#(#)#]#)#;#}##Collection#getDependencyConfigurationsIncludingExtending#(#String#conf#,#String#requestedConfiguration#)#{#Set#/*<String>*/#allDepConfs#=#new#LinkedHashSet#(#)#;#allDepConfs#.#addAll#(#Arrays#.#asList#(#getDependencyConfigurations#(#conf#,#requestedConfiguration#)#)#)#;#Collection#extendingConfs#=#Configuration#.#findConfigurationExtending#(#conf#,#md#.#getConfigurations#(#)#)#;#for#(#Iterator#it#=#extendingConfs#.#iterator#(#)#;#it#.#hasNext#(#)#;#)#{#Configuration#extendingConf#=#(#Configuration#)#it#.#next#(#)#;#allDepConfs#.#addAll#(#Arrays#.#asList#(#getDependencyConfigurations#(#extendingConf#.#getName#(#)#,#requestedConfiguration#)#)#)#;#}#return#allDepConfs#;#}##String#replaceSelfFallbackPattern#(#final#String#conf#,#final#String#moduleConfiguration#)#{#return#replaceFallbackConfigurationPattern#(#SELF_FALLBACK_PATTERN#,#conf#,#moduleConfiguration#)#;#}##String#replaceThisFallbackPattern#(#final#String#conf#,#final#String#requestedConfiguration#)#{#return#replaceFallbackConfigurationPattern#(#THIS_FALLBACK_PATTERN#,#conf#,#requestedConfiguration#)#;#}##String#replaceFallbackConfigurationPattern#(#final#Pattern#pattern#,#final#String#conf#,#final#String#moduleConfiguration#)#{#Matcher#matcher#=#pattern#.#matcher#(#conf#)#;#if#(#matcher#.#matches#(#)#)#{#String#mappedConf#=#moduleConfiguration#;#if#(#matcher#.#group#(#1#)#!=#null#)#{#mappedConf#=#mappedConf#+#matcher#.#group#(#1#)#;#}#if#(#matcher#.#group#(#2#)#!=#null#)#{#mappedConf#=#mappedConf#+#matcher#.#group#(#2#)#;#}#return#mappedConf#;#}#return#null#;#}##String#[#]#getDependencyConfigurations#(#String#[#]#moduleConfigurations#)#{#Set#confs#=#new#LinkedHashSet#(#)#;#for#(#int#i#=#0#;#i#<#moduleConfigurations#.#length#;#i#++#)#{#confs#.#addAll#(#Arrays#.#asList#(#getDependencyConfigurations#(#moduleConfigurations#[#i#]#)#)#)#;#}#if#(#confs#.#contains#(#"*"#)#)#{#return#new#String#[#]#{#"*"#}#;#}#return#(#String#[#]#)#confs#.#toArray#(#new#String#[#confs#.#size#(#)#]#)#;#}##DependencyArtifactDescriptor#[#]#getDependencyArtifacts#(#String#moduleConfiguration#)#{#Collection#artifacts#=#getCollectionForConfiguration#(#moduleConfiguration#,#dependencyArtifacts#)#;#return#(#DependencyArtifactDescriptor#[#]#)#artifacts#.#toArray#(#new#DependencyArtifactDescriptor#[#artifacts#.#size#(#)#]#)#;#}##IncludeRule#[#]#getIncludeRules#(#String#moduleConfiguration#)#{#Collection#rules#=#getCollectionForConfiguration#(#moduleConfiguration#,#includeRules#)#;#return#(#IncludeRule#[#]#)#rules#.#toArray#(#new#IncludeRule#[#rules#.#size#(#)#]#)#;#}##ExcludeRule#[#]#getExcludeRules#(#String#moduleConfiguration#)#{#Collection#rules#=#getCollectionForConfiguration#(#moduleConfiguration#,#excludeRules#)#;#return#(#ExcludeRule#[#]#)#rules#.#toArray#(#new#ExcludeRule#[#rules#.#size#(#)#]#)#;#}##Set#getCollectionForConfiguration#(#String#moduleConfiguration#,#Map#collectionMap#)#{#if#(#collectionMap#==#null#||#collectionMap#.#isEmpty#(#)#)#{#return#Collections#.#EMPTY_SET#;#}#Collection#artifacts#=#(#Collection#)#collectionMap#.#get#(#moduleConfiguration#)#;#Collection#defArtifacts#=#(#Collection#)#collectionMap#.#get#(#"*"#)#;#Set#ret#=#new#LinkedHashSet#(#)#;#if#(#artifacts#!=#null#)#{#ret#.#addAll#(#artifacts#)#;#}#if#(#defArtifacts#!=#null#)#{#ret#.#addAll#(#defArtifacts#)#;#}#return#ret#;#}##DependencyArtifactDescriptor#[#]#getDependencyArtifacts#(#String#[#]#moduleConfigurations#)#{#Set#artifacts#=#new#LinkedHashSet#(#)#;#for#(#int#i#=#0#;#i#<#moduleConfigurations#.#length#;#i#++#)#{#artifacts#.#addAll#(#Arrays#.#asList#(#getDependencyArtifacts#(#moduleConfigurations#[#i#]#)#)#)#;#}#return#(#DependencyArtifactDescriptor#[#]#)#artifacts#.#toArray#(#new#DependencyArtifactDescriptor#[#artifacts#.#size#(#)#]#)#;#}##IncludeRule#[#]#getIncludeRules#(#String#[#]#moduleConfigurations#)#{#Set#rules#=#new#LinkedHashSet#(#)#;#for#(#int#i#=#0#;#i#<#moduleConfigurations#.#length#;#i#++#)#{#rules#.#addAll#(#Arrays#.#asList#(#getIncludeRules#(#moduleConfigurations#[#i#]#)#)#)#;#}#return#(#IncludeRule#[#]#)#rules#.#toArray#(#new#IncludeRule#[#rules#.#size#(#)#]#)#;#}##ExcludeRule#[#]#getExcludeRules#(#String#[#]#moduleConfigurations#)#{#Set#rules#=#new#LinkedHashSet#(#)#;#for#(#int#i#=#0#;#i#<#moduleConfigurations#.#length#;#i#++#)#{#rules#.#addAll#(#Arrays#.#asList#(#getExcludeRules#(#moduleConfigurations#[#i#]#)#)#)#;#}#return#(#ExcludeRule#[#]#)#rules#.#toArray#(#new#ExcludeRule#[#rules#.#size#(#)#]#)#;#}##DependencyArtifactDescriptor#[#]#getAllDependencyArtifacts#(#)#{#if#(#dependencyArtifacts#==#null#)#{#return#new#DependencyArtifactDescriptor#[#0#]#;#}#Set#ret#=#mergeAll#(#dependencyArtifacts#)#;#return#(#DependencyArtifactDescriptor#[#]#)#ret#.#toArray#(#new#DependencyArtifactDescriptor#[#ret#.#size#(#)#]#)#;#}##IncludeRule#[#]#getAllIncludeRules#(#)#{#if#(#includeRules#==#null#)#{#return#new#IncludeRule#[#0#]#;#}#Set#ret#=#mergeAll#(#includeRules#)#;#return#(#IncludeRule#[#]#)#ret#.#toArray#(#new#IncludeRule#[#ret#.#size#(#)#]#)#;#}##ExcludeRule#[#]#getAllExcludeRules#(#)#{#if#(#excludeRules#==#null#)#{#return#new#ExcludeRule#[#0#]#;#}#Set#ret#=#mergeAll#(#excludeRules#)#;#return#(#ExcludeRule#[#]#)#ret#.#toArray#(#new#ExcludeRule#[#ret#.#size#(#)#]#)#;#}##Set#mergeAll#(#Map#artifactsMap#)#{#Set#ret#=#new#LinkedHashSet#(#)#;#for#(#Iterator#it#=#artifactsMap#.#values#(#)#.#iterator#(#)#;#it#.#hasNext#(#)#;#)#{#Collection#artifacts#=#(#Collection#)#it#.#next#(#)#;#ret#.#addAll#(#artifacts#)#;#}#return#ret#;#}##void#addDependencyConfiguration#(#String#masterConf#,#String#depConf#)#{#if#(#(#md#!=#null#)#&&#!#"*"#.#equals#(#masterConf#)#&&#!#"%"#.#equals#(#masterConf#)#)#{#Configuration#config#;#if#(#masterConf#.#startsWith#(#"!"#)#)#{#config#=#md#.#getConfiguration#(#masterConf#.#substring#(#1#)#)#;#}#else#{#config#=#md#.#getConfiguration#(#masterConf#)#;#}#if#(#config#==#null#)#{#throw#new#IllegalArgumentException#(#"Cannot add dependency '"#+#revId#+#"' to configuration '"#+#masterConf#+#"' of module "#+#md#.#getModuleRevisionId#(#)#+#" because this configuration doesn't exist!"#)#;#}#if#(#config#instanceof#ConfigurationGroup#)#{#ConfigurationGroup#group#=#(#ConfigurationGroup#)#config#;#String#[#]#members#=#group#.#getMembersConfigurationNames#(#)#;#for#(#int#i#=#0#;#i#<#members#.#length#;#i#++#)#{#addDependencyConfiguration#(#members#[#i#]#,#depConf#)#;#}#return#;#}#}#List#confsList#=#(#List#)#confs#.#get#(#masterConf#)#;#if#(#confsList#==#null#)#{#confsList#=#new#ArrayList#(#)#;#confs#.#put#(#masterConf#,#confsList#)#;#}#if#(#!#confsList#.#contains#(#depConf#)#)#{#confsList#.#add#(#depConf#)#;#}#}##void#addDependencyArtifact#(#String#masterConf#,#DependencyArtifactDescriptor#dad#)#{#addObjectToConfiguration#(#masterConf#,#dad#,#getDependencyArtifacts#(#)#)#;#}##void#addIncludeRule#(#String#masterConf#,#IncludeRule#rule#)#{#addObjectToConfiguration#(#masterConf#,#rule#,#getIncludeRules#(#)#)#;#}##void#addExcludeRule#(#String#masterConf#,#ExcludeRule#rule#)#{#addObjectToConfiguration#(#masterConf#,#rule#,#getExcludeRules#(#)#)#;#}##void#addObjectToConfiguration#(#String#callerConf#,#Object#toAdd#,#Map#confsMap#)#{#Collection#col#=#(#Collection#)#confsMap#.#get#(#callerConf#)#;#if#(#col#==#null#)#{#col#=#new#ArrayList#(#)#;#confsMap#.#put#(#callerConf#,#col#)#;#}#col#.#add#(#toAdd#)#;#}##boolean#doesExclude#(#String#[#]#moduleConfigurations#,#ArtifactId#artifactId#)#{#if#(#namespace#!=#null#)#{#artifactId#=#NameSpaceHelper#.#transform#(#artifactId#,#namespace#.#getFromSystemTransformer#(#)#)#;#}#ExcludeRule#[#]#rules#=#getExcludeRules#(#moduleConfigurations#)#;#for#(#int#i#=#0#;#i#<#rules#.#length#;#i#++#)#{#if#(#MatcherHelper#.#matches#(#rules#[#i#]#.#getMatcher#(#)#,#rules#[#i#]#.#getId#(#)#,#artifactId#)#)#{#return#true#;#}#}#return#false#;#}##boolean#canExclude#(#)#{#return#excludeRules#!=#null#&&#!#excludeRules#.#isEmpty#(#)#;#}##String#toString#(#)#{#return#"dependency: "#+#revId#+#" "#+#confs#;#}##boolean#isForce#(#)#{#return#isForce#;#}##ModuleRevisionId#getParentRevisionId#(#)#{#return#md#!=#null#?#md#.#getResolvedModuleRevisionId#(#)#:#parentId#;#}##boolean#isChanging#(#)#{#return#isChanging#;#}##boolean#isTransitive#(#)#{#return#isTransitive#;#}##Namespace#getNamespace#(#)#{#return#namespace#;#}##String#getAttribute#(#String#attName#)#{#return#revId#.#getAttribute#(#attName#)#;#}##Map#getAttributes#(#)#{#return#revId#.#getAttributes#(#)#;#}##String#getExtraAttribute#(#String#attName#)#{#return#revId#.#getExtraAttribute#(#attName#)#;#}##Map#getExtraAttributes#(#)#{#return#revId#.#getExtraAttributes#(#)#;#}##Map#getQualifiedExtraAttributes#(#)#{#return#revId#.#getQualifiedExtraAttributes#(#)#;#}##DependencyDescriptor#asSystem#(#)#{#return#asSystem#;#}##void#setDependencyArtifacts#(#Map#dependencyArtifacts#)#{#this#.#dependencyArtifacts#=#dependencyArtifacts#;#}##Map#getDependencyArtifacts#(#)#{#if#(#dependencyArtifacts#==#null#)#{#dependencyArtifacts#=#new#LinkedHashMap#(#)#;#}#return#dependencyArtifacts#;#}##void#setIncludeRules#(#Map#includeRules#)#{#this#.#includeRules#=#includeRules#;#}##Map#getIncludeRules#(#)#{#if#(#includeRules#==#null#)#{#includeRules#=#new#LinkedHashMap#(#)#;#}#return#includeRules#;#}##void#setExcludeRules#(#Map#excludeRules#)#{#this#.#excludeRules#=#excludeRules#;#}##Map#getExcludeRules#(#)#{#if#(#excludeRules#==#null#)#{#excludeRules#=#new#LinkedHashMap#(#)#;#}#return#excludeRules#;#}##DependencyDescriptor#clone#(#ModuleRevisionId#revision#)#{#return#new#DefaultDependencyDescriptor#(#this#,#revision#)#;#}##