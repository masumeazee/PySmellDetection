boolean#match#(#MRIDRule#src#,#ModuleRevisionId#mrid#)#{#//CheckStyle:MagicNumber| OFF#matchers#[#0#]#=#Pattern#.#compile#(#getPattern#(#src#.#getOrg#(#)#)#)#.#matcher#(#mrid#.#getOrganisation#(#)#)#;#if#(#!#matchers#[#0#]#.#matches#(#)#)#{#return#false#;#}#matchers#[#1#]#=#Pattern#.#compile#(#getPattern#(#src#.#getModule#(#)#)#)#.#matcher#(#mrid#.#getName#(#)#)#;#if#(#!#matchers#[#1#]#.#matches#(#)#)#{#return#false#;#}#if#(#mrid#.#getBranch#(#)#==#null#)#{#matchers#[#2#]#=#null#;#}#else#{#matchers#[#2#]#=#Pattern#.#compile#(#getPattern#(#src#.#getBranch#(#)#)#)#.#matcher#(#mrid#.#getBranch#(#)#)#;#if#(#!#matchers#[#2#]#.#matches#(#)#)#{#return#false#;#}#}#matchers#[#3#]#=#Pattern#.#compile#(#getPattern#(#src#.#getRev#(#)#)#)#.#matcher#(#mrid#.#getRevision#(#)#)#;#if#(#!#matchers#[#3#]#.#matches#(#)#)#{#return#false#;#}#return#true#;#//CheckStyle:MagicNumber| ON#}##ModuleRevisionId#apply#(#MRIDRule#dest#,#ModuleRevisionId#mrid#)#{#String#org#=#applyRules#(#dest#.#getOrg#(#)#,#"o"#)#;#String#mod#=#applyRules#(#dest#.#getModule#(#)#,#"m"#)#;#String#branch#=#applyRules#(#dest#.#getBranch#(#)#,#"b"#)#;#String#rev#=#applyRules#(#dest#.#getRev#(#)#,#"r"#)#;#return#ModuleRevisionId#.#newInstance#(#org#,#mod#,#branch#,#rev#,#mrid#.#getQualifiedExtraAttributes#(#)#)#;#}##String#applyRules#(#String#str#,#String#type#)#{#for#(#int#i#=#0#;#i#<#TYPES#.#length#;#i#++#)#{#str#=#applyTypeRule#(#str#,#TYPES#[#i#]#,#type#,#matchers#[#i#]#)#;#}#return#str#;#}##String#applyTypeRule#(#String#rule#,#String#type#,#String#ruleType#,#Matcher#m#)#{#if#(#m#==#null#)#{#return#rule#;#}#String#res#=#rule#==#null#?#"$"#+#ruleType#+#"0"#:#rule#;#for#(#int#i#=#0#;#i#<#TYPES#.#length#;#i#++#)#{#if#(#TYPES#[#i#]#.#equals#(#type#)#)#{#res#=#res#.#replaceAll#(#"([^\\\\])\\$"#+#type#,#"$1\\$"#)#;#res#=#res#.#replaceAll#(#"^\\$"#+#type#,#"\\$"#)#;#}#else#{#res#=#res#.#replaceAll#(#"([^\\\\])\\$"#+#TYPES#[#i#]#,#"$1\\\\\\$"#+#TYPES#[#i#]#)#;#res#=#res#.#replaceAll#(#"^\\$"#+#TYPES#[#i#]#,#"\\\\\\$"#+#TYPES#[#i#]#)#;#}#}#StringBuffer#sb#=#new#StringBuffer#(#)#;#m#.#reset#(#)#;#m#.#find#(#)#;#m#.#appendReplacement#(#sb#,#res#)#;#String#str#=#sb#.#toString#(#)#;#// null rule not replaced, let it be null#if#(#rule#==#null#&&#(#"$"#+#ruleType#+#"0"#)#.#equals#(#str#)#)#{#return#null#;#}#return#str#;#}##String#getPattern#(#String#p#)#{#return#p#==#null#?#".*"#:#p#;#}##void#addSrc#(#MRIDRule#src#)#{#this#.#src#.#add#(#src#)#;#}##void#addDest#(#MRIDRule#dest#)#{#if#(#this#.#dest#!=#null#)#{#throw#new#IllegalArgumentException#(#"only one dest is allowed per mapping"#)#;#}#this#.#dest#=#dest#;#}##ModuleRevisionId#transform#(#ModuleRevisionId#mrid#)#{#MridRuleMatcher#matcher#=#new#MridRuleMatcher#(#)#;#for#(#Iterator#iter#=#src#.#iterator#(#)#;#iter#.#hasNext#(#)#;#)#{#MRIDRule#rule#=#(#MRIDRule#)#iter#.#next#(#)#;#if#(#matcher#.#match#(#rule#,#mrid#)#)#{#ModuleRevisionId#destMrid#=#matcher#.#apply#(#dest#,#mrid#)#;#Message#.#debug#(#"found matching namespace rule: "#+#rule#+#". Applied "#+#dest#+#" on "#+#mrid#+#". Transformed to "#+#destMrid#)#;#return#destMrid#;#}#}#return#mrid#;#}##boolean#isIdentity#(#)#{#return#false#;#}##