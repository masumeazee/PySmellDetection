ResolvedResource#findIvyFileRef#(#DependencyDescriptor#dd#,#ResolveData#data#)#{#if#(#isM2compatible#(#)#&&#isUsepoms#(#)#)#{#ModuleRevisionId#mrid#=#dd#.#getDependencyRevisionId#(#)#;#mrid#=#convertM2IdForResourceSearch#(#mrid#)#;#ResolvedResource#rres#=#null#;#if#(#dd#.#getDependencyRevisionId#(#)#.#getRevision#(#)#.#endsWith#(#"SNAPSHOT"#)#)#{#rres#=#findSnapshotDescriptor#(#dd#,#data#,#mrid#)#;#if#(#rres#!=#null#)#{#return#rres#;#}#}#rres#=#findResourceUsingPatterns#(#mrid#,#getIvyPatterns#(#)#,#DefaultArtifact#.#newPomArtifact#(#mrid#,#data#.#getDate#(#)#)#,#getRMDParser#(#dd#,#data#)#,#data#.#getDate#(#)#)#;#return#rres#;#}#else#{#return#null#;#}#}##ResolvedResource#findArtifactRef#(#Artifact#artifact#,#Date#date#)#{#ensureConfigured#(#getSettings#(#)#)#;#ModuleRevisionId#mrid#=#artifact#.#getModuleRevisionId#(#)#;#if#(#isM2compatible#(#)#)#{#mrid#=#convertM2IdForResourceSearch#(#mrid#)#;#}#ResolvedResource#rres#=#null#;#if#(#artifact#.#getId#(#)#.#getRevision#(#)#.#endsWith#(#"SNAPSHOT"#)#&&#isM2compatible#(#)#)#{#rres#=#findSnapshotArtifact#(#artifact#,#date#,#mrid#)#;#if#(#rres#!=#null#)#{#return#rres#;#}#}#return#findResourceUsingPatterns#(#mrid#,#getArtifactPatterns#(#)#,#artifact#,#getDefaultRMDParser#(#artifact#.#getModuleRevisionId#(#)#.#getModuleId#(#)#)#,#date#)#;#}##ResolvedResource#findSnapshotArtifact#(#Artifact#artifact#,#Date#date#,#ModuleRevisionId#mrid#)#{#String#rev#=#findSnapshotVersion#(#mrid#)#;#if#(#rev#!=#null#)#{#// replace the revision token in file name with the resolved revision#String#pattern#=#getWholePattern#(#)#.#replaceFirst#(#"\\-\\[revision\\]"#,#"-"#+#rev#)#;#return#findResourceUsingPattern#(#mrid#,#pattern#,#artifact#,#getDefaultRMDParser#(#artifact#.#getModuleRevisionId#(#)#.#getModuleId#(#)#)#,#date#)#;#}#return#null#;#}##ResolvedResource#findSnapshotDescriptor#(#DependencyDescriptor#dd#,#ResolveData#data#,#ModuleRevisionId#mrid#)#{#String#rev#=#findSnapshotVersion#(#mrid#)#;#if#(#rev#!=#null#)#{#// here it would be nice to be able to store the resolved snapshot version, to avoid#// having to follow the same process to download artifacts#Message#.#verbose#(#"["#+#rev#+#"] "#+#mrid#)#;#// replace the revision token in file name with the resolved revision#String#pattern#=#getWholePattern#(#)#.#replaceFirst#(#"\\-\\[revision\\]"#,#"-"#+#rev#)#;#return#findResourceUsingPattern#(#mrid#,#pattern#,#DefaultArtifact#.#newPomArtifact#(#mrid#,#data#.#getDate#(#)#)#,#getRMDParser#(#dd#,#data#)#,#data#.#getDate#(#)#)#;#}#return#null#;#}##String#findSnapshotVersion#(#ModuleRevisionId#mrid#)#{#if#(#!#isM2compatible#(#)#)#{#return#null#;#}#if#(#shouldUseMavenMetadata#(#getWholePattern#(#)#)#)#{#InputStream#metadataStream#=#null#;#try#{#String#metadataLocation#=#IvyPatternHelper#.#substitute#(#root#+#"[organisation]/[module]/[revision]/maven-metadata.xml"#,#mrid#)#;#Resource#metadata#=#getRepository#(#)#.#getResource#(#metadataLocation#)#;#if#(#metadata#.#exists#(#)#)#{#metadataStream#=#metadata#.#openStream#(#)#;#final#StringBuffer#timestamp#=#new#StringBuffer#(#)#;#final#StringBuffer#buildNumer#=#new#StringBuffer#(#)#;#XMLHelper#.#parse#(#metadataStream#,#null#,#new#ContextualSAXHandler#(#)#{#public#void#endElement#(#String#uri#,#String#localName#,#String#qName#)#throws#SAXException#{#if#(#"metadata/versioning/snapshot/timestamp"#.#equals#(#getContext#(#)#)#)#{#timestamp#.#append#(#getText#(#)#)#;#}#if#(#"metadata/versioning/snapshot/buildNumber"#.#equals#(#getContext#(#)#)#)#{#buildNumer#.#append#(#getText#(#)#)#;#}#super#.#endElement#(#uri#,#localName#,#qName#)#;#}#}#,#null#)#;#if#(#timestamp#.#length#(#)#>#0#)#{#// we have found a timestamp, so this is a snapshot unique version#String#rev#=#mrid#.#getRevision#(#)#;#rev#=#rev#.#substring#(#0#,#rev#.#length#(#)#-#"SNAPSHOT"#.#length#(#)#)#;#rev#=#rev#+#timestamp#.#toString#(#)#+#"-"#+#buildNumer#.#toString#(#)#;#return#rev#;#}#}#else#{#Message#.#verbose#(#"\tmaven-metadata not available: "#+#metadata#)#;#}#}#catch#(#IOException#e#)#{#Message#.#verbose#(#"impossible to access maven metadata file, ignored: "#+#e#.#getMessage#(#)#)#;#}#catch#(#SAXException#e#)#{#Message#.#verbose#(#"impossible to parse maven metadata file, ignored: "#+#e#.#getMessage#(#)#)#;#}#catch#(#ParserConfigurationException#e#)#{#Message#.#verbose#(#"impossible to parse maven metadata file, ignored: "#+#e#.#getMessage#(#)#)#;#}#finally#{#if#(#metadataStream#!=#null#)#{#try#{#metadataStream#.#close#(#)#;#}#catch#(#IOException#e#)#{#// ignored#}#}#}#}#return#null#;#}##void#endElement#(#String#uri#,#String#localName#,#String#qName#)#throws#SAXException#{#if#(#"metadata/versioning/snapshot/timestamp"#.#equals#(#getContext#(#)#)#)#{#timestamp#.#append#(#getText#(#)#)#;#}#if#(#"metadata/versioning/snapshot/buildNumber"#.#equals#(#getContext#(#)#)#)#{#buildNumer#.#append#(#getText#(#)#)#;#}#super#.#endElement#(#uri#,#localName#,#qName#)#;#}##void#setM2compatible#(#boolean#m2compatible#)#{#super#.#setM2compatible#(#m2compatible#)#;#if#(#m2compatible#)#{#if#(#root#==#null#)#{#root#=#DEFAULT_M2_ROOT#;#}#if#(#pattern#==#null#)#{#pattern#=#M2_PATTERN#;#}#updateWholePattern#(#)#;#}#}##void#ensureConfigured#(#ResolverSettings#settings#)#{#if#(#settings#!=#null#&&#(#root#==#null#||#pattern#==#null#)#)#{#if#(#root#==#null#)#{#String#root#=#settings#.#getVariable#(#"ivy.ibiblio.default.artifact.root"#)#;#if#(#root#!=#null#)#{#this#.#root#=#root#;#}#else#{#settings#.#configureRepositories#(#true#)#;#this#.#root#=#settings#.#getVariable#(#"ivy.ibiblio.default.artifact.root"#)#;#}#}#if#(#pattern#==#null#)#{#String#pattern#=#settings#.#getVariable#(#"ivy.ibiblio.default.artifact.pattern"#)#;#if#(#pattern#!=#null#)#{#this#.#pattern#=#pattern#;#}#else#{#settings#.#configureRepositories#(#false#)#;#this#.#pattern#=#settings#.#getVariable#(#"ivy.ibiblio.default.artifact.pattern"#)#;#}#}#updateWholePattern#(#)#;#}#}##String#getModuleDescriptorExtension#(#)#{#return#"pom"#;#}##String#getWholePattern#(#)#{#return#root#+#pattern#;#}##String#getPattern#(#)#{#return#pattern#;#}##void#setPattern#(#String#pattern#)#{#if#(#pattern#==#null#)#{#throw#new#NullPointerException#(#"pattern must not be null"#)#;#}#this#.#pattern#=#pattern#;#ensureConfigured#(#getSettings#(#)#)#;#updateWholePattern#(#)#;#}##String#getRoot#(#)#{#return#root#;#}##void#setRoot#(#String#root#)#{#if#(#root#==#null#)#{#throw#new#NullPointerException#(#"root must not be null"#)#;#}#if#(#!#root#.#endsWith#(#"/"#)#)#{#this#.#root#=#root#+#"/"#;#}#else#{#this#.#root#=#root#;#}#ensureConfigured#(#getSettings#(#)#)#;#updateWholePattern#(#)#;#}##void#updateWholePattern#(#)#{#if#(#isM2compatible#(#)#&&#isUsepoms#(#)#)#{#setIvyPatterns#(#Collections#.#singletonList#(#getWholePattern#(#)#)#)#;#}#setArtifactPatterns#(#Collections#.#singletonList#(#getWholePattern#(#)#)#)#;#}##void#publish#(#Artifact#artifact#,#File#src#)#{#throw#new#UnsupportedOperationException#(#"publish not supported by IBiblioResolver"#)#;#}##String#[#]#listTokenValues#(#String#token#,#Map#otherTokenValues#)#{#if#(#IvyPatternHelper#.#ORGANISATION_KEY#.#equals#(#token#)#)#{#return#new#String#[#0#]#;#}#if#(#IvyPatternHelper#.#MODULE_KEY#.#equals#(#token#)#&&#!#isM2compatible#(#)#)#{#return#new#String#[#0#]#;#}#ensureConfigured#(#getSettings#(#)#)#;#return#super#.#listTokenValues#(#token#,#otherTokenValues#)#;#}##String#[#]#listTokenValues#(#String#pattern#,#String#token#)#{#if#(#IvyPatternHelper#.#ORGANISATION_KEY#.#equals#(#token#)#)#{#return#new#String#[#0#]#;#}#if#(#IvyPatternHelper#.#MODULE_KEY#.#equals#(#token#)#&&#!#isM2compatible#(#)#)#{#return#new#String#[#0#]#;#}#ensureConfigured#(#getSettings#(#)#)#;#// let's see if we should use maven metadata for this listing...#if#(#IvyPatternHelper#.#REVISION_KEY#.#equals#(#token#)#&&#shouldUseMavenMetadata#(#getWholePattern#(#)#)#)#{#// now we must use metadata if available#/*
             * we substitute tokens with ext token only in the m2 per module pattern, to match
             * has has been done in the given pattern
             */#String#partiallyResolvedM2PerModulePattern#=#IvyPatternHelper#.#substituteTokens#(#M2_PER_MODULE_PATTERN#,#Collections#.#singletonMap#(#IvyPatternHelper#.#EXT_KEY#,#"pom"#)#)#;#if#(#pattern#.#endsWith#(#partiallyResolvedM2PerModulePattern#)#)#{#/*
                 * the given pattern already contain resolved org and module, we just have to
                 * replace the per module pattern at the end by 'maven-metadata.xml' to have the
                 * maven metadata file location
                 */#String#metadataLocation#=#pattern#.#substring#(#0#,#pattern#.#lastIndexOf#(#partiallyResolvedM2PerModulePattern#)#)#+#"maven-metadata.xml"#;#List#revs#=#listRevisionsWithMavenMetadata#(#getRepository#(#)#,#metadataLocation#)#;#if#(#revs#!=#null#)#{#return#(#String#[#]#)#revs#.#toArray#(#new#String#[#revs#.#size#(#)#]#)#;#}#}#else#{#/*
                 * this is probably because the given pattern has been substituted with jar ext,
                 * if this resolver has optional module descriptors. But since we have to use
                 * maven metadata, we don't care about this case, maven metadata has already
                 * been used when looking for revisions with the pattern substituted with
                 * ext=xml for the "ivy" pattern.
                 */#return#new#String#[#0#]#;#}#}#return#super#.#listTokenValues#(#pattern#,#token#)#;#}##OrganisationEntry#[#]#listOrganisations#(#)#{#return#new#OrganisationEntry#[#0#]#;#}##ModuleEntry#[#]#listModules#(#OrganisationEntry#org#)#{#if#(#isM2compatible#(#)#)#{#ensureConfigured#(#getSettings#(#)#)#;#return#super#.#listModules#(#org#)#;#}#return#new#ModuleEntry#[#0#]#;#}##RevisionEntry#[#]#listRevisions#(#ModuleEntry#mod#)#{#ensureConfigured#(#getSettings#(#)#)#;#return#super#.#listRevisions#(#mod#)#;#}##ResolvedResource#[#]#listResources#(#Repository#repository#,#ModuleRevisionId#mrid#,#String#pattern#,#Artifact#artifact#)#{#if#(#shouldUseMavenMetadata#(#pattern#)#)#{#List#revs#=#listRevisionsWithMavenMetadata#(#repository#,#mrid#.#getModuleId#(#)#.#getAttributes#(#)#)#;#if#(#revs#!=#null#)#{#Message#.#debug#(#"\tfound revs: "#+#revs#)#;#List#rres#=#new#ArrayList#(#)#;#for#(#Iterator#iter#=#revs#.#iterator#(#)#;#iter#.#hasNext#(#)#;#)#{#String#rev#=#(#String#)#iter#.#next#(#)#;#String#resolvedPattern#=#IvyPatternHelper#.#substitute#(#pattern#,#ModuleRevisionId#.#newInstance#(#mrid#,#rev#)#,#artifact#)#;#try#{#Resource#res#=#repository#.#getResource#(#resolvedPattern#)#;#if#(#(#res#!=#null#)#&&#res#.#exists#(#)#)#{#rres#.#add#(#new#ResolvedResource#(#res#,#rev#)#)#;#}#}#catch#(#IOException#e#)#{#Message#.#warn#(#"impossible to get resource from name listed by maven-metadata.xml:"#+#rres#+#": "#+#e#.#getMessage#(#)#)#;#}#}#return#(#ResolvedResource#[#]#)#rres#.#toArray#(#new#ResolvedResource#[#rres#.#size#(#)#]#)#;#}#else#{#// maven metadata not available or something went wrong, #// use default listing capability#return#super#.#listResources#(#repository#,#mrid#,#pattern#,#artifact#)#;#}#}#else#{#return#super#.#listResources#(#repository#,#mrid#,#pattern#,#artifact#)#;#}#}##List#listRevisionsWithMavenMetadata#(#Repository#repository#,#Map#tokenValues#)#{#String#metadataLocation#=#IvyPatternHelper#.#substituteTokens#(#root#+#"[organisation]/[module]/maven-metadata.xml"#,#tokenValues#)#;#return#listRevisionsWithMavenMetadata#(#repository#,#metadataLocation#)#;#}##List#listRevisionsWithMavenMetadata#(#Repository#repository#,#String#metadataLocation#)#{#List#revs#=#null#;#InputStream#metadataStream#=#null#;#try#{#Resource#metadata#=#repository#.#getResource#(#metadataLocation#)#;#if#(#metadata#.#exists#(#)#)#{#Message#.#verbose#(#"\tlisting revisions from maven-metadata: "#+#metadata#)#;#final#List#metadataRevs#=#new#ArrayList#(#)#;#metadataStream#=#metadata#.#openStream#(#)#;#XMLHelper#.#parse#(#metadataStream#,#null#,#new#ContextualSAXHandler#(#)#{#public#void#endElement#(#String#uri#,#String#localName#,#String#qName#)#throws#SAXException#{#if#(#"metadata/versioning/versions/version"#.#equals#(#getContext#(#)#)#)#{#metadataRevs#.#add#(#getText#(#)#.#trim#(#)#)#;#}#super#.#endElement#(#uri#,#localName#,#qName#)#;#}#}#,#null#)#;#revs#=#metadataRevs#;#}#else#{#Message#.#verbose#(#"\tmaven-metadata not available: "#+#metadata#)#;#}#}#catch#(#IOException#e#)#{#Message#.#verbose#(#"impossible to access maven metadata file, ignored: "#+#e#.#getMessage#(#)#)#;#}#catch#(#SAXException#e#)#{#Message#.#verbose#(#"impossible to parse maven metadata file, ignored: "#+#e#.#getMessage#(#)#)#;#}#catch#(#ParserConfigurationException#e#)#{#Message#.#verbose#(#"impossible to parse maven metadata file, ignored: "#+#e#.#getMessage#(#)#)#;#}#finally#{#if#(#metadataStream#!=#null#)#{#try#{#metadataStream#.#close#(#)#;#}#catch#(#IOException#e#)#{#// ignored#}#}#}#return#revs#;#}##void#endElement#(#String#uri#,#String#localName#,#String#qName#)#throws#SAXException#{#if#(#"metadata/versioning/versions/version"#.#equals#(#getContext#(#)#)#)#{#metadataRevs#.#add#(#getText#(#)#.#trim#(#)#)#;#}#super#.#endElement#(#uri#,#localName#,#qName#)#;#}##void#findTokenValues#(#Collection#names#,#List#patterns#,#Map#tokenValues#,#String#token#)#{#if#(#IvyPatternHelper#.#REVISION_KEY#.#equals#(#token#)#)#{#if#(#shouldUseMavenMetadata#(#getWholePattern#(#)#)#)#{#List#revs#=#listRevisionsWithMavenMetadata#(#getRepository#(#)#,#tokenValues#)#;#if#(#revs#!=#null#)#{#names#.#addAll#(#filterNames#(#revs#)#)#;#return#;#}#}#}#super#.#findTokenValues#(#names#,#patterns#,#tokenValues#,#token#)#;#}##boolean#shouldUseMavenMetadata#(#String#pattern#)#{#return#isUseMavenMetadata#(#)#&&#isM2compatible#(#)#&&#pattern#.#endsWith#(#M2_PATTERN#)#;#}##String#getTypeName#(#)#{#return#"ibiblio"#;#}##ResolvedModuleRevision#getDependency#(#DependencyDescriptor#dd#,#ResolveData#data#)#throws#ParseException#{#ensureConfigured#(#data#.#getSettings#(#)#)#;#return#super#.#getDependency#(#dd#,#data#)#;#}##DownloadReport#download#(#Artifact#[#]#artifacts#,#DownloadOptions#options#)#{#ensureConfigured#(#getSettings#(#)#)#;#return#super#.#download#(#artifacts#,#options#)#;#}##boolean#exists#(#Artifact#artifact#)#{#ensureConfigured#(#getSettings#(#)#)#;#return#super#.#exists#(#artifact#)#;#}##ArtifactOrigin#locate#(#Artifact#artifact#)#{#ensureConfigured#(#getSettings#(#)#)#;#return#super#.#locate#(#artifact#)#;#}##List#getArtifactPatterns#(#)#{#ensureConfigured#(#getSettings#(#)#)#;#return#super#.#getArtifactPatterns#(#)#;#}##boolean#isUsepoms#(#)#{#return#usepoms#;#}##void#setUsepoms#(#boolean#usepoms#)#{#this#.#usepoms#=#usepoms#;#updateWholePattern#(#)#;#}##boolean#isUseMavenMetadata#(#)#{#return#useMavenMetadata#;#}##void#setUseMavenMetadata#(#boolean#useMavenMetadata#)#{#this#.#useMavenMetadata#=#useMavenMetadata#;#}##void#dumpSettings#(#)#{#ensureConfigured#(#getSettings#(#)#)#;#super#.#dumpSettings#(#)#;#Message#.#debug#(#"\t\troot: "#+#getRoot#(#)#)#;#Message#.#debug#(#"\t\tpattern: "#+#getPattern#(#)#)#;#Message#.#debug#(#"\t\tusepoms: "#+#usepoms#)#;#Message#.#debug#(#"\t\tuseMavenMetadata: "#+#useMavenMetadata#)#;#}##